(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/_app"],{

/***/ "./node_modules/@babel/runtime/helpers/esm/extends.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _extends; }
/* harmony export */ });
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _objectWithoutPropertiesLoose; }
/* harmony export */ });
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ "./node_modules/next/router.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../store */ "./store/index.js");
/* harmony import */ var swiper_swiper_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! swiper/swiper.scss */ "./node_modules/swiper/swiper.scss");
/* harmony import */ var swiper_swiper_scss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(swiper_swiper_scss__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var rc_slider_assets_index_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rc-slider/assets/index.css */ "./node_modules/rc-slider/assets/index.css");
/* harmony import */ var rc_slider_assets_index_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(rc_slider_assets_index_css__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var react_rater_lib_react_rater_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-rater/lib/react-rater.css */ "./node_modules/react-rater/lib/react-rater.css");
/* harmony import */ var react_rater_lib_react_rater_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_rater_lib_react_rater_css__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _assets_css_styles_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../assets/css/styles.scss */ "./assets/css/styles.scss");
/* harmony import */ var _assets_css_styles_scss__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_assets_css_styles_scss__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _utils_gtag__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../utils/gtag */ "./utils/gtag.js");
/* module decorator */ module = __webpack_require__.hmd(module);



var _jsxFileName = "D:\\WEB DESIGN\\CLIENT PROJECTS\\ONGOING\\next-ecommerce\\pages\\_app.js",
    _this = undefined;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



 // global styles






var isProduction = false; // only events on production

if (isProduction) {
  // Notice how we track pageview when route is changed
  next_router__WEBPACK_IMPORTED_MODULE_3___default().events.on('routeChangeComplete', function (url) {
    return _utils_gtag__WEBPACK_IMPORTED_MODULE_9__.pageview(url);
  });
}

var MyApp = function MyApp(_ref) {
  var Component = _ref.Component,
      pageProps = _ref.pageProps;
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, {
    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(Component, _objectSpread({}, pageProps), void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 24,
      columnNumber: 5
    }, _this)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 23,
    columnNumber: 3
  }, _this);
};

_c = MyApp;
/* harmony default export */ __webpack_exports__["default"] = (_c2 = _store__WEBPACK_IMPORTED_MODULE_4__.wrapper.withRedux(MyApp));

var _c, _c2;

$RefreshReg$(_c, "MyApp");
$RefreshReg$(_c2, "%default%");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./store/index.js":
/*!************************!*\
  !*** ./store/index.js ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wrapper": function() { return /* binding */ wrapper; }
/* harmony export */ });
/* harmony import */ var D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/redux.js");
/* harmony import */ var redux_thunk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux-thunk */ "./node_modules/redux-thunk/es/index.js");
/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-redux-wrapper */ "./node_modules/next-redux-wrapper/es6/index.js");
/* harmony import */ var _reducers_cart__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reducers/cart */ "./store/reducers/cart.js");
/* harmony import */ var _reducers_user__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reducers/user */ "./store/reducers/user.js");
/* module decorator */ module = __webpack_require__.hmd(module);





 //COMBINING ALL REDUCERS

var combinedReducer = (0,redux__WEBPACK_IMPORTED_MODULE_5__.combineReducers)({
  cart: _reducers_cart__WEBPACK_IMPORTED_MODULE_3__.default,
  user: _reducers_user__WEBPACK_IMPORTED_MODULE_4__.default
}); // BINDING MIDDLEWARE

var bindMiddleware = function bindMiddleware(middleware) {
  if (true) {
    var _require = __webpack_require__(/*! redux-devtools-extension */ "./node_modules/redux-devtools-extension/index.js"),
        composeWithDevTools = _require.composeWithDevTools;

    return composeWithDevTools(redux__WEBPACK_IMPORTED_MODULE_5__.applyMiddleware.apply(void 0, (0,D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(middleware)));
  }

  return redux__WEBPACK_IMPORTED_MODULE_5__.applyMiddleware.apply(void 0, (0,D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(middleware));
};

var makeStore = function makeStore(_ref) {
  var isServer = _ref.isServer;

  if (isServer) {
    //If it's on server side, create a store
    return (0,redux__WEBPACK_IMPORTED_MODULE_5__.createStore)(combinedReducer, bindMiddleware([redux_thunk__WEBPACK_IMPORTED_MODULE_1__.default]));
  } else {
    //If it's on client side, create a store which will persist
    var _require2 = __webpack_require__(/*! redux-persist */ "./node_modules/redux-persist/es/index.js"),
        persistStore = _require2.persistStore,
        persistReducer = _require2.persistReducer;

    var storage = __webpack_require__(/*! redux-persist/lib/storage */ "./node_modules/redux-persist/lib/storage/index.js").default;

    var persistConfig = {
      key: "shoppingcart",
      whitelist: ["cart", "user"],
      // only counter will be persisted, add other reducers if needed
      storage: storage // if needed, use a safer storage

    };
    var persistedReducer = persistReducer(persistConfig, combinedReducer); // Create a new reducer with our existing reducer

    var store = (0,redux__WEBPACK_IMPORTED_MODULE_5__.createStore)(persistedReducer, bindMiddleware([redux_thunk__WEBPACK_IMPORTED_MODULE_1__.default])); // Creating the store again

    store.__persistor = persistStore(store); // This creates a persistor object & push that persisted object to .__persistor, so that we can avail the persistability feature

    return store;
  }
}; // export an assembled wrapper


var wrapper = (0,next_redux_wrapper__WEBPACK_IMPORTED_MODULE_2__.createWrapper)(makeStore, {
  debug: true
});

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./store/reducers/cart.js":
/*!********************************!*\
  !*** ./store/reducers/cart.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* module decorator */ module = __webpack_require__.hmd(module);



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var initialState = {
  cartItems: []
};

var indexSameProduct = function indexSameProduct(state, action) {
  var sameProduct = function sameProduct(product) {
    return product.id === action.id && product.color === action.color && product.size === action.size;
  };

  return state.cartItems.findIndex(sameProduct);
};

var cartReducer = function cartReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case 'ADD_PRODUCT':
      // find index of product
      var index = indexSameProduct(state, action);

      if (index !== -1) {
        state.cartItems[index].count += action.count;
        return _objectSpread(_objectSpread({}, state), {}, {
          cartItems: state.cartItems
        });
      }

      return _objectSpread(_objectSpread({}, state), {}, {
        cartItems: [].concat((0,D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__.default)(state.cartItems), [{
          id: action.id,
          name: action.name,
          thumb: action.thumb,
          price: action.price,
          count: action.count,
          color: action.color,
          size: action.size
        }])
      });

    case 'REMOVE_PRODUCT':
      // find index of product
      state.cartItems.splice(indexSameProduct(state, action), 1);
      return _objectSpread(_objectSpread({}, state), {}, {
        cartItems: state.cartItems
      });

    case 'SET_COUNT':
      // find index and add new count on product count
      var indexItem = indexSameProduct(state, action);
      state.cartItems[indexItem].count = action.count;
      return _objectSpread(_objectSpread({}, state), {}, {
        cartItems: state.cartItems
      });

    default:
      return state;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (cartReducer);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./store/reducers/user.js":
/*!********************************!*\
  !*** ./store/reducers/user.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var next_redux_wrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-redux-wrapper */ "./node_modules/next-redux-wrapper/es6/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* module decorator */ module = __webpack_require__.hmd(module);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,D_WEB_DESIGN_CLIENT_PROJECTS_ONGOING_next_ecommerce_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



var initialState = {
  user: {
    name: 'Lucas Pulliese'
  },
  favProducts: []
};

var userReducer = function userReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case 'TOGGLE_FAV_PRODUCT':
      var index = state.favProducts.includes(action.id);

      if (!index) {
        state.favProducts.push(action.id);
        return _objectSpread(_objectSpread({}, state), {}, {
          favProducts: state.favProducts
        });
      }

      (0,lodash__WEBPACK_IMPORTED_MODULE_2__.remove)(state.favProducts, function (id) {
        return id === action.id;
      });
      return _objectSpread(_objectSpread({}, state), {}, {
        favProducts: state.favProducts
      });

    case 'SET_USER_LOGGED':
      var user = action.user;

      if (!index) {
        state.favProducts.push(action.id);
        return _objectSpread(_objectSpread({}, state), {}, {
          favProducts: state.favProducts
        });
      }

      (0,lodash__WEBPACK_IMPORTED_MODULE_2__.remove)(state.favProducts, function (id) {
        return id === action.id;
      });
      return _objectSpread(_objectSpread({}, state), {}, {
        favProducts: state.favProducts
      });

    default:
      return state;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (userReducer);

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./utils/gtag.js":
/*!***********************!*\
  !*** ./utils/gtag.js ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GA_TRACKING_ID": function() { return /* binding */ GA_TRACKING_ID; },
/* harmony export */   "pageview": function() { return /* binding */ pageview; },
/* harmony export */   "event": function() { return /* binding */ event; }
/* harmony export */ });
/* module decorator */ module = __webpack_require__.hmd(module);
var GA_TRACKING_ID = 'UA-114361661-6'; // This is your GA Tracking ID
// https://developers.google.com/analytics/devguides/collection/gtagjs/pages

var pageview = function pageview(url) {
  window.gtag('config', GA_TRACKING_ID, {
    page_path: url
  });
}; // https://developers.google.com/analytics/devguides/collection/gtagjs/events

var event = function event(_ref) {
  var action = _ref.action,
      category = _ref.category,
      label = _ref.label,
      value = _ref.value;
  window.gtag('event', action, {
    event_category: category,
    event_label: label,
    value: value
  });
};

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ }),

/***/ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var reactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ "./node_modules/next-redux-wrapper/es6/index.js":
/*!******************************************************!*\
  !*** ./node_modules/next-redux-wrapper/es6/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HYDRATE": function() { return /* binding */ HYDRATE; },
/* harmony export */   "STOREKEY": function() { return /* binding */ STOREKEY; },
/* harmony export */   "createWrapper": function() { return /* binding */ createWrapper; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};


var HYDRATE = '__NEXT_REDUX_WRAPPER_HYDRATE__';
var STOREKEY = '__NEXT_REDUX_WRAPPER_STORE__';
var getIsServer = function () { return typeof window === 'undefined'; };
var getDeserializedState = function (initialState, _a) {
    var deserializeState = (_a === void 0 ? {} : _a).deserializeState;
    return deserializeState ? deserializeState(initialState) : initialState;
};
var getSerializedState = function (state, _a) {
    var serializeState = (_a === void 0 ? {} : _a).serializeState;
    return serializeState ? serializeState(state) : state;
};
var getStoreKey = function (_a) {
    var storeKey = (_a === void 0 ? {} : _a).storeKey;
    return storeKey || STOREKEY;
};
var initStore = function (_a) {
    var makeStore = _a.makeStore, context = _a.context, config = _a.config;
    var storeKey = getStoreKey(config);
    var createStore = function () { return makeStore(context); };
    if (getIsServer()) {
        var c = context;
        var req = void 0;
        if (c.req)
            req = c.req;
        if (c.ctx && c.ctx.req)
            req = c.ctx.req;
        if (req) {
            // ATTENTION! THIS IS INTERNAL, DO NOT ACCESS DIRECTLY ANYWHERE ELSE
            // @see https://github.com/kirill-konshin/next-redux-wrapper/pull/196#issuecomment-611673546
            if (!req.__nextReduxWrapperStore)
                req.__nextReduxWrapperStore = createStore();
            return req.__nextReduxWrapperStore;
        }
        return createStore();
    }
    // Memoize store if client
    if (!(storeKey in window)) {
        window[storeKey] = createStore();
    }
    return window[storeKey];
};
var createWrapper = function (makeStore, config) {
    if (config === void 0) { config = {}; }
    var makeProps = function (_a) {
        var callback = _a.callback, context = _a.context, _b = _a.isApp, isApp = _b === void 0 ? false : _b;
        return __awaiter(void 0, void 0, void 0, function () {
            var store, initialProps, _c, state;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        store = initStore({ context: context, makeStore: makeStore, config: config });
                        if (config.debug)
                            console.log("1. getProps created store with state", store.getState());
                        _c = callback;
                        if (!_c) return [3 /*break*/, 2];
                        return [4 /*yield*/, callback(
                            // merging store into context instead of just passing as another argument because it's impossible to override getInitialProps signature
                            isApp ? __assign(__assign({}, context), { ctx: __assign(__assign({}, context.ctx), { store: store }) }) : __assign(__assign({}, context), { store: store }))];
                    case 1:
                        _c = (_d.sent());
                        _d.label = 2;
                    case 2:
                        initialProps = (_c) ||
                            {};
                        if (config.debug)
                            console.log("3. getProps after dispatches has store state", store.getState());
                        state = store.getState();
                        return [2 /*return*/, {
                                initialProps: initialProps,
                                initialState: getIsServer() ? getSerializedState(state, config) : state,
                            }];
                }
            });
        });
    };
    var getInitialPageProps = function (callback) { return function (context) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (context.store) {
                console.warn('No need to wrap pages if _app was wrapped');
                return [2 /*return*/, callback(context)];
            }
            return [2 /*return*/, makeProps({ callback: callback, context: context })];
        });
    }); }; };
    var getInitialAppProps = function (callback) { return function (context) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, makeProps({ callback: callback, context: context, isApp: true })];
            case 1: return [2 /*return*/, (_a.sent())];
        }
    }); }); }; }; // this is just to convince TS
    var getStaticProps = function (callback) { return function (context) { return __awaiter(void 0, void 0, void 0, function () {
        var _a, _b, props, settings, wrapperProps;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, makeProps({ callback: callback, context: context })];
                case 1:
                    _a = _c.sent(), _b = _a.initialProps, props = _b.props, settings = __rest(_b, ["props"]), wrapperProps = __rest(_a, ["initialProps"]);
                    return [2 /*return*/, __assign(__assign({}, settings), { props: __assign(__assign({}, wrapperProps), props) })];
            }
        });
    }); }; };
    var getServerSideProps = function (callback) { return function (context) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getStaticProps(callback)(context)];
                case 1: return [2 /*return*/, _a.sent()]; // just not to repeat myself
            }
        });
    }); }; };
    var withRedux = function (Component) {
        var displayName = "withRedux(" + (Component.displayName || Component.name || 'Component') + ")";
        //TODO Check if pages/_app was wrapped so there's no need to wrap a page itself
        var Wrapper = function (_a, context) {
            var _b;
            var initialState = _a.initialState, initialProps = _a.initialProps, props = __rest(_a, ["initialState", "initialProps"]);
            var isFirstRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);
            // this happens when App has page with getServerSideProps/getStaticProps
            var initialStateFromGSPorGSSR = (_b = props === null || props === void 0 ? void 0 : props.pageProps) === null || _b === void 0 ? void 0 : _b.initialState;
            if (config.debug)
                console.log('4. WrappedApp created new store with', displayName, {
                    initialState: initialState,
                    initialStateFromGSPorGSSR: initialStateFromGSPorGSSR,
                });
            var store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initStore({ makeStore: makeStore, config: config, context: context }));
            var hydrate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {
                if (initialState)
                    store.current.dispatch({
                        type: HYDRATE,
                        payload: getDeserializedState(initialState, config),
                    });
                // ATTENTION! This code assumes that Page's getServerSideProps is executed after App.getInitialProps
                // so we dispatch in this order
                if (initialStateFromGSPorGSSR)
                    store.current.dispatch({
                        type: HYDRATE,
                        payload: getDeserializedState(initialStateFromGSPorGSSR, config),
                    });
            }, [initialStateFromGSPorGSSR, initialState]);
            // apply synchronously on first render (both server side and client side)
            if (isFirstRender.current)
                hydrate();
            // apply async in case props have changed, on navigation for example
            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
                if (isFirstRender.current) {
                    isFirstRender.current = false;
                    return;
                }
                hydrate();
            }, [hydrate]);
            // order is important! Next.js overwrites props from pages/_app with getStaticProps from page
            // @see https://github.com/zeit/next.js/issues/11648
            if (initialProps && initialProps.pageProps)
                props.pageProps = __assign(__assign({}, initialProps.pageProps), props.pageProps);
            var resultProps = props;
            // just some cleanup to prevent passing it as props, we need to clone props to safely delete initialState
            if (initialStateFromGSPorGSSR) {
                resultProps = __assign(__assign({}, props), { pageProps: __assign({}, props.pageProps) });
                delete resultProps.pageProps.initialState;
            }
            return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_redux__WEBPACK_IMPORTED_MODULE_1__.Provider, { store: store.current },
                react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, __assign({}, initialProps, resultProps))));
        };
        Wrapper.displayName = displayName;
        if ('getInitialProps' in Component)
            Wrapper.getInitialProps = function (context) { return __awaiter(void 0, void 0, void 0, function () {
                var callback;
                return __generator(this, function (_a) {
                    callback = Component.getInitialProps;
                    return [2 /*return*/, (context.ctx ? getInitialAppProps(callback) : getInitialPageProps(callback))(context)];
                });
            }); };
        return Wrapper;
    };
    return {
        getServerSideProps: getServerSideProps,
        getStaticProps: getStaticProps,
        withRedux: withRedux,
    };
};
// Legacy
/* harmony default export */ __webpack_exports__["default"] = (function (makeStore, config) {
    if (config === void 0) { config = {}; }
    console.warn('/!\\ You are using legacy implementaion. Please update your code: use createWrapper() and wrapper.withRedux().');
    return createWrapper(makeStore, config).withRedux;
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.js!":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.js! ***!
  \**********************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {


    (window.__NEXT_P = window.__NEXT_P || []).push([
      "/_app",
      function () {
        return __webpack_require__(/*! private-next-pages/_app.js */ "./pages/_app.js");
      }
    ]);
  

/***/ }),

/***/ "./node_modules/rc-slider/assets/index.css":
/*!*************************************************!*\
  !*** ./node_modules/rc-slider/assets/index.css ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./index.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/rc-slider/assets/index.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element){// These elements should always exist. If they do not,
// this code should fail.
var anchorElement=document.querySelector('#__next_css__DO_NOT_USE__');var parentNode=anchorElement.parentNode;// Normally <head>
// Each style tag should be placed right before our
// anchor. By inserting before and not after, we do not
// need to track the last inserted element.
parentNode.insertBefore(element,anchorElement);};
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a,b,isNamedExport){if(!a&&b||a&&!b){return false;}let p;for(p in a){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(a[p]!==b[p]){return false;}}for(p in b){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(!a[p]){return false;}}return true;};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./index.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/rc-slider/assets/index.css",
      function () {
        content = __webpack_require__(/*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./index.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/rc-slider/assets/index.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./node_modules/react-rater/lib/react-rater.css":
/*!******************************************************!*\
  !*** ./node_modules/react-rater/lib/react-rater.css ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./react-rater.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/react-rater/lib/react-rater.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element){// These elements should always exist. If they do not,
// this code should fail.
var anchorElement=document.querySelector('#__next_css__DO_NOT_USE__');var parentNode=anchorElement.parentNode;// Normally <head>
// Each style tag should be placed right before our
// anchor. By inserting before and not after, we do not
// need to track the last inserted element.
parentNode.insertBefore(element,anchorElement);};
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a,b,isNamedExport){if(!a&&b||a&&!b){return false;}let p;for(p in a){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(a[p]!==b[p]){return false;}}for(p in b){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(!a[p]){return false;}}return true;};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./react-rater.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/react-rater/lib/react-rater.css",
      function () {
        content = __webpack_require__(/*! !!../../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!../../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./react-rater.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/react-rater/lib/react-rater.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./assets/css/styles.scss":
/*!********************************!*\
  !*** ./assets/css/styles.scss ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../../node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./styles.scss */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/styles.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element){// These elements should always exist. If they do not,
// this code should fail.
var anchorElement=document.querySelector('#__next_css__DO_NOT_USE__');var parentNode=anchorElement.parentNode;// Normally <head>
// Each style tag should be placed right before our
// anchor. By inserting before and not after, we do not
// need to track the last inserted element.
parentNode.insertBefore(element,anchorElement);};
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a,b,isNamedExport){if(!a&&b||a&&!b){return false;}let p;for(p in a){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(a[p]!==b[p]){return false;}}for(p in b){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(!a[p]){return false;}}return true;};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../../node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./styles.scss */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/styles.scss",
      function () {
        content = __webpack_require__(/*! !!../../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../../node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./styles.scss */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/styles.scss");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./node_modules/swiper/swiper.scss":
/*!*****************************************!*\
  !*** ./node_modules/swiper/swiper.scss ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./swiper.scss */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./node_modules/swiper/swiper.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {};

options.insert = function(element){// These elements should always exist. If they do not,
// this code should fail.
var anchorElement=document.querySelector('#__next_css__DO_NOT_USE__');var parentNode=anchorElement.parentNode;// Normally <head>
// Each style tag should be placed right before our
// anchor. By inserting before and not after, we do not
// need to track the last inserted element.
parentNode.insertBefore(element,anchorElement);};
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a,b,isNamedExport){if(!a&&b||a&&!b){return false;}let p;for(p in a){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(a[p]!==b[p]){return false;}}for(p in b){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(!a[p]){return false;}}return true;};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !!../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./swiper.scss */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./node_modules/swiper/swiper.scss",
      function () {
        content = __webpack_require__(/*! !!../next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./swiper.scss */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./node_modules/swiper/swiper.scss");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.id, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
  \************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
const isOldIE=function isOldIE(){let memo;return function memorize(){if(typeof memo==='undefined'){// Test for IE <= 9 as proposed by Browserhacks
// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
// Tests for existence of standard globals is to allow style-loader
// to operate correctly into non-standard environments
// @see https://github.com/webpack-contrib/style-loader/issues/177
memo=Boolean(window&&document&&document.all&&!window.atob);}return memo;};}();const getTarget=function getTarget(){const memo={};return function memorize(target){if(typeof memo[target]==='undefined'){let styleTarget=document.querySelector(target);// Special case to return head of iframe instead of iframe itself
if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement){try{// This will throw an exception if access to iframe is blocked
// due to cross-origin restrictions
styleTarget=styleTarget.contentDocument.head;}catch(e){// istanbul ignore next
styleTarget=null;}}memo[target]=styleTarget;}return memo[target];};}();const stylesInDom=[];function getIndexByIdentifier(identifier){let result=-1;for(let i=0;i<stylesInDom.length;i++){if(stylesInDom[i].identifier===identifier){result=i;break;}}return result;}function modulesToDom(list,options){const idCountMap={};const identifiers=[];for(let i=0;i<list.length;i++){const item=list[i];const id=options.base?item[0]+options.base:item[0];const count=idCountMap[id]||0;const identifier=id+' '+count.toString();idCountMap[id]=count+1;const index=getIndexByIdentifier(identifier);const obj={css:item[1],media:item[2],sourceMap:item[3]};if(index!==-1){stylesInDom[index].references++;stylesInDom[index].updater(obj);}else{stylesInDom.push({identifier:identifier,updater:addStyle(obj,options),references:1});}identifiers.push(identifier);}return identifiers;}function insertStyleElement(options){const style=document.createElement('style');const attributes=options.attributes||{};if(typeof attributes.nonce==='undefined'){const nonce=// eslint-disable-next-line no-undef
 true?__webpack_require__.nc:0;if(nonce){attributes.nonce=nonce;}}Object.keys(attributes).forEach(function(key){style.setAttribute(key,attributes[key]);});if(typeof options.insert==='function'){options.insert(style);}else{const target=getTarget(options.insert||'head');if(!target){throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");}target.appendChild(style);}return style;}function removeStyleElement(style){// istanbul ignore if
if(style.parentNode===null){return false;}style.parentNode.removeChild(style);}/* istanbul ignore next  */const replaceText=function replaceText(){const textStore=[];return function replace(index,replacement){textStore[index]=replacement;return textStore.filter(Boolean).join('\n');};}();function applyToSingletonTag(style,index,remove,obj){const css=remove?'':obj.media?'@media '+obj.media+' {'+obj.css+'}':obj.css;// For old IE
/* istanbul ignore if  */if(style.styleSheet){style.styleSheet.cssText=replaceText(index,css);}else{const cssNode=document.createTextNode(css);const childNodes=style.childNodes;if(childNodes[index]){style.removeChild(childNodes[index]);}if(childNodes.length){style.insertBefore(cssNode,childNodes[index]);}else{style.appendChild(cssNode);}}}function applyToTag(style,options,obj){let css=obj.css;const media=obj.media;const sourceMap=obj.sourceMap;if(media){style.setAttribute('media',media);}else{style.removeAttribute('media');}if(sourceMap&&typeof btoa!=='undefined'){css+='\n/*# sourceMappingURL=data:application/json;base64,'+btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))+' */';}// For old IE
/* istanbul ignore if  */if(style.styleSheet){style.styleSheet.cssText=css;}else{while(style.firstChild){style.removeChild(style.firstChild);}style.appendChild(document.createTextNode(css));}}let singleton=null;let singletonCounter=0;function addStyle(obj,options){let style;let update;let remove;if(options.singleton){const styleIndex=singletonCounter++;style=singleton||(singleton=insertStyleElement(options));update=applyToSingletonTag.bind(null,style,styleIndex,false);remove=applyToSingletonTag.bind(null,style,styleIndex,true);}else{style=insertStyleElement(options);update=applyToTag.bind(null,style,options);remove=function(){removeStyleElement(style);};}update(obj);return function updateStyle(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap){return;}update(obj=newObj);}else{remove();}};}module.exports=function(list,options){options=options||{};// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
if(!options.singleton&&typeof options.singleton!=='boolean'){options.singleton=isOldIE();}list=list||[];let lastIdentifiers=modulesToDom(list,options);return function update(newList){newList=newList||[];if(Object.prototype.toString.call(newList)!=='[object Array]'){return;}for(let i=0;i<lastIdentifiers.length;i++){const identifier=lastIdentifiers[i];const index=getIndexByIdentifier(identifier);stylesInDom[index].references--;}const newLastIdentifiers=modulesToDom(newList,options);for(let i=0;i<lastIdentifiers.length;i++){const identifier=lastIdentifiers[i];const index=getIndexByIdentifier(identifier);if(stylesInDom[index].references===0){stylesInDom[index].updater();stylesInDom.splice(index,1);}}lastIdentifiers=newLastIdentifiers;};};
//# sourceMappingURL=injectStylesIntoStyleTag.js.map

/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/api.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/api.js ***!
  \***********************************************************/
/***/ (function(module) {

var __dirname = "/";
module.exports=function(){"use strict";var n={762:function(n){n.exports=function(n){var t=[];t.toString=function toString(){return this.map(function(t){var r=cssWithMappingToString(t,n);if(t[2]){return"@media ".concat(t[2]," {").concat(r,"}")}return r}).join("")};t.i=function(n,r,o){if(typeof n==="string"){n=[[null,n,""]]}var e={};if(o){for(var a=0;a<this.length;a++){var c=this[a][0];if(c!=null){e[c]=true}}}for(var i=0;i<n.length;i++){var u=[].concat(n[i]);if(o&&e[u[0]]){continue}if(r){if(!u[2]){u[2]=r}else{u[2]="".concat(r," and ").concat(u[2])}}t.push(u)}};return t};function cssWithMappingToString(n,t){var r=n[1]||"";var o=n[3];if(!o){return r}if(t&&typeof btoa==="function"){var e=toComment(o);var a=o.sources.map(function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")});return[r].concat(a).concat([e]).join("\n")}return[r].join("\n")}function toComment(n){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n))));var r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t);return"/*# ".concat(r," */")}}};var t={};function __nccwpck_require__(r){if(t[r]){return t[r].exports}var o=t[r]={exports:{}};var e=true;try{n[r](o,o.exports,__nccwpck_require__);e=false}finally{if(e)delete t[r]}return o.exports}__nccwpck_require__.ab=__dirname+"/";return __nccwpck_require__(762)}();

/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/rc-slider/assets/index.css":
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/rc-slider/assets/index.css ***!
  \***************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".rc-slider {\n  position: relative;\n  height: 14px;\n  padding: 5px 0;\n  width: 100%;\n  border-radius: 6px;\n  touch-action: none;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-rail {\n  position: absolute;\n  width: 100%;\n  background-color: #e9e9e9;\n  height: 4px;\n  border-radius: 6px;\n}\n.rc-slider-track {\n  position: absolute;\n  left: 0;\n  height: 4px;\n  border-radius: 6px;\n  background-color: #abe2fb;\n}\n.rc-slider-handle {\n  position: absolute;\n  width: 14px;\n  height: 14px;\n  cursor: pointer;\n  cursor: -webkit-grab;\n  margin-top: -5px;\n  cursor: grab;\n  border-radius: 50%;\n  border: solid 2px #96dbfa;\n  background-color: #fff;\n  touch-action: pan-x;\n}\n.rc-slider-handle-dragging.rc-slider-handle-dragging.rc-slider-handle-dragging {\n  border-color: #57c5f7;\n  box-shadow: 0 0 0 5px #96dbfa;\n}\n.rc-slider-handle:focus {\n  outline: none;\n}\n.rc-slider-handle-click-focused:focus {\n  border-color: #96dbfa;\n  box-shadow: unset;\n}\n.rc-slider-handle:hover {\n  border-color: #57c5f7;\n}\n.rc-slider-handle:active {\n  border-color: #57c5f7;\n  box-shadow: 0 0 5px #57c5f7;\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n.rc-slider-mark {\n  position: absolute;\n  top: 18px;\n  left: 0;\n  width: 100%;\n  font-size: 12px;\n}\n.rc-slider-mark-text {\n  position: absolute;\n  display: inline-block;\n  vertical-align: middle;\n  text-align: center;\n  cursor: pointer;\n  color: #999;\n}\n.rc-slider-mark-text-active {\n  color: #666;\n}\n.rc-slider-step {\n  position: absolute;\n  width: 100%;\n  height: 4px;\n  background: transparent;\n}\n.rc-slider-dot {\n  position: absolute;\n  bottom: -2px;\n  margin-left: -4px;\n  width: 8px;\n  height: 8px;\n  border: 2px solid #e9e9e9;\n  background-color: #fff;\n  cursor: pointer;\n  border-radius: 50%;\n  vertical-align: middle;\n}\n.rc-slider-dot-active {\n  border-color: #96dbfa;\n}\n.rc-slider-dot-reverse {\n  margin-right: -4px;\n}\n.rc-slider-disabled {\n  background-color: #e9e9e9;\n}\n.rc-slider-disabled .rc-slider-track {\n  background-color: #ccc;\n}\n.rc-slider-disabled .rc-slider-handle,\n.rc-slider-disabled .rc-slider-dot {\n  border-color: #ccc;\n  box-shadow: none;\n  background-color: #fff;\n  cursor: not-allowed;\n}\n.rc-slider-disabled .rc-slider-mark-text,\n.rc-slider-disabled .rc-slider-dot {\n  cursor: not-allowed !important;\n}\n.rc-slider-vertical {\n  width: 14px;\n  height: 100%;\n  padding: 0 5px;\n}\n.rc-slider-vertical .rc-slider-rail {\n  height: 100%;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-track {\n  left: 5px;\n  bottom: 0;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-handle {\n  margin-left: -5px;\n  touch-action: pan-y;\n}\n.rc-slider-vertical .rc-slider-mark {\n  top: 0;\n  left: 18px;\n  height: 100%;\n}\n.rc-slider-vertical .rc-slider-step {\n  height: 100%;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-dot {\n  left: 2px;\n  margin-bottom: -4px;\n}\n.rc-slider-vertical .rc-slider-dot:first-child {\n  margin-bottom: -4px;\n}\n.rc-slider-vertical .rc-slider-dot:last-child {\n  margin-bottom: -4px;\n}\n.rc-slider-tooltip-zoom-down-enter,\n.rc-slider-tooltip-zoom-down-appear {\n  -webkit-animation-duration: 0.3s;\n          animation-duration: 0.3s;\n  -webkit-animation-fill-mode: both;\n          animation-fill-mode: both;\n  display: block !important;\n  -webkit-animation-play-state: paused;\n          animation-play-state: paused;\n}\n.rc-slider-tooltip-zoom-down-leave {\n  -webkit-animation-duration: 0.3s;\n          animation-duration: 0.3s;\n  -webkit-animation-fill-mode: both;\n          animation-fill-mode: both;\n  display: block !important;\n  -webkit-animation-play-state: paused;\n          animation-play-state: paused;\n}\n.rc-slider-tooltip-zoom-down-enter.rc-slider-tooltip-zoom-down-enter-active,\n.rc-slider-tooltip-zoom-down-appear.rc-slider-tooltip-zoom-down-appear-active {\n  -webkit-animation-name: rcSliderTooltipZoomDownIn;\n          animation-name: rcSliderTooltipZoomDownIn;\n  -webkit-animation-play-state: running;\n          animation-play-state: running;\n}\n.rc-slider-tooltip-zoom-down-leave.rc-slider-tooltip-zoom-down-leave-active {\n  -webkit-animation-name: rcSliderTooltipZoomDownOut;\n          animation-name: rcSliderTooltipZoomDownOut;\n  -webkit-animation-play-state: running;\n          animation-play-state: running;\n}\n.rc-slider-tooltip-zoom-down-enter,\n.rc-slider-tooltip-zoom-down-appear {\n  transform: scale(0, 0);\n  -webkit-animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);\n          animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);\n}\n.rc-slider-tooltip-zoom-down-leave {\n  -webkit-animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n          animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n}\n@-webkit-keyframes rcSliderTooltipZoomDownIn {\n  0% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n  100% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n}\n@keyframes rcSliderTooltipZoomDownIn {\n  0% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n  100% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n}\n@-webkit-keyframes rcSliderTooltipZoomDownOut {\n  0% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n  100% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n}\n@keyframes rcSliderTooltipZoomDownOut {\n  0% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n  100% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n}\n.rc-slider-tooltip {\n  position: absolute;\n  left: -9999px;\n  top: -9999px;\n  visibility: visible;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-tooltip * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-tooltip-hidden {\n  display: none;\n}\n.rc-slider-tooltip-placement-top {\n  padding: 4px 0 8px 0;\n}\n.rc-slider-tooltip-inner {\n  padding: 6px 2px;\n  min-width: 24px;\n  height: 24px;\n  font-size: 12px;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  text-decoration: none;\n  background-color: #6c6c6c;\n  border-radius: 6px;\n  box-shadow: 0 0 4px #d9d9d9;\n}\n.rc-slider-tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.rc-slider-tooltip-placement-top .rc-slider-tooltip-arrow {\n  bottom: 4px;\n  left: 50%;\n  margin-left: -4px;\n  border-width: 4px 4px 0;\n  border-top-color: #6c6c6c;\n}\n", "",{"version":3,"sources":["webpack://node_modules/rc-slider/assets/index.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,YAAY;EACZ,cAAc;EACd,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,sBAAsB;EACtB,6CAA6C;AAC/C;AACA;EACE,sBAAsB;EACtB,6CAA6C;AAC/C;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,yBAAyB;EACzB,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,kBAAkB;EAClB,OAAO;EACP,WAAW;EACX,kBAAkB;EAClB,yBAAyB;AAC3B;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,oBAAoB;EACpB,gBAAgB;EAChB,YAAY;EACZ,kBAAkB;EAClB,yBAAyB;EACzB,sBAAsB;EACtB,mBAAmB;AACrB;AACA;EACE,qBAAqB;EACrB,6BAA6B;AAC/B;AACA;EACE,aAAa;AACf;AACA;EACE,qBAAqB;EACrB,iBAAiB;AACnB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,qBAAqB;EACrB,2BAA2B;EAC3B,wBAAwB;EACxB,gBAAgB;AAClB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,OAAO;EACP,WAAW;EACX,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,kBAAkB;EAClB,eAAe;EACf,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,WAAW;EACX,uBAAuB;AACzB;AACA;EACE,kBAAkB;EAClB,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,WAAW;EACX,yBAAyB;EACzB,sBAAsB;EACtB,eAAe;EACf,kBAAkB;EAClB,sBAAsB;AACxB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,kBAAkB;AACpB;AACA;EACE,yBAAyB;AAC3B;AACA;EACE,sBAAsB;AACxB;AACA;;EAEE,kBAAkB;EAClB,gBAAgB;EAChB,sBAAsB;EACtB,mBAAmB;AACrB;AACA;;EAEE,8BAA8B;AAChC;AACA;EACE,WAAW;EACX,YAAY;EACZ,cAAc;AAChB;AACA;EACE,YAAY;EACZ,UAAU;AACZ;AACA;EACE,SAAS;EACT,SAAS;EACT,UAAU;AACZ;AACA;EACE,iBAAiB;EACjB,mBAAmB;AACrB;AACA;EACE,MAAM;EACN,UAAU;EACV,YAAY;AACd;AACA;EACE,YAAY;EACZ,UAAU;AACZ;AACA;EACE,SAAS;EACT,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;;EAEE,gCAAwB;UAAxB,wBAAwB;EACxB,iCAAyB;UAAzB,yBAAyB;EACzB,yBAAyB;EACzB,oCAA4B;UAA5B,4BAA4B;AAC9B;AACA;EACE,gCAAwB;UAAxB,wBAAwB;EACxB,iCAAyB;UAAzB,yBAAyB;EACzB,yBAAyB;EACzB,oCAA4B;UAA5B,4BAA4B;AAC9B;AACA;;EAEE,iDAAyC;UAAzC,yCAAyC;EACzC,qCAA6B;UAA7B,6BAA6B;AAC/B;AACA;EACE,kDAA0C;UAA1C,0CAA0C;EAC1C,qCAA6B;UAA7B,6BAA6B;AAC/B;AACA;;EAEE,sBAAsB;EACtB,iEAAyD;UAAzD,yDAAyD;AAC3D;AACA;EACE,yEAAiE;UAAjE,iEAAiE;AACnE;AACA;EACE;IACE,UAAU;IACV,0BAA0B;IAC1B,sBAAsB;EACxB;EACA;IACE,0BAA0B;IAC1B,sBAAsB;EACxB;AACF;AAVA;EACE;IACE,UAAU;IACV,0BAA0B;IAC1B,sBAAsB;EACxB;EACA;IACE,0BAA0B;IAC1B,sBAAsB;EACxB;AACF;AACA;EACE;IACE,0BAA0B;IAC1B,sBAAsB;EACxB;EACA;IACE,UAAU;IACV,0BAA0B;IAC1B,sBAAsB;EACxB;AACF;AAVA;EACE;IACE,0BAA0B;IAC1B,sBAAsB;EACxB;EACA;IACE,UAAU;IACV,0BAA0B;IAC1B,sBAAsB;EACxB;AACF;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,mBAAmB;EACnB,sBAAsB;EACtB,6CAA6C;AAC/C;AACA;EACE,sBAAsB;EACtB,6CAA6C;AAC/C;AACA;EACE,aAAa;AACf;AACA;EACE,oBAAoB;AACtB;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,YAAY;EACZ,eAAe;EACf,cAAc;EACd,WAAW;EACX,kBAAkB;EAClB,qBAAqB;EACrB,yBAAyB;EACzB,kBAAkB;EAClB,2BAA2B;AAC7B;AACA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,yBAAyB;EACzB,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,SAAS;EACT,iBAAiB;EACjB,uBAAuB;EACvB,yBAAyB;AAC3B","sourcesContent":[".rc-slider {\n  position: relative;\n  height: 14px;\n  padding: 5px 0;\n  width: 100%;\n  border-radius: 6px;\n  touch-action: none;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-rail {\n  position: absolute;\n  width: 100%;\n  background-color: #e9e9e9;\n  height: 4px;\n  border-radius: 6px;\n}\n.rc-slider-track {\n  position: absolute;\n  left: 0;\n  height: 4px;\n  border-radius: 6px;\n  background-color: #abe2fb;\n}\n.rc-slider-handle {\n  position: absolute;\n  width: 14px;\n  height: 14px;\n  cursor: pointer;\n  cursor: -webkit-grab;\n  margin-top: -5px;\n  cursor: grab;\n  border-radius: 50%;\n  border: solid 2px #96dbfa;\n  background-color: #fff;\n  touch-action: pan-x;\n}\n.rc-slider-handle-dragging.rc-slider-handle-dragging.rc-slider-handle-dragging {\n  border-color: #57c5f7;\n  box-shadow: 0 0 0 5px #96dbfa;\n}\n.rc-slider-handle:focus {\n  outline: none;\n}\n.rc-slider-handle-click-focused:focus {\n  border-color: #96dbfa;\n  box-shadow: unset;\n}\n.rc-slider-handle:hover {\n  border-color: #57c5f7;\n}\n.rc-slider-handle:active {\n  border-color: #57c5f7;\n  box-shadow: 0 0 5px #57c5f7;\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n.rc-slider-mark {\n  position: absolute;\n  top: 18px;\n  left: 0;\n  width: 100%;\n  font-size: 12px;\n}\n.rc-slider-mark-text {\n  position: absolute;\n  display: inline-block;\n  vertical-align: middle;\n  text-align: center;\n  cursor: pointer;\n  color: #999;\n}\n.rc-slider-mark-text-active {\n  color: #666;\n}\n.rc-slider-step {\n  position: absolute;\n  width: 100%;\n  height: 4px;\n  background: transparent;\n}\n.rc-slider-dot {\n  position: absolute;\n  bottom: -2px;\n  margin-left: -4px;\n  width: 8px;\n  height: 8px;\n  border: 2px solid #e9e9e9;\n  background-color: #fff;\n  cursor: pointer;\n  border-radius: 50%;\n  vertical-align: middle;\n}\n.rc-slider-dot-active {\n  border-color: #96dbfa;\n}\n.rc-slider-dot-reverse {\n  margin-right: -4px;\n}\n.rc-slider-disabled {\n  background-color: #e9e9e9;\n}\n.rc-slider-disabled .rc-slider-track {\n  background-color: #ccc;\n}\n.rc-slider-disabled .rc-slider-handle,\n.rc-slider-disabled .rc-slider-dot {\n  border-color: #ccc;\n  box-shadow: none;\n  background-color: #fff;\n  cursor: not-allowed;\n}\n.rc-slider-disabled .rc-slider-mark-text,\n.rc-slider-disabled .rc-slider-dot {\n  cursor: not-allowed !important;\n}\n.rc-slider-vertical {\n  width: 14px;\n  height: 100%;\n  padding: 0 5px;\n}\n.rc-slider-vertical .rc-slider-rail {\n  height: 100%;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-track {\n  left: 5px;\n  bottom: 0;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-handle {\n  margin-left: -5px;\n  touch-action: pan-y;\n}\n.rc-slider-vertical .rc-slider-mark {\n  top: 0;\n  left: 18px;\n  height: 100%;\n}\n.rc-slider-vertical .rc-slider-step {\n  height: 100%;\n  width: 4px;\n}\n.rc-slider-vertical .rc-slider-dot {\n  left: 2px;\n  margin-bottom: -4px;\n}\n.rc-slider-vertical .rc-slider-dot:first-child {\n  margin-bottom: -4px;\n}\n.rc-slider-vertical .rc-slider-dot:last-child {\n  margin-bottom: -4px;\n}\n.rc-slider-tooltip-zoom-down-enter,\n.rc-slider-tooltip-zoom-down-appear {\n  animation-duration: 0.3s;\n  animation-fill-mode: both;\n  display: block !important;\n  animation-play-state: paused;\n}\n.rc-slider-tooltip-zoom-down-leave {\n  animation-duration: 0.3s;\n  animation-fill-mode: both;\n  display: block !important;\n  animation-play-state: paused;\n}\n.rc-slider-tooltip-zoom-down-enter.rc-slider-tooltip-zoom-down-enter-active,\n.rc-slider-tooltip-zoom-down-appear.rc-slider-tooltip-zoom-down-appear-active {\n  animation-name: rcSliderTooltipZoomDownIn;\n  animation-play-state: running;\n}\n.rc-slider-tooltip-zoom-down-leave.rc-slider-tooltip-zoom-down-leave-active {\n  animation-name: rcSliderTooltipZoomDownOut;\n  animation-play-state: running;\n}\n.rc-slider-tooltip-zoom-down-enter,\n.rc-slider-tooltip-zoom-down-appear {\n  transform: scale(0, 0);\n  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);\n}\n.rc-slider-tooltip-zoom-down-leave {\n  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n}\n@keyframes rcSliderTooltipZoomDownIn {\n  0% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n  100% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n}\n@keyframes rcSliderTooltipZoomDownOut {\n  0% {\n    transform-origin: 50% 100%;\n    transform: scale(1, 1);\n  }\n  100% {\n    opacity: 0;\n    transform-origin: 50% 100%;\n    transform: scale(0, 0);\n  }\n}\n.rc-slider-tooltip {\n  position: absolute;\n  left: -9999px;\n  top: -9999px;\n  visibility: visible;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-tooltip * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.rc-slider-tooltip-hidden {\n  display: none;\n}\n.rc-slider-tooltip-placement-top {\n  padding: 4px 0 8px 0;\n}\n.rc-slider-tooltip-inner {\n  padding: 6px 2px;\n  min-width: 24px;\n  height: 24px;\n  font-size: 12px;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  text-decoration: none;\n  background-color: #6c6c6c;\n  border-radius: 6px;\n  box-shadow: 0 0 4px #d9d9d9;\n}\n.rc-slider-tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.rc-slider-tooltip-placement-top .rc-slider-tooltip-arrow {\n  bottom: 4px;\n  left: 50%;\n  margin-left: -4px;\n  border-width: 4px 4px 0;\n  border-top-color: #6c6c6c;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/react-rater/lib/react-rater.css":
/*!********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[5].use[2]!./node_modules/react-rater/lib/react-rater.css ***!
  \********************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".react-rater {\n  display: inline-block;\n  line-height: normal; }\n  .react-rater > * {\n    display: inline-block; }\n\n.react-rater-star {\n  cursor: pointer;\n  color: #ccc;\n  position: relative; }\n  .react-rater-star.will-be-active {\n    color: #666; }\n  .react-rater-star.is-active {\n    color: #000; }\n  .react-rater-star.is-active-half:before {\n    color: #000;\n    content: '\\2605';\n    position: absolute;\n    left: 0;\n    width: 50%;\n    overflow: hidden; }\n  .react-rater-star.is-disabled {\n    cursor: default; }\n", "",{"version":3,"sources":["webpack://node_modules/react-rater/lib/react-rater.css"],"names":[],"mappings":"AAAA;EACE,qBAAqB;EACrB,mBAAmB,EAAE;EACrB;IACE,qBAAqB,EAAE;;AAE3B;EACE,eAAe;EACf,WAAW;EACX,kBAAkB,EAAE;EACpB;IACE,WAAW,EAAE;EACf;IACE,WAAW,EAAE;EACf;IACE,WAAW;IACX,gBAAgB;IAChB,kBAAkB;IAClB,OAAO;IACP,UAAU;IACV,gBAAgB,EAAE;EACpB;IACE,eAAe,EAAE","sourcesContent":[".react-rater {\n  display: inline-block;\n  line-height: normal; }\n  .react-rater > * {\n    display: inline-block; }\n\n.react-rater-star {\n  cursor: pointer;\n  color: #ccc;\n  position: relative; }\n  .react-rater-star.will-be-active {\n    color: #666; }\n  .react-rater-star.is-active {\n    color: #000; }\n  .react-rater-star.is-active-half:before {\n    color: #000;\n    content: '\\2605';\n    position: absolute;\n    left: 0;\n    width: 50%;\n    overflow: hidden; }\n  .react-rater-star.is-disabled {\n    cursor: default; }\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/fonts/icons/icons.css":
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/fonts/icons/icons.css ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_getUrl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../node_modules/next/dist/compiled/css-loader/getUrl.js */ "./node_modules/next/dist/compiled/css-loader/getUrl.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_getUrl_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_getUrl_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _icons_eot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./icons.eot */ "./assets/css/fonts/icons/icons.eot");
/* harmony import */ var _icons_woff2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./icons.woff2 */ "./assets/css/fonts/icons/icons.woff2");
/* harmony import */ var _icons_woff__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./icons.woff */ "./assets/css/fonts/icons/icons.woff");
/* harmony import */ var _icons_ttf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icons.ttf */ "./assets/css/fonts/icons/icons.ttf");
/* harmony import */ var _icons_svg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./icons.svg */ "./assets/css/fonts/icons/icons.svg");
// Imports







var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_next_dist_compiled_css_loader_getUrl_js__WEBPACK_IMPORTED_MODULE_1___default()(_icons_eot__WEBPACK_IMPORTED_MODULE_2__.default);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_next_dist_compiled_css_loader_getUrl_js__WEBPACK_IMPORTED_MODULE_1___default()(_icons_woff2__WEBPACK_IMPORTED_MODULE_3__.default);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_next_dist_compiled_css_loader_getUrl_js__WEBPACK_IMPORTED_MODULE_1___default()(_icons_woff__WEBPACK_IMPORTED_MODULE_4__.default);
var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_next_dist_compiled_css_loader_getUrl_js__WEBPACK_IMPORTED_MODULE_1___default()(_icons_ttf__WEBPACK_IMPORTED_MODULE_5__.default);
var ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_next_dist_compiled_css_loader_getUrl_js__WEBPACK_IMPORTED_MODULE_1___default()(_icons_svg__WEBPACK_IMPORTED_MODULE_6__.default);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@charset \"UTF-8\";\n@font-face {\n  font-family: \"icons\";\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ");\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"embedded-opentype\"), url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format(\"woff2\"), url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format(\"woff\"), url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ") format(\"truetype\"), url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ") format(\"svg\");\n  font-weight: normal;\n  font-style: normal;\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'icons';\n    src: url('../font/icons.svg?33421751#icons') format('svg');\n  }\n}\n*/\n[class^=icon-]:before, [class*=\" icon-\"]:before {\n  font-family: \"icons\";\n  font-style: normal;\n  font-weight: normal;\n  speak: never;\n  display: inline-block;\n  text-decoration: inherit;\n  margin-right: 0.2em;\n  text-align: center;\n  /* opacity: .8; */\n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-feature-settings: normal;\n  font-variant: normal;\n  text-transform: none;\n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1em;\n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: 0.2em;\n  /* you can be more comfortable with increased icons size */\n  /* font-size: 120%; */\n  /* Font smoothing. That was taken from TWBS */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n\n.icon-up-open:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-down-open:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-cash:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-payment:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-shipping:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-delivery-fast:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-cart:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-search:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-home:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-delivery:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-avatar:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-left:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-happy:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-materials:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-heart:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-right:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-card-payment:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-filters:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-send:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-cancel:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-twitter:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-facebook:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-linkedin:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-youtube-play:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-instagram:before {\n  content: \"\";\n}\n\n/* '' */", "",{"version":3,"sources":["webpack://icons.css"],"names":[],"mappings":"AAAA,gBAAgB;AAAhB;EACE,oBAAA;EACA,4CAAA;EACA,4SAAA;EAKA,mBAAA;EACA,kBAAA;AAFF;AAIA,gGAAA;AACA,2FAAA;AACA;;;;;;;CAAA;AASC;EACC,oBAAA;EACA,kBAAA;EACA,mBAAA;EACA,YAAA;EAEA,qBAAA;EACA,wBAAA;EACA,mBAAA;EACA,kBAAA;EACA,iBAAA;EAEA,gEAAA;EACA,6BAAA;EAAA,oBAAA;EACA,oBAAA;EAEA,8CAAA;EACA,gBAAA;EAEA,gEAAA;EACA,yBAAA;EACA,kBAAA;EAEA,0DAAA;EACA,qBAAA;EAEA,6CAAA;EACA,mCAAA;EACA,kCAAA;EAEA,4BAAA;EACA,uDAAA;AAVF;;AAaA;EAAuB,YAAA;AATvB;;AAS2C,QAAA;AAC3C;EAAyB,YAAA;AALzB;;AAK6C,QAAA;AAC7C;EAAoB,YAAA;AADpB;;AACwC,QAAA;AACxC;EAAuB,YAAA;AAGvB;;AAH2C,QAAA;AAC3C;EAAwB,YAAA;AAOxB;;AAP4C,QAAA;AAC5C;EAA6B,YAAA;AAW7B;;AAXiD,QAAA;AACjD;EAAoB,YAAA;AAepB;;AAfwC,QAAA;AACxC;EAAsB,YAAA;AAmBtB;;AAnB0C,QAAA;AAC1C;EAAoB,YAAA;AAuBpB;;AAvBwC,QAAA;AACxC;EAAwB,YAAA;AA2BxB;;AA3B4C,QAAA;AAC5C;EAAsB,YAAA;AA+BtB;;AA/B0C,QAAA;AAC1C;EAAoB,YAAA;AAmCpB;;AAnCwC,QAAA;AACxC;EAAqB,YAAA;AAuCrB;;AAvCyC,QAAA;AACzC;EAAyB,YAAA;AA2CzB;;AA3C6C,QAAA;AAC7C;EAAqB,YAAA;AA+CrB;;AA/CyC,QAAA;AACzC;EAAqB,YAAA;AAmDrB;;AAnDyC,QAAA;AACzC;EAA4B,YAAA;AAuD5B;;AAvDgD,QAAA;AAChD;EAAuB,YAAA;AA2DvB;;AA3D2C,QAAA;AAC3C;EAAoB,YAAA;AA+DpB;;AA/DwC,QAAA;AACxC;EAAsB,YAAA;AAmEtB;;AAnE0C,QAAA;AAC1C;EAAuB,YAAA;AAuEvB;;AAvE2C,QAAA;AAC3C;EAAwB,YAAA;AA2ExB;;AA3E4C,QAAA;AAC5C;EAAwB,YAAA;AA+ExB;;AA/E4C,QAAA;AAC5C;EAA4B,YAAA;AAmF5B;;AAnFgD,QAAA;AAChD;EAAyB,YAAA;AAuFzB;;AAvF6C,QAAA","sourcesContent":["@charset \"UTF-8\";\n@font-face {\n  font-family: \"icons\";\n  src: url(\"./icons.eot?33421751\");\n  src: url(\"./icons.eot?33421751#iefix\") format(\"embedded-opentype\"), url(\"./icons.woff2?33421751\") format(\"woff2\"), url(\"./icons.woff?33421751\") format(\"woff\"), url(\"./icons.ttf?33421751\") format(\"truetype\"), url(\"./icons.svg?33421751#icons\") format(\"svg\");\n  font-weight: normal;\n  font-style: normal;\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'icons';\n    src: url('../font/icons.svg?33421751#icons') format('svg');\n  }\n}\n*/\n[class^=icon-]:before, [class*=\" icon-\"]:before {\n  font-family: \"icons\";\n  font-style: normal;\n  font-weight: normal;\n  speak: never;\n  display: inline-block;\n  text-decoration: inherit;\n  margin-right: 0.2em;\n  text-align: center;\n  /* opacity: .8; */\n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-variant: normal;\n  text-transform: none;\n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1em;\n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: 0.2em;\n  /* you can be more comfortable with increased icons size */\n  /* font-size: 120%; */\n  /* Font smoothing. That was taken from TWBS */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n\n.icon-up-open:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-down-open:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-cash:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-payment:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-shipping:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-delivery-fast:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-cart:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-search:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-home:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-delivery:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-avatar:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-left:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-happy:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-materials:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-heart:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-right:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-card-payment:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-filters:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-send:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-cancel:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-twitter:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-facebook:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-linkedin:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-youtube-play:before {\n  content: \"\";\n}\n\n/* '' */\n.icon-instagram:before {\n  content: \"\";\n}\n\n/* '' */"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/partials/reset.css":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/partials/reset.css ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/* \nhtml5doctor.com Reset Stylesheet\nv1.6.1\nLast Updated: 2010-09-17\nAuthor: Richard Clark - http://richclarkdesign.com \nTwitter: @rich_clark\n*/\nhtml, body, div, span, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\nabbr, address, cite, code,\ndel, dfn, em, img, ins, kbd, q, samp,\nsmall, strong, sub, sup, var,\nb, i,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n\nbody {\n  line-height: 1;\n}\n\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block;\n}\n\nul {\n  list-style: none;\n}\n\nblockquote, q {\n  quotes: none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: \"\";\n  content: none;\n}\n\na {\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n  text-decoration: none;\n  color: inherit;\n}\n\n/* change colours to suit your needs */\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none;\n}\n\n/* change colours to suit your needs */\nmark {\n  background-color: #ff9;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\ndel {\n  text-decoration: line-through;\n}\n\nabbr[title], dfn[title] {\n  border-bottom: 1px dotted;\n  cursor: help;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* change border colour to suit your needs */\nhr {\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid #cccccc;\n  margin: 1em 0;\n  padding: 0;\n}\n\ninput, select, img {\n  vertical-align: middle;\n}\n\nbutton {\n  padding: 0;\n  margin: 0;\n}", "",{"version":3,"sources":["webpack://reset.css"],"names":[],"mappings":"AAAA;;;;;;CAAA;AAQA;;;;;;;;;;;;EAYI,SAAA;EACA,UAAA;EACA,SAAA;EACA,UAAA;EACA,eAAA;EACA,wBAAA;EACA,uBAAA;AAAJ;;AAGA;EACI,cAAA;AAAJ;;AAGA;;EAEI,cAAA;AAAJ;;AAGA;EACI,gBAAA;AAAJ;;AAGA;EACI,YAAA;AAAJ;;AAGA;;EAEI,WAAA;EACA,aAAA;AAAJ;;AAGA;EACI,SAAA;EACA,UAAA;EACA,eAAA;EACA,wBAAA;EACA,uBAAA;EACA,qBAAA;EACA,cAAA;AAAJ;;AAGA,sCAAA;AACA;EACI,sBAAA;EACA,WAAA;EACA,qBAAA;AAAJ;;AAGA,sCAAA;AACA;EACI,sBAAA;EACA,WAAA;EACA,kBAAA;EACA,iBAAA;AAAJ;;AAGA;EACI,6BAAA;AAAJ;;AAGA;EACI,yBAAA;EACA,YAAA;AAAJ;;AAGA;EACI,yBAAA;EACA,iBAAA;AAAJ;;AAGA,4CAAA;AACA;EACI,cAAA;EACA,WAAA;EACA,SAAA;EACA,6BAAA;EACA,aAAA;EACA,UAAA;AAAJ;;AAGA;EACI,sBAAA;AAAJ;;AAGA;EACI,UAAA;EACA,SAAA;AAAJ","sourcesContent":["/* \r\nhtml5doctor.com Reset Stylesheet\r\nv1.6.1\r\nLast Updated: 2010-09-17\r\nAuthor: Richard Clark - http://richclarkdesign.com \r\nTwitter: @rich_clark\r\n*/\r\n\r\nhtml, body, div, span, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\nabbr, address, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, samp,\r\nsmall, strong, sub, sup, var,\r\nb, i,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section, summary,\r\ntime, mark, audio, video {\r\n    margin:0;\r\n    padding:0;\r\n    border:0;\r\n    outline:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n}\r\n\r\nbody {\r\n    line-height:1;\r\n}\r\n\r\narticle,aside,details,figcaption,figure,\r\nfooter,header,hgroup,menu,nav,section { \r\n    display:block;\r\n}\r\n\r\nul {\r\n    list-style:none;\r\n}\r\n\r\nblockquote, q {\r\n    quotes:none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n    content:'';\r\n    content:none;\r\n}\r\n\r\na {\r\n    margin:0;\r\n    padding:0;\r\n    font-size:100%;\r\n    vertical-align:baseline;\r\n    background:transparent;\r\n    text-decoration:none;\r\n    color:inherit;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nins {\r\n    background-color:#ff9;\r\n    color:#000;\r\n    text-decoration:none;\r\n}\r\n\r\n/* change colours to suit your needs */\r\nmark {\r\n    background-color:#ff9;\r\n    color:#000; \r\n    font-style:italic;\r\n    font-weight:bold;\r\n}\r\n\r\ndel {\r\n    text-decoration: line-through;\r\n}\r\n\r\nabbr[title], dfn[title] {\r\n    border-bottom:1px dotted;\r\n    cursor:help;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n    border-spacing:0;\r\n}\r\n\r\n/* change border colour to suit your needs */\r\nhr {\r\n    display:block;\r\n    height:1px;\r\n    border:0;   \r\n    border-top:1px solid #cccccc;\r\n    margin:1em 0;\r\n    padding:0;\r\n}\r\n\r\ninput, select, img {\r\n    vertical-align:middle;\r\n}\r\n\r\nbutton {\r\n    padding: 0;\r\n    margin: 0;\r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/partials/responsive.css":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/partials/responsive.css ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/* // Extra small devices (portrait phones, less than 576px) */\n@media (max-width: 419.98px) {\n  /* header */\n  .logo {\n    max-width: 70px !important;\n  }\n\n  .container {\n    max-width: 420px !important;\n  }\n\n  .header-top,\n.header-bottom,\n.Category-card,\n.Cart-popup-outer,\n.cart-btn-hv,\n.ckSection {\n    display: none !important;\n  }\n\n  .page-intro .swiper-wrapper {\n    height: 200px !important;\n    margin-left: 0px !important;\n  }\n\n  .site-header .new-search-form {\n    width: 100% !important;\n    height: 40px !important;\n    padding: 7px !important;\n    margin-left: 5px !important;\n  }\n\n  .swiper-slide {\n    background-size: cover !important;\n  }\n\n  .site-header .new-search-form input {\n    font-size: 12px !important;\n  }\n\n  .site-header .seach-btn {\n    padding: 9.5px 17px !important;\n    right: -5px !important;\n  }\n\n  .site-header .seach-btn i {\n    font-size: 13px !important;\n  }\n\n  .site-nav {\n    display: block !important;\n  }\n\n  .shop-data li i {\n    height: 45px !important;\n    width: 45px !important;\n    font-size: 16px !important;\n  }\n\n  .shop-data {\n    justify-content: space-evenly !important;\n    margin-left: 0 !important;\n    margin-bottom: 0px !important;\n  }\n\n  .shop-data li .data-item__content h4 {\n    margin-bottom: 10px !important;\n    font-size: 10px !important;\n  }\n\n  .shop-data li .data-item__content p {\n    font-size: 11px !important;\n  }\n\n  /* header  end*/\n  .section-products-featured {\n    margin: 20px 0px !important;\n    padding: 20px 10px !important;\n  }\n\n  .section-products-featured .section-products-featured__header {\n    margin-bottom: 20px;\n  }\n\n  .section-products-featured .section-products-featured__header h3 {\n    padding-bottom: 9px !important;\n    font-size: 13px !important;\n  }\n\n  .todays-Sale span .timer-Wrap li {\n    margin-right: 6px !important;\n    width: 20px !important;\n    height: 20px !important;\n    line-height: 20px !important;\n    font-size: 12px !important;\n  }\n\n  .btn.btn--rounded {\n    font-size: 9px !important;\n    padding: 8px 14px !important;\n  }\n\n  .product-item .product__image img {\n    height: 130px !important;\n  }\n\n  .product-item .product__image {\n    height: 130px !important;\n    margin-bottom: 0px !important;\n  }\n\n  .product-item .product__description .btn-hm-add {\n    padding: 6px 10px !important;\n    font-size: 11px !important;\n  }\n\n  .product-item .product__description .product__price h4 {\n    font-size: 13px !important;\n  }\n\n  .product-item .product__description .product__price span {\n    margin-left: 12px !important;\n    font-size: 14px !important;\n  }\n\n  /* Product  end*/\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\n    width: 100px !important;\n    height: 100px !important;\n  }\n\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\n    font-size: 10px !important;\n    padding-top: 12px !important;\n  }\n\n  .cat-grid-wrap .cat-grid-item {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  /* cat end */\n  .brandslider .brand-list li {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  .brand-link h2 {\n    padding: 10px 0px !important;\n    font-size: 13px !important;\n  }\n\n  .customOrder .customOrder-list .customOrder-itemOne,\n.customOrder .customOrder-list .customOrder-itemTwo {\n    width: 100% !important;\n  }\n\n  /* brand end */\n  .customOrder {\n    margin: 20px 0px !important;\n    padding: 20px 10px !important;\n  }\n\n  .customOrder .heading h2 {\n    font-size: 13px !important;\n    padding-bottom: 10px !important;\n    width: 200px !important;\n  }\n\n  .saveTime-Wrap {\n    padding: 0px 0px 20px 0px !important;\n  }\n\n  /*  end */\n  .customOrder .customOrder-list {\n    width: 100% !important;\n  }\n\n  .customOrder .customOrder-list .customOrder-itemOne {\n    margin-right: 7px !important;\n  }\n\n  .customOrder .customOrder-list .CO-btn {\n    font-size: 14px !important;\n    padding: 8px 20px !important;\n    margin-top: 20px !important;\n  }\n\n  .saveTime-Wrap .saveTime img {\n    height: 100% !important;\n  }\n\n  .PromotionBanner {\n    margin-bottom: 20px !important;\n    flex-wrap: wrap !important;\n  }\n\n  .PromotionBanner .Promo-Banner-List {\n    grid-template-columns: auto !important;\n    padding-bottom: 10px !important;\n  }\n\n  .PromotionBanner .PromotionLeft {\n    display: none !important;\n  }\n\n  .PromotionBanner img {\n    width: 188px !important;\n  }\n\n  /*  end */\n  .Achive-wrap .Achive-header {\n    padding-bottom: 20px !important;\n  }\n\n  .Achive-wrap .Achive-header h2 {\n    padding-bottom: 10px !important;\n    font-size: 13px !important;\n    width: 150px !important;\n  }\n\n  .Achive-wrap .Achive-list {\n    flex-wrap: wrap !important;\n    flex-direction: row !important;\n  }\n\n  .Achive-list li {\n    flex-basis: calc(50% - 14px) !important;\n    display: flex !important;\n    justify-content: center !important;\n    flex-direction: column !important;\n    margin: 10px 0 10px 10px !important;\n  }\n\n  .Achive-wrap .Achive-list li p svg {\n    width: 30px !important;\n    height: 30px !important;\n  }\n\n  .Achive-wrap .Achive-list li span {\n    font-size: 18px !important;\n  }\n\n  .Achive-wrap .Achive-list li h3 {\n    font-size: 14px !important;\n    padding-top: 10px !important;\n  }\n\n  .Achive-wrap {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  .Achive-wrap .Achive-list li p i {\n    font-size: 28px !important;\n  }\n\n  /*  end */\n  .InfoSections-Wrap .InfoSections-header h2 {\n    font-size: 13px !important;\n    padding-bottom: 10px !important;\n  }\n\n  .InfoSections-Wrap .InfoSections-header {\n    padding-bottom: 30px !important;\n  }\n\n  .InfoSections-Wrap .Info-item {\n    width: 100% !important;\n  }\n\n  .Info-list {\n    flex-wrap: wrap !important;\n    flex-direction: column !important;\n  }\n\n  .Info-list .card button {\n    font-size: 13px !important;\n    padding: 11px 15px !important;\n  }\n\n  .Info-list li:last-child {\n    margin-top: 10px;\n  }\n\n  .InfoSections-Wrap {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  /* end */\n  .How-works {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  .How-works .How-works-header h2 {\n    width: 200px !important;\n    font-size: 16px !important;\n    padding-bottom: 10px !important;\n  }\n\n  /*  end */\n  .OurCustomerSay .heading h2 {\n    font-size: 13px !important;\n    padding-bottom: 10px !important;\n    width: 300px !important;\n  }\n\n  .OurCustomerSay {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  /*  end */\n  .OurCustomerSay .Testimonial-slide .swiper-slide p {\n    font-size: 13px !important;\n    line-height: 20px !important;\n  }\n\n  .OurCustomerSay .heading {\n    padding-bottom: 20px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide img {\n    width: 100px !important;\n    height: 100px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\n    padding: 0px 0px !important;\n  }\n\n  /*  end */\n  .subscribe .subscribe__content .subscribe__form input {\n    width: 70% !important;\n  }\n\n  .btn.btn--rounded {\n    padding: 8px 15px !important;\n  }\n\n  .subscribe .subscribe__content h4 {\n    font-size: 14px !important;\n    margin-bottom: 10px !important;\n  }\n\n  /* end */\n  .mobileApp {\n    width: 250px;\n  }\n\n  .site-footer__links ul {\n    margin-bottom: 30px;\n  }\n\n  .site-footer__links ul li {\n    margin-bottom: 15px !important;\n  }\n\n  .mobileApp .appleApp {\n    padding: 15px !important;\n    justify-content: center !important;\n  }\n\n  /* end */\n  /* product market page start*/\n  .product-market-page .product-market-body .product-market-item {\n    flex-basis: calc(50% - 14px) !important;\n    margin: 20px 0 10px 0px !important;\n  }\n\n  .product-market-page .product-market-body .view-pro {\n    padding: 11px 9px !important;\n    left: 11% !important;\n  }\n\n  /* product market page end*/\n  /* Blog page start*/\n  .blog-page .blog-content .blog-item {\n    flex-basis: calc(100% - 14px) !important;\n  }\n\n  .blog-details-page .blog-sidebar {\n    background: #ffffff;\n    margin-right: 15px !important;\n    width: 100% !important;\n  }\n\n  .blog-details-page {\n    flex-direction: column;\n  }\n\n  .blog-details-page .blog-details-content {\n    width: 100% !important;\n  }\n\n  /* Blog page end*/\n  /* faq page end*/\n  .faq-page .faq-header h2 {\n    font-size: 30px !important;\n    width: 300px !important;\n  }\n\n  .faq-page .faq-header p {\n    font-size: 14px !important;\n    line-height: 22px;\n  }\n\n  /* faq page end*/\n  .producer-page .producer-content .producer-item {\n    flex-basis: calc(100% - 14px) !important;\n  }\n\n  .service-point-page .serch-form button {\n    right: 6% !important;\n  }\n\n  /* faq page end*/\n  /*product market start  */\n  .product-market-banner {\n    margin: 0px !important;\n  }\n\n  /*product market start  */\n  /*payment start  */\n  .payment-body .payment-item {\n    padding: 10px 25px !important;\n  }\n\n  .payment-body .payment-item img {\n    width: 45px !important;\n  }\n\n  .show-content {\n    width: 100% !important;\n  }\n\n  .payment-body .payment-item h2 {\n    font-size: 12px !important;\n  }\n\n  .show-content form h3 {\n    font-size: 16px !important;\n  }\n\n  .show-content form .form-group .form-control {\n    font-size: 13px !important;\n  }\n\n  .show-content form p {\n    font-size: 12px !important;\n  }\n\n  /* payment end  */\n  /* view more page start  */\n  .view-more-pages-banner {\n    height: 30px !important;\n    margin-bottom: 20px;\n  }\n\n  .section-products-featured .section-products-featured__header h3 {\n    font-size: 10px !important;\n  }\n\n  .on-sale-view-more-header {\n    margin-bottom: 20px;\n    flex-direction: column;\n  }\n\n  .view-more-pages .timer-Wrap li {\n    margin-right: 5px !important;\n    padding: 5px !important;\n    font-size: 13px !important;\n  }\n\n  .view-more-pages .timer-Wrap li:first-child {\n    font-size: 12px !important;\n  }\n\n  .todays-Sale span {\n    padding-left: 5px !important;\n  }\n\n  .view-more-pages .timer-Wrap {\n    margin-top: 10px;\n  }\n\n  .view-details {\n    top: 23% !important;\n    right: 18% !important;\n    padding: 6px !important;\n    font-size: 12px !important;\n  }\n\n  /* view more page end  */\n}\n@media (min-width: 420px) and (max-width: 575.98px) {\n  /* header */\n  .logo {\n    max-width: 90px !important;\n  }\n\n  .container {\n    max-width: 420px !important;\n  }\n\n  .header-top,\n.header-bottom,\n.Category-card,\n.Cart-popup-outer,\n.cart-btn-hv,\n.ckSection {\n    display: none !important;\n  }\n\n  .page-intro .swiper-wrapper {\n    height: 200px !important;\n    margin-left: 0px !important;\n  }\n\n  .site-header .new-search-form {\n    width: 224px !important;\n    height: 40px !important;\n    padding: 7px !important;\n    margin-left: 15px !important;\n  }\n\n  .swiper-slide {\n    background-size: cover !important;\n  }\n\n  .site-header .new-search-form input {\n    font-size: 12px !important;\n  }\n\n  .site-header .seach-btn {\n    padding: 9.5px 17px !important;\n  }\n\n  .site-header .seach-btn i {\n    font-size: 13px !important;\n  }\n\n  .site-nav {\n    display: block !important;\n  }\n\n  .shop-data li i {\n    height: 45px !important;\n    width: 45px !important;\n    font-size: 16px !important;\n  }\n\n  .shop-data {\n    justify-content: space-evenly !important;\n    margin-left: 0 !important;\n    margin-bottom: 0px !important;\n  }\n\n  .shop-data li .data-item__content h4 {\n    margin-bottom: 10px !important;\n    font-size: 10px !important;\n  }\n\n  .shop-data li .data-item__content p {\n    font-size: 11px !important;\n  }\n\n  /* header  end*/\n  .section-products-featured {\n    margin: 20px 0px !important;\n    padding: 20px 10px !important;\n  }\n\n  .section-products-featured .section-products-featured__header {\n    margin-bottom: 20px;\n  }\n\n  .section-products-featured .section-products-featured__header h3 {\n    padding-bottom: 9px !important;\n    font-size: 13px !important;\n  }\n\n  .todays-Sale span .timer-Wrap li {\n    margin-right: 6px !important;\n    width: 20px !important;\n    height: 20px !important;\n    line-height: 20px !important;\n    font-size: 12px !important;\n  }\n\n  .btn.btn--rounded {\n    font-size: 9px !important;\n    padding: 8px 14px !important;\n  }\n\n  .product-item .product__image img {\n    height: 130px !important;\n  }\n\n  .product-item .product__image {\n    height: 130px !important;\n    margin-bottom: 0px !important;\n  }\n\n  .product-item .product__description .btn-hm-add {\n    padding: 6px 10px !important;\n    font-size: 11px !important;\n  }\n\n  .product-item .product__description .product__price h4 {\n    font-size: 13px !important;\n  }\n\n  .product-item .product__description .product__price span {\n    margin-left: 12px !important;\n    font-size: 14px !important;\n  }\n\n  /* Product  end*/\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\n    width: 100px !important;\n    height: 100px !important;\n  }\n\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\n    font-size: 10px !important;\n    padding-top: 12px !important;\n  }\n\n  .cat-grid-wrap .cat-grid-item {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  /* cat end */\n  .brandslider .brand-list li {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  .brand-link h2 {\n    padding: 10px 0px !important;\n    font-size: 13px !important;\n  }\n\n  /* brand end */\n  .customOrder {\n    margin: 20px 0px !important;\n    padding: 20px 10px !important;\n  }\n\n  .customOrder .heading h2 {\n    font-size: 13px !important;\n    padding-bottom: 10px !important;\n    width: 200px !important;\n  }\n\n  .saveTime-Wrap {\n    padding: 0px 0px 20px 0px !important;\n  }\n\n  /*  end */\n  .customOrder .customOrder-list {\n    width: 100% !important;\n  }\n\n  .customOrder .customOrder-list .customOrder-itemOne {\n    margin-right: 7px !important;\n  }\n\n  .customOrder .customOrder-list .CO-btn {\n    font-size: 14px !important;\n    padding: 8px 20px !important;\n    margin-top: 20px !important;\n  }\n\n  .saveTime-Wrap .saveTime img {\n    height: 100% !important;\n  }\n\n  .PromotionBanner {\n    margin-bottom: 20px !important;\n    flex-wrap: wrap !important;\n  }\n\n  .PromotionBanner .Promo-Banner-List {\n    grid-template-columns: auto auto !important;\n    padding-bottom: 10px !important;\n  }\n\n  .PromotionBanner .PromotionLeft {\n    display: none !important;\n  }\n\n  .PromotionBanner img {\n    width: 188px !important;\n  }\n\n  /*  end */\n  .Achive-wrap .Achive-header {\n    padding-bottom: 20px !important;\n  }\n\n  .Achive-wrap .Achive-header h2 {\n    padding-bottom: 10px !important;\n    font-size: 13px !important;\n    width: 150px !important;\n  }\n\n  .Achive-wrap .Achive-list {\n    flex-wrap: wrap !important;\n    flex-direction: row !important;\n  }\n\n  .Achive-list li {\n    flex-basis: calc(50% - 14px) !important;\n    display: flex !important;\n    justify-content: center !important;\n    flex-direction: column !important;\n    margin: 10px 0 10px 10px !important;\n  }\n\n  .Achive-wrap .Achive-list li p svg {\n    width: 30px !important;\n    height: 30px !important;\n  }\n\n  .Achive-wrap .Achive-list li span {\n    font-size: 18px !important;\n  }\n\n  .Achive-wrap .Achive-list li h3 {\n    font-size: 14px !important;\n    padding-top: 10px !important;\n  }\n\n  .Achive-wrap {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  .Achive-wrap .Achive-list li p i {\n    font-size: 28px !important;\n  }\n\n  /*  end */\n  .InfoSections-Wrap .InfoSections-header h2 {\n    font-size: 13px !important;\n    padding-bottom: 10px !important;\n  }\n\n  .InfoSections-Wrap .InfoSections-header {\n    padding-bottom: 30px !important;\n  }\n\n  .InfoSections-Wrap .Info-item {\n    width: 100% !important;\n  }\n\n  .Info-list {\n    flex-wrap: wrap !important;\n    flex-direction: column !important;\n  }\n\n  .Info-list .card button {\n    font-size: 13px !important;\n    padding: 11px 15px !important;\n  }\n\n  .Info-list li:last-child {\n    margin-top: 10px;\n  }\n\n  .InfoSections-Wrap {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  /* end */\n  .How-works {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  .How-works .How-works-header h2 {\n    width: 200px !important;\n    font-size: 16px !important;\n    padding-bottom: 10px !important;\n  }\n\n  /*  end */\n  .OurCustomerSay .heading h2 {\n    font-size: 13px !important;\n    padding-bottom: 10px !important;\n    width: 300px !important;\n  }\n\n  .OurCustomerSay {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  /*  end */\n  .OurCustomerSay .Testimonial-slide .swiper-slide p {\n    font-size: 13px !important;\n    line-height: 20px !important;\n  }\n\n  .OurCustomerSay .heading {\n    padding-bottom: 20px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide img {\n    width: 100px !important;\n    height: 100px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\n    padding: 0px 0px !important;\n  }\n\n  /*  end */\n  .subscribe .subscribe__content .subscribe__form input {\n    width: 70% !important;\n  }\n\n  .btn.btn--rounded {\n    padding: 8px 15px !important;\n  }\n\n  .subscribe .subscribe__content h4 {\n    font-size: 14px !important;\n    margin-bottom: 10px !important;\n  }\n\n  /* end */\n  .mobileApp {\n    width: 250px;\n  }\n\n  .site-footer__links ul {\n    margin-bottom: 30px;\n  }\n\n  .site-footer__links ul li {\n    margin-bottom: 15px !important;\n  }\n\n  .mobileApp .appleApp {\n    padding: 15px !important;\n    justify-content: center !important;\n  }\n\n  /* end */\n  /* product market page start*/\n  .product-market-page .product-market-body .product-market-item {\n    flex-basis: calc(50% - 14px) !important;\n    margin: 20px 0 10px 0px !important;\n  }\n\n  .product-market-page .product-market-body .view-pro {\n    padding: 11px 9px !important;\n    left: 11% !important;\n  }\n\n  /* product market page end*/\n  /* Blog page start*/\n  .blog-page .blog-content .blog-item {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  .blog-details-page .blog-sidebar {\n    background: #ffffff;\n    margin-right: 15px !important;\n    width: 100% !important;\n  }\n\n  .blog-details-page {\n    flex-direction: column;\n  }\n\n  .blog-details-page .blog-details-content {\n    width: 100% !important;\n  }\n\n  /* Blog page end*/\n  /* faq page end*/\n  .faq-page .faq-header h2 {\n    font-size: 30px !important;\n    width: 300px !important;\n  }\n\n  .faq-page .faq-header p {\n    font-size: 14px !important;\n    line-height: 22px;\n  }\n\n  /* faq page end*/\n  .producer-page .producer-content .producer-item {\n    flex-basis: calc(100% - 14px) !important;\n  }\n\n  .service-point-page .serch-form button {\n    right: 6% !important;\n  }\n\n  /* faq page end*/\n  /*product market start  */\n  .product-market-banner {\n    margin: 0px !important;\n  }\n\n  /*product market start  */\n  /*payment start  */\n  .payment-body .payment-item {\n    padding: 10px 25px !important;\n  }\n\n  .payment-body .payment-item img {\n    width: 45px !important;\n  }\n\n  .show-content {\n    width: 100% !important;\n  }\n\n  .payment-body .payment-item h2 {\n    font-size: 12px !important;\n  }\n\n  .show-content form h3 {\n    font-size: 16px !important;\n  }\n\n  .show-content form .form-group .form-control {\n    font-size: 13px !important;\n  }\n\n  .show-content form p {\n    font-size: 12px !important;\n  }\n\n  /* payment end  */\n  /* view more page start  */\n  .view-more-pages-banner {\n    height: 65px !important;\n    margin-bottom: 20px;\n  }\n\n  .section-products-featured .section-products-featured__header h3 {\n    font-size: 10px !important;\n  }\n\n  .on-sale-view-more-header {\n    margin-bottom: 20px;\n  }\n\n  .view-more-pages .timer-Wrap li {\n    margin-right: 5px !important;\n    padding: 5px !important;\n    font-size: 13px !important;\n  }\n\n  .view-more-pages .timer-Wrap li:first-child {\n    font-size: 12px !important;\n  }\n\n  .todays-Sale span {\n    padding-left: 5px !important;\n  }\n\n  /* view more page end  */\n}\n/* // Small devices (landscape phones, 576px and up) */\n@media (min-width: 576px) and (max-width: 767.98px) {\n  .logo {\n    max-width: 100px !important;\n  }\n\n  .container {\n    max-width: 600px !important;\n  }\n\n  .header-top {\n    display: none;\n  }\n\n  /* top end */\n  .site-header .new-search-form {\n    width: 330px !important;\n    height: 40px !important;\n    padding: 8px !important;\n    margin-left: 20px !important;\n  }\n\n  .site-header .seach-btn i {\n    font-size: 13px !important;\n  }\n\n  .site-header .seach-btn {\n    padding: 9.5px 17px !important;\n  }\n\n  /* end */\n  .header-bottom {\n    display: none;\n  }\n\n  /* bottom end */\n  .page-intro .Category-card {\n    display: none;\n  }\n\n  .page-intro .swiper-wrapper {\n    margin-left: 0px !important;\n    height: 250px !important;\n  }\n\n  .Cart-popup-outer {\n    display: none !important;\n  }\n\n  .site-nav {\n    display: block !important;\n  }\n\n  .shop-data {\n    justify-content: space-evenly !important;\n    margin-left: 0 !important;\n    margin-bottom: 0px !important;\n  }\n\n  .shop-data li .data-item__content h4 {\n    margin-bottom: 10px !important;\n    font-size: 10px !important;\n  }\n\n  .shop-data li i {\n    height: 45px !important;\n    width: 45px !important;\n    font-size: 16px !important;\n  }\n\n  .shop-data li .data-item__content p {\n    font-size: 11px !important;\n  }\n\n  /* page intro end */\n  .section-products-featured {\n    margin: 0px 0px 20px 0px !important;\n    padding: 30px 20px;\n  }\n\n  /* end  */\n  .products-carousel {\n    padding-top: 20px;\n  }\n\n  .todays-Sale span .timer-Wrap li {\n    margin-right: 6px !important;\n    width: 25px !important;\n    height: 25px !important;\n    line-height: 25px !important;\n    font-size: 14px !important;\n  }\n\n  .btn.btn--rounded {\n    font-size: 10px !important;\n    padding: 8px 12px !important;\n  }\n\n  .section-products-featured .section-products-featured__header h3 {\n    padding-bottom: 13px !important;\n  }\n\n  /* end */\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\n    font-size: 12px !important;\n    padding-top: 15px !important;\n  }\n\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\n    width: 120px !important;\n    height: 120px !important;\n  }\n\n  /* end */\n  .brandslider .brand-list li {\n    flex-basis: calc(33% - 14px) !important;\n  }\n\n  .brandslider {\n    padding-top: 30px;\n  }\n\n  .brand-link h2 {\n    padding: 8px 0px;\n  }\n\n  /* end */\n  .customOrder .customOrder-list {\n    width: 100% !important;\n  }\n\n  .customOrder .customOrder-list .customOrder-itemOne {\n    margin-right: 10px !important;\n  }\n\n  .customOrder .customOrder-list .CO-btn {\n    font-size: 14px !important;\n    padding: 8px 20px !important;\n    margin-top: 20px !important;\n  }\n\n  /* end */\n  .saveTime-Wrap {\n    padding: 0px 0px 20px 0px !important;\n  }\n\n  .saveTime-Wrap .saveTime img {\n    height: 100% !important;\n  }\n\n  /* end */\n  .PromotionBanner {\n    margin-bottom: 20px !important;\n    flex-wrap: wrap !important;\n  }\n\n  .PromotionBanner .PromotionLeft {\n    display: none !important;\n  }\n\n  .PromotionBanner .Promo-Banner-List {\n    grid-template-columns: auto auto !important;\n    padding-bottom: 10px !important;\n  }\n\n  .PromotionBanner img {\n    width: 250px !important;\n  }\n\n  /* end */\n  .Achive-wrap {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  .Achive-wrap .Achive-header {\n    padding-bottom: 30px !important;\n  }\n\n  .Achive-wrap .Achive-header h2 {\n    padding-bottom: 10px !important;\n    font-size: 16px !important;\n    width: 150px !important;\n  }\n\n  .Achive-wrap .Achive-list {\n    flex-wrap: wrap !important;\n    flex-direction: row !important;\n  }\n\n  .Achive-list li {\n    flex-basis: calc(50% - 14px) !important;\n    display: flex !important;\n    justify-content: center !important;\n    flex-direction: column !important;\n    margin: 10px 0 10px 10px !important;\n  }\n\n  /* end */\n  .Info-list {\n    flex-wrap: wrap !important;\n    flex-direction: column !important;\n  }\n\n  .InfoSections-Wrap .InfoSections-header h2 {\n    font-size: 16px !important;\n    padding-bottom: 10px !important;\n  }\n\n  .InfoSections-Wrap .Info-item {\n    width: 100% !important;\n  }\n\n  .InfoSections-Wrap .InfoSections-header {\n    padding-bottom: 30px !important;\n  }\n\n  .InfoSections-Wrap {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  .Info-list li:last-child {\n    margin-top: 20px;\n  }\n\n  .How-works .How-works-header h2 {\n    width: 200px !important;\n    font-size: 16px !important;\n    padding-bottom: 10px !important;\n  }\n\n  .How-works .How-works-body {\n    padding-top: 30px !important;\n  }\n\n  .How-works {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  /* end */\n  .OurCustomerSay .heading h2 {\n    font-size: 16px !important;\n    padding-bottom: 10px !important;\n    width: 350px !important;\n  }\n\n  .OurCustomerSay .heading {\n    padding-bottom: 30px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide img {\n    width: 100px !important;\n    height: 100px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\n    padding: 0px 20px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide p {\n    font-size: 13px !important;\n    line-height: 20px !important;\n  }\n\n  .OurCustomerSay {\n    padding: 20px 10px !important;\n    margin-bottom: 20px !important;\n  }\n\n  .subscribe .subscribe__content .subscribe__form input {\n    width: 70% !important;\n  }\n\n  .btn.btn--rounded {\n    padding: 10px 20px !important;\n  }\n\n  .btn.btn--rounded:hover {\n    border: none !important;\n  }\n\n  .subscribe .subscribe__content h4 {\n    font-size: 14px !important;\n  }\n\n  /* end */\n  .mobileApp {\n    width: 250px;\n  }\n\n  .site-footer__links ul {\n    margin-bottom: 30px;\n  }\n\n  .site-footer__links ul li {\n    margin-bottom: 15px !important;\n  }\n\n  .mobileApp .appleApp {\n    padding: 15px !important;\n    justify-content: center !important;\n  }\n\n  /* end */\n  /* product market page start*/\n  .product-market-page .product-market-body .product-market-item {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  /* product market page end*/\n  /* Blog page start*/\n  .blog-page .blog-content .blog-item {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  .blog-details-page .blog-sidebar {\n    background: #ffffff;\n    margin-right: 15px !important;\n    width: 100% !important;\n  }\n\n  .blog-details-page {\n    flex-direction: column;\n  }\n\n  .blog-details-page .blog-details-content {\n    width: 100% !important;\n  }\n\n  /* Blog page end*/\n  /* producer page start*/\n  .producer-page .producer-content .producer-item {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  .service-point-page .serch-form button {\n    right: 20% !important;\n  }\n\n  /* producer page end*/\n  /*product market start  */\n  .product-market-banner {\n    margin: 0px !important;\n  }\n\n  /*product market start  */\n  /*payment start  */\n  .payment-body .payment-item {\n    padding: 15px 35px !important;\n  }\n\n  .payment-body .payment-item img {\n    width: 50px !important;\n  }\n\n  .show-content {\n    width: 100% !important;\n  }\n\n  .show-content form h3 {\n    font-size: 18px !important;\n  }\n\n  .show-content form .form-group .form-control {\n    font-size: 14px !important;\n  }\n\n  /* payment end  */\n  /* view more page start  */\n  .view-more-pages-banner {\n    height: 65px !important;\n    margin-bottom: 20px;\n  }\n\n  .section-products-featured .section-products-featured__header h3 {\n    font-size: 14px !important;\n  }\n\n  .on-sale-view-more-header {\n    margin-bottom: 20px;\n  }\n\n  .view-more-pages .timer-Wrap li {\n    margin-right: 5px !important;\n    padding: 5px !important;\n  }\n\n  /* view more page end  */\n}\n/* // Medium devices (tablets, 768px and up) */\n@media (min-width: 768px) and (max-width: 991.98px) {\n  .logo {\n    max-width: 130px !important;\n  }\n\n  .container {\n    max-width: 745px !important;\n  }\n\n  .site-header .new-search-form {\n    width: 460px !important;\n  }\n\n  .site-nav {\n    display: block !important;\n  }\n\n  /* top header */\n  .header-top {\n    display: none !important;\n  }\n\n  .cart-btn-hv:hover .Cart-popup-outer {\n    display: none !important;\n  }\n\n  /* top header end */\n  /* bottom, header */\n  .header-bottom,\n.Category-card {\n    display: none !important;\n  }\n\n  .page-intro .swiper-wrapper {\n    margin-left: 0px !important;\n    height: 280px !important;\n  }\n\n  .shop-data {\n    margin-left: 0 !important;\n    margin-bottom: 30px !important;\n  }\n\n  .shop-data li .data-item__content h4 {\n    font-size: 13px !important;\n    margin-bottom: 6px !important;\n  }\n\n  /* bottom header end */\n  .btn.btn--rounded {\n    font-size: 12px !important;\n    padding: 8px 12px !important;\n  }\n\n  /* product */\n  .product-item .product__description h3 {\n    font-size: 14px !important;\n  }\n\n  .product-item .product__description .product__price h4 {\n    font-size: 15px !important;\n  }\n\n  .product-item .product__description .product__price span {\n    font-size: 16px !important;\n    margin-left: 10px !important;\n  }\n\n  .product-item .product__description .btn-hm-add {\n    padding: 6px 12px !important;\n    font-size: 13px !important;\n  }\n\n  /* end */\n  .section-products-featured .section-products-featured__header h3 {\n    font-size: 16px !important;\n    padding-bottom: 20px !important;\n  }\n\n  .section-products-featured .section-products-featured__header {\n    margin-bottom: 30px !important;\n  }\n\n  .todays-Sale span .timer-Wrap li {\n    margin-right: 8px !important;\n    width: 25px !important;\n    height: 25px !important;\n    line-height: 25px !important;\n    font-size: 16px !important;\n  }\n\n  /* cate */\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\n    font-size: 14px !important;\n  }\n\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\n    width: 150px !important;\n    height: 150px !important;\n  }\n\n  .brandslider .brand-list li {\n    flex-basis: calc(25% - 14px) !important;\n  }\n\n  .brand-link h2 {\n    padding: 10px 0px !important;\n  }\n\n  /* cate end*/\n  /* product end */\n  .customOrder .customOrder-list {\n    width: 100% !important;\n  }\n\n  .customOrder .customOrder-list .customOrder-itemOne {\n    margin-right: 12px !important;\n  }\n\n  .customOrder .customOrder-list .CO-btn {\n    background: #c53030;\n    font-size: 14px !important;\n    padding: 8px 20px !important;\n    margin-top: 20px !important;\n  }\n\n  /* custom order */\n  .PromotionBanner {\n    flex-wrap: wrap;\n  }\n\n  .PromotionBanner .Promo-Banner-List {\n    grid-template-columns: auto auto !important;\n  }\n\n  .PromotionBanner img {\n    width: 100% !important;\n  }\n\n  .PromotionBanner .PromotionLeft img {\n    height: 100% !important;\n  }\n\n  .PromotionBanner .PromotionLeft {\n    display: none !important;\n  }\n\n  .PromotionRight {\n    padding-top: 10px !important;\n  }\n\n  /* banner end */\n  .Achive-wrap {\n    padding: 20px 10px !important;\n    margin-bottom: 30px !important;\n  }\n\n  .Achive-wrap .Achive-header h2 {\n    font-size: 16px !important;\n  }\n\n  .Achive-wrap .Achive-header {\n    padding-bottom: 30px !important;\n  }\n\n  .Achive-wrap .Achive-list {\n    flex-wrap: wrap !important;\n    flex-direction: row !important;\n  }\n\n  .Achive-list li {\n    flex-basis: calc(33% - 14px) !important;\n    display: flex !important;\n    justify-content: center !important;\n    flex-direction: column !important;\n    margin: 10px 0 10px 10px !important;\n  }\n\n  /* achive edn */\n  .InfoSections-Wrap {\n    padding: 20px 10px !important;\n    margin-bottom: 30px !important;\n  }\n\n  .InfoSections-Wrap .InfoSections-header h2 {\n    font-size: 16px !important;\n    padding-bottom: 15px !important;\n  }\n\n  .InfoSections-Wrap .InfoSections-header {\n    padding-bottom: 30px !important;\n  }\n\n  .Info-list .card button {\n    font-size: 12px !important;\n    padding: 8px 10px !important;\n  }\n\n  .InfoSections-Wrap .Info-item img {\n    height: 315px !important;\n  }\n\n  /* trust end */\n  .How-works .How-works-header h2 {\n    width: 150px !important;\n    font-size: 16px !important;\n  }\n\n  /* work end */\n  .OurCustomerSay .heading h2 {\n    font-size: 16px !important;\n    width: 350px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide img {\n    width: 120px !important;\n    height: 120px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide p {\n    font-size: 13px !important;\n    line-height: 20px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\n    width: 100% !important;\n    padding: 0px 20px !important;\n    margin-right: 0 !important;\n  }\n\n  /* what say end */\n  .site-footer .site-footer__links {\n    flex-wrap: wrap !important;\n    justify-content: space-between !important;\n  }\n\n  .site-footer .site-footer__links ul li:first-child {\n    margin-bottom: 20px !important;\n  }\n\n  .site-footer .site-footer__links ul:last-child {\n    margin-top: 40px;\n  }\n\n  .site-footer .site-footer__links ul .f-heading {\n    font-size: 14px !important;\n  }\n\n  .site-footer .site-footer__links ul li a {\n    font-size: 13px !important;\n    margin-bottom: 6px !important;\n  }\n\n  .site-footer .site-footer__bottom {\n    padding: 15px 0 !important;\n  }\n\n  .mobileApp .appleApp .appleInfo p {\n    font-size: 13px !important;\n  }\n\n  .mobileApp .appleApp .appleInfo h4 {\n    font-size: 14px !important;\n  }\n\n  /* footer end*/\n  /* product market page start*/\n  .product-market-page .product-market-body .product-market-item {\n    flex-basis: calc(33% - 14px) !important;\n  }\n\n  /* product market page end*/\n  /* Blog page start*/\n  .blog-page .blog-content .blog-item {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  .blog-details-page .blog-sidebar {\n    background: #ffffff;\n    margin-right: 15px !important;\n    width: 40% !important;\n  }\n\n  .blog-details-page .blog-sidebar .tags .tags-list {\n    grid-template-columns: auto !important;\n  }\n\n  .service-point-page .serch-form button {\n    right: 26% !important;\n  }\n\n  /* Blog page end*/\n  /*product market start  */\n  .product-market-banner {\n    margin: 0px !important;\n  }\n\n  /*product market end  */\n  /*payment start  */\n  .payment-body .payment-item {\n    padding: 20px 50px !important;\n  }\n\n  .payment-body .payment-item img {\n    width: 70px !important;\n  }\n\n  /* payment end  */\n}\n/* // Large devices (desktops, 992px and up) */\n@media (min-width: 992px) and (max-width: 1199.98px) {\n  .logo {\n    max-width: 170px !important;\n  }\n\n  .site-header .new-search-form {\n    width: 550px !important;\n  }\n\n  .header-top .nav-list .nav-item {\n    padding-right: 0 !important;\n  }\n\n  .header-top .nav-list .nav-item .nav-link {\n    font-size: 12px !important;\n  }\n\n  .header-top .nav-list .nav-item .nav-link svg {\n    width: 15px !important;\n    height: 15px !important;\n  }\n\n  .header-top .f-right .nav-item {\n    padding-left: 10px !important;\n    padding-right: 0;\n  }\n\n  .header-top .f-right .nav-item .nav-link {\n    font-size: 12px !important;\n  }\n\n  /* slider */\n  .page-intro {\n    justify-content: space-between !important;\n  }\n\n  .page-intro .swiper-wrapper {\n    height: 302px !important;\n    width: 100% !important;\n    margin-left: -5px !important;\n  }\n\n  .swiper-slide {\n    width: 100% !important;\n  }\n\n  .page-intro .Category-card {\n    width: 245px !important;\n    left: 37px !important;\n    margin-left: 12px !important;\n  }\n\n  .cat-item .cat-link {\n    font-size: 13px !important;\n  }\n\n  .header-bottom .nav-list .cat {\n    font-size: 14px !important;\n  }\n\n  .header-bottom .nav-list .bar {\n    font-size: 24px !important;\n  }\n\n  .header-bottom .f-right {\n    padding-left: 0px !important;\n  }\n\n  .header-bottom .f-right .nav-item {\n    padding-left: 10px !important;\n  }\n\n  .header-bottom .f-right .nav-item .nav-link {\n    font-size: 11px !important;\n  }\n\n  .shop-data {\n    margin-top: 6px !important;\n    margin-bottom: 40px !important;\n  }\n\n  /* end */\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\n    width: 125px !important;\n    height: 125px !important;\n  }\n\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\n    font-size: 13px !important;\n    padding-top: 15px !important;\n  }\n\n  .container {\n    max-width: 1130px !important;\n  }\n\n  .data-item__content > h4 {\n    font-size: 12px;\n  }\n\n  .data-item__content > p {\n    font-size: 10px;\n  }\n\n  .site-header__btn-menu {\n    display: none !important;\n  }\n\n  .site-header__btn-avatar {\n    display: block !important;\n  }\n\n  /* custom order */\n  .customOrder .customOrder-list {\n    width: 100% !important;\n  }\n\n  /* custom order end*/\n  .Promo-Banner-Item {\n    width: 300px !important;\n  }\n\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\n    padding: 0px 50px !important;\n  }\n\n  /* Banner end */\n  .Achive-wrap .Achive-list li p svg {\n    width: 40px !important;\n    height: 40px !important;\n  }\n\n  .Achive-wrap .Achive-list li span {\n    font-size: 22px !important;\n  }\n\n  .Achive-wrap .Achive-list li h3 {\n    font-size: 12px !important;\n    padding-top: 10px !important;\n  }\n\n  .Achive-wrap .Achive-list li p i {\n    font-size: 41px !important;\n  }\n\n  .Info-list .card button {\n    font-size: 12px !important;\n    padding: 12px 10px !important;\n  }\n\n  .InfoSections-Wrap .Info-item img {\n    height: 298px !important;\n  }\n\n  /* achive end */\n  .site-footer {\n    padding-top: 60px !important;\n  }\n\n  .site-footer .site-footer__links ul {\n    margin-right: 85px !important;\n  }\n\n  /* footer end */\n  /* product market-page start*/\n  .product-market-page .product-market-body .product-market-item {\n    flex-basis: calc(25% - 14px) !important;\n  }\n\n  /* product market-page end*/\n  .blog-page .blog-content .blog-item {\n    flex-basis: calc(50% - 14px) !important;\n  }\n\n  .blog-details-page .blog-sidebar {\n    background: #ffffff;\n    margin-right: 15px !important;\n    width: 30% !important;\n  }\n\n  .service-point-page .serch-form button {\n    right: 32% !important;\n  }\n\n  /*product market start  */\n  .product-market-banner {\n    margin: 0px !important;\n  }\n\n  /*product market start  */\n}\n/* // Extra large devices (large desktops, 1200px and up) */", "",{"version":3,"sources":["webpack://responsive.css"],"names":[],"mappings":"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","sourcesContent":["/* // Extra small devices (portrait phones, less than 576px) */\r\n@media (max-width: 419.98px) {\r\n  /* header */\r\n  .logo {\r\n    max-width: 70px !important;\r\n  }\r\n  .container {\r\n    max-width: 420px !important;\r\n  }\r\n  .header-top,\r\n  .header-bottom,\r\n  .Category-card,\r\n  .Cart-popup-outer,\r\n  .cart-btn-hv,\r\n  .ckSection {\r\n    display: none !important;\r\n  }\r\n  .page-intro .swiper-wrapper {\r\n    height: 200px !important;\r\n    margin-left: 0px !important;\r\n  }\r\n  .site-header .new-search-form {\r\n    width: 100% !important;\r\n    height: 40px !important;\r\n    padding: 7px !important;\r\n    margin-left: 5px !important;\r\n  }\r\n  .swiper-slide {\r\n    background-size: cover !important;\r\n  }\r\n  .site-header .new-search-form input {\r\n    font-size: 12px !important;\r\n  }\r\n  .site-header .seach-btn {\r\n    padding: 9.5px 17px !important;\r\n    right: -5px !important;\r\n  }\r\n  .site-header .seach-btn i {\r\n    font-size: 13px !important;\r\n  }\r\n  .site-nav {\r\n    display: block !important;\r\n  }\r\n  .shop-data li i {\r\n    height: 45px !important;\r\n    width: 45px !important;\r\n    font-size: 16px !important;\r\n  }\r\n  .shop-data {\r\n    justify-content: space-evenly !important;\r\n    margin-left: 0 !important;\r\n    margin-bottom: 0px !important;\r\n  }\r\n  .shop-data li .data-item__content h4 {\r\n    margin-bottom: 10px !important;\r\n    font-size: 10px !important;\r\n  }\r\n  .shop-data li .data-item__content p {\r\n    font-size: 11px !important;\r\n  }\r\n  /* header  end*/\r\n  .section-products-featured {\r\n    margin: 20px 0px !important;\r\n    padding: 20px 10px !important;\r\n  }\r\n  .section-products-featured .section-products-featured__header {\r\n    margin-bottom: 20px;\r\n  }\r\n  .section-products-featured .section-products-featured__header h3 {\r\n    padding-bottom: 9px !important;\r\n    font-size: 13px !important;\r\n  }\r\n  .todays-Sale span .timer-Wrap li {\r\n    margin-right: 6px !important;\r\n    width: 20px !important;\r\n    height: 20px !important;\r\n    line-height: 20px !important;\r\n    font-size: 12px !important;\r\n  }\r\n  .btn.btn--rounded {\r\n    font-size: 9px !important;\r\n    padding: 8px 14px !important;\r\n  }\r\n  .product-item .product__image img {\r\n    height: 130px !important;\r\n  }\r\n  .product-item .product__image {\r\n    height: 130px !important;\r\n    margin-bottom: 0px !important;\r\n  }\r\n  .product-item .product__description .btn-hm-add {\r\n    padding: 6px 10px !important;\r\n    font-size: 11px !important;\r\n  }\r\n  .product-item .product__description .product__price h4 {\r\n    font-size: 13px !important;\r\n  }\r\n  .product-item .product__description .product__price span {\r\n    margin-left: 12px !important;\r\n    font-size: 14px !important;\r\n  }\r\n  /* Product  end*/\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\r\n    width: 100px !important;\r\n    height: 100px !important;\r\n  }\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\r\n    font-size: 10px !important;\r\n    padding-top: 12px !important;\r\n  }\r\n  .cat-grid-wrap .cat-grid-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  /* cat end */\r\n  .brandslider .brand-list li {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  .brand-link h2 {\r\n    padding: 10px 0px !important;\r\n    font-size: 13px !important;\r\n  }\r\n  .customOrder .customOrder-list .customOrder-itemOne,\r\n  .customOrder .customOrder-list .customOrder-itemTwo {\r\n    width: 100% !important;\r\n  }\r\n  /* brand end */\r\n  .customOrder {\r\n    margin: 20px 0px !important;\r\n    padding: 20px 10px !important;\r\n  }\r\n  .customOrder .heading h2 {\r\n    font-size: 13px !important;\r\n    padding-bottom: 10px !important;\r\n    width: 200px !important;\r\n  }\r\n  .saveTime-Wrap {\r\n    padding: 0px 0px 20px 0px !important;\r\n  }\r\n  /*  end */\r\n  .customOrder .customOrder-list {\r\n    width: 100% !important;\r\n  }\r\n  .customOrder .customOrder-list .customOrder-itemOne {\r\n    margin-right: 7px !important;\r\n  }\r\n  .customOrder .customOrder-list .CO-btn {\r\n    font-size: 14px !important;\r\n    padding: 8px 20px !important;\r\n    margin-top: 20px !important;\r\n  }\r\n  .saveTime-Wrap .saveTime img {\r\n    height: 100% !important;\r\n  }\r\n  .PromotionBanner {\r\n    margin-bottom: 20px !important;\r\n    flex-wrap: wrap !important;\r\n  }\r\n  .PromotionBanner .Promo-Banner-List {\r\n    grid-template-columns: auto !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  .PromotionBanner .PromotionLeft {\r\n    display: none !important;\r\n  }\r\n  .PromotionBanner img {\r\n    width: 188px !important;\r\n  }\r\n  /*  end */\r\n  .Achive-wrap .Achive-header {\r\n    padding-bottom: 20px !important;\r\n  }\r\n  .Achive-wrap .Achive-header h2 {\r\n    padding-bottom: 10px !important;\r\n    font-size: 13px !important;\r\n    width: 150px !important;\r\n  }\r\n  .Achive-wrap .Achive-list {\r\n    flex-wrap: wrap !important;\r\n    flex-direction: row !important;\r\n  }\r\n  .Achive-list li {\r\n    flex-basis: calc(50% - 14px) !important;\r\n    display: flex !important;\r\n    justify-content: center !important;\r\n    flex-direction: column !important;\r\n    margin: 10px 0 10px 10px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li p svg {\r\n    width: 30px !important;\r\n    height: 30px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li span {\r\n    font-size: 18px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li h3 {\r\n    font-size: 14px !important;\r\n    padding-top: 10px !important;\r\n  }\r\n  .Achive-wrap {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li p i {\r\n    font-size: 28px !important;\r\n  }\r\n  /*  end */\r\n  .InfoSections-Wrap .InfoSections-header h2 {\r\n    font-size: 13px !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  .InfoSections-Wrap .InfoSections-header {\r\n    padding-bottom: 30px !important;\r\n  }\r\n  .InfoSections-Wrap .Info-item {\r\n    width: 100% !important;\r\n  }\r\n  .Info-list {\r\n    flex-wrap: wrap !important;\r\n    flex-direction: column !important;\r\n  }\r\n  .Info-list .card button {\r\n    font-size: 13px !important;\r\n    padding: 11px 15px !important;\r\n  }\r\n  .Info-list li:last-child {\r\n    margin-top: 10px;\r\n  }\r\n  .InfoSections-Wrap {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  /* end */\r\n  .How-works {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  .How-works .How-works-header h2 {\r\n    width: 200px !important;\r\n    font-size: 16px !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  /*  end */\r\n  .OurCustomerSay .heading h2 {\r\n    font-size: 13px !important;\r\n    padding-bottom: 10px !important;\r\n    width: 300px !important;\r\n  }\r\n  .OurCustomerSay {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  /*  end */\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide p {\r\n    font-size: 13px !important;\r\n    line-height: 20px !important;\r\n  }\r\n  .OurCustomerSay .heading {\r\n    padding-bottom: 20px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide img {\r\n    width: 100px !important;\r\n    height: 100px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\r\n    padding: 0px 0px !important;\r\n  }\r\n\r\n  /*  end */\r\n  .subscribe .subscribe__content .subscribe__form input {\r\n    width: 70% !important;\r\n  }\r\n  .btn.btn--rounded {\r\n    padding: 8px 15px !important;\r\n  }\r\n  .subscribe .subscribe__content h4 {\r\n    font-size: 14px !important;\r\n    margin-bottom: 10px !important;\r\n  }\r\n\r\n  /* end */\r\n  .mobileApp {\r\n    width: 250px;\r\n  }\r\n  .site-footer__links ul {\r\n    margin-bottom: 30px;\r\n  }\r\n  .site-footer__links ul li {\r\n    margin-bottom: 15px !important;\r\n  }\r\n  .mobileApp .appleApp {\r\n    padding: 15px !important;\r\n    justify-content: center !important;\r\n  }\r\n  /* end */\r\n  /* product market page start*/\r\n  .product-market-page .product-market-body .product-market-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n    margin: 20px 0 10px 0px !important;\r\n  }\r\n  .product-market-page .product-market-body .view-pro {\r\n    padding: 11px 9px !important;\r\n    left: 11% !important;\r\n  }\r\n  /* product market page end*/\r\n  /* Blog page start*/\r\n  .blog-page .blog-content .blog-item {\r\n    flex-basis: calc(100% - 14px) !important;\r\n  }\r\n  .blog-details-page .blog-sidebar {\r\n    background: #ffffff;\r\n    margin-right: 15px !important;\r\n    width: 100% !important;\r\n  }\r\n  .blog-details-page {\r\n    flex-direction: column;\r\n  }\r\n  .blog-details-page .blog-details-content {\r\n    width: 100% !important;\r\n  }\r\n  /* Blog page end*/\r\n  /* faq page end*/\r\n  .faq-page .faq-header h2 {\r\n    font-size: 30px !important;\r\n    width: 300px !important;\r\n  }\r\n  .faq-page .faq-header p {\r\n    font-size: 14px !important;\r\n    line-height: 22px;\r\n  }\r\n  /* faq page end*/\r\n  .producer-page .producer-content .producer-item {\r\n    flex-basis: calc(100% - 14px) !important;\r\n  }\r\n  .service-point-page .serch-form button {\r\n    right: 6% !important;\r\n  }\r\n  /* faq page end*/\r\n    /*product market start  */\r\n    .product-market-banner {\r\n        margin: 0px !important;\r\n    }\r\n/*product market start  */\r\n  /*payment start  */\r\n  .payment-body .payment-item {\r\n\tpadding: 10px 25px !important;\r\n   }\r\n   .payment-body .payment-item img {\r\n\twidth: 45px !important;\r\n    }\r\n    .show-content {\r\n        width: 100% !important;\r\n    }\r\n    .payment-body .payment-item h2 {\r\n        font-size: 12px !important;\r\n    }\r\n    .show-content form h3 {\r\n        font-size: 16px !important;\r\n    }\r\n    .show-content form .form-group .form-control {\r\n        font-size: 13px !important;\r\n    }\r\n    .show-content form p {\r\n        font-size: 12px !important;\r\n    }\r\n  /* payment end  */\r\n      /* view more page start  */\r\n      .view-more-pages-banner {\r\n        height: 30px !important;\r\n        margin-bottom: 20px;\r\n      }\r\n      .section-products-featured .section-products-featured__header h3 {\r\n        font-size: 10px !important;\r\n      }\r\n      .on-sale-view-more-header{\r\n        margin-bottom: 20px;\r\n        flex-direction: column;\r\n      }\r\n      .view-more-pages .timer-Wrap li {\r\n        margin-right: 5px !important;\r\n        padding: 5px !important;\r\n        font-size: 13px !important;\r\n      }\r\n      .view-more-pages .timer-Wrap li:first-child {\r\n        font-size: 12px !important;\r\n      }\r\n      .todays-Sale span {\r\n        padding-left: 5px !important;\r\n      }\r\n      .view-more-pages .timer-Wrap {\r\n        margin-top: 10px;\r\n      }\r\n      .view-details {\r\n        top: 23% !important;\r\n        right: 18% !important;;\r\n        padding: 6px !important;;\r\n        font-size: 12px !important;;\r\n    \r\n      }\r\n      /* view more page end  */\r\n}\r\n@media (min-width: 420px) and (max-width: 575.98px) {\r\n  /* header */\r\n  .logo {\r\n    max-width: 90px !important;\r\n  }\r\n  .container {\r\n    max-width: 420px !important;\r\n  }\r\n  .header-top,\r\n  .header-bottom,\r\n  .Category-card,\r\n  .Cart-popup-outer,\r\n  .cart-btn-hv,\r\n  .ckSection {\r\n    display: none !important;\r\n  }\r\n  .page-intro .swiper-wrapper {\r\n    height: 200px !important;\r\n    margin-left: 0px !important;\r\n  }\r\n  .site-header .new-search-form {\r\n    width: 224px !important;\r\n    height: 40px !important;\r\n    padding: 7px !important;\r\n    margin-left: 15px !important;\r\n  }\r\n  .swiper-slide {\r\n    background-size: cover !important;\r\n  }\r\n  .site-header .new-search-form input {\r\n    font-size: 12px !important;\r\n  }\r\n  .site-header .seach-btn {\r\n    padding: 9.5px 17px !important;\r\n  }\r\n  .site-header .seach-btn i {\r\n    font-size: 13px !important;\r\n  }\r\n  .site-nav {\r\n    display: block !important;\r\n  }\r\n  .shop-data li i {\r\n    height: 45px !important;\r\n    width: 45px !important;\r\n    font-size: 16px !important;\r\n  }\r\n  .shop-data {\r\n    justify-content: space-evenly !important;\r\n    margin-left: 0 !important;\r\n    margin-bottom: 0px !important;\r\n  }\r\n  .shop-data li .data-item__content h4 {\r\n    margin-bottom: 10px !important;\r\n    font-size: 10px !important;\r\n  }\r\n  .shop-data li .data-item__content p {\r\n    font-size: 11px !important;\r\n  }\r\n  /* header  end*/\r\n  .section-products-featured {\r\n    margin: 20px 0px !important;\r\n    padding: 20px 10px !important;\r\n  }\r\n  .section-products-featured .section-products-featured__header {\r\n    margin-bottom: 20px;\r\n  }\r\n  .section-products-featured .section-products-featured__header h3 {\r\n    padding-bottom: 9px !important;\r\n    font-size: 13px !important;\r\n  }\r\n  .todays-Sale span .timer-Wrap li {\r\n    margin-right: 6px !important;\r\n    width: 20px !important;\r\n    height: 20px !important;\r\n    line-height: 20px !important;\r\n    font-size: 12px !important;\r\n  }\r\n  .btn.btn--rounded {\r\n    font-size: 9px !important;\r\n    padding: 8px 14px !important;\r\n  }\r\n  .product-item .product__image img {\r\n    height: 130px !important;\r\n  }\r\n  .product-item .product__image {\r\n    height: 130px !important;\r\n    margin-bottom: 0px !important;\r\n  }\r\n  .product-item .product__description .btn-hm-add {\r\n    padding: 6px 10px !important;\r\n    font-size: 11px !important;\r\n  }\r\n  .product-item .product__description .product__price h4 {\r\n    font-size: 13px !important;\r\n  }\r\n  .product-item .product__description .product__price span {\r\n    margin-left: 12px !important;\r\n    font-size: 14px !important;\r\n  }\r\n  /* Product  end*/\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\r\n    width: 100px !important;\r\n    height: 100px !important;\r\n  }\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\r\n    font-size: 10px !important;\r\n    padding-top: 12px !important;\r\n  }\r\n  .cat-grid-wrap .cat-grid-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  /* cat end */\r\n  .brandslider .brand-list li {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  .brand-link h2 {\r\n    padding: 10px 0px !important;\r\n    font-size: 13px !important;\r\n  }\r\n  /* brand end */\r\n  .customOrder {\r\n    margin: 20px 0px !important;\r\n    padding: 20px 10px !important;\r\n  }\r\n  .customOrder .heading h2 {\r\n    font-size: 13px !important;\r\n    padding-bottom: 10px !important;\r\n    width: 200px !important;\r\n  }\r\n  .saveTime-Wrap {\r\n    padding: 0px 0px 20px 0px !important;\r\n  }\r\n  /*  end */\r\n  .customOrder .customOrder-list {\r\n    width: 100% !important;\r\n  }\r\n  .customOrder .customOrder-list .customOrder-itemOne {\r\n    margin-right: 7px !important;\r\n  }\r\n  .customOrder .customOrder-list .CO-btn {\r\n    font-size: 14px !important;\r\n    padding: 8px 20px !important;\r\n    margin-top: 20px !important;\r\n  }\r\n  .saveTime-Wrap .saveTime img {\r\n    height: 100% !important;\r\n  }\r\n  .PromotionBanner {\r\n    margin-bottom: 20px !important;\r\n    flex-wrap: wrap !important;\r\n  }\r\n  .PromotionBanner .Promo-Banner-List {\r\n    grid-template-columns: auto auto !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  .PromotionBanner .PromotionLeft {\r\n    display: none !important;\r\n  }\r\n  .PromotionBanner img {\r\n    width: 188px !important;\r\n  }\r\n  /*  end */\r\n  .Achive-wrap .Achive-header {\r\n    padding-bottom: 20px !important;\r\n  }\r\n  .Achive-wrap .Achive-header h2 {\r\n    padding-bottom: 10px !important;\r\n    font-size: 13px !important;\r\n    width: 150px !important;\r\n  }\r\n  .Achive-wrap .Achive-list {\r\n    flex-wrap: wrap !important;\r\n    flex-direction: row !important;\r\n  }\r\n  .Achive-list li {\r\n    flex-basis: calc(50% - 14px) !important;\r\n    display: flex !important;\r\n    justify-content: center !important;\r\n    flex-direction: column !important;\r\n    margin: 10px 0 10px 10px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li p svg {\r\n    width: 30px !important;\r\n    height: 30px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li span {\r\n    font-size: 18px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li h3 {\r\n    font-size: 14px !important;\r\n    padding-top: 10px !important;\r\n  }\r\n  .Achive-wrap {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li p i {\r\n    font-size: 28px !important;\r\n  }\r\n  /*  end */\r\n  .InfoSections-Wrap .InfoSections-header h2 {\r\n    font-size: 13px !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  .InfoSections-Wrap .InfoSections-header {\r\n    padding-bottom: 30px !important;\r\n  }\r\n  .InfoSections-Wrap .Info-item {\r\n    width: 100% !important;\r\n  }\r\n  .Info-list {\r\n    flex-wrap: wrap !important;\r\n    flex-direction: column !important;\r\n  }\r\n  .Info-list .card button {\r\n    font-size: 13px !important;\r\n    padding: 11px 15px !important;\r\n  }\r\n  .Info-list li:last-child {\r\n    margin-top: 10px;\r\n  }\r\n  .InfoSections-Wrap {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  /* end */\r\n  .How-works {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  .How-works .How-works-header h2 {\r\n    width: 200px !important;\r\n    font-size: 16px !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  /*  end */\r\n  .OurCustomerSay .heading h2 {\r\n    font-size: 13px !important;\r\n    padding-bottom: 10px !important;\r\n    width: 300px !important;\r\n  }\r\n  .OurCustomerSay {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  /*  end */\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide p {\r\n    font-size: 13px !important;\r\n    line-height: 20px !important;\r\n  }\r\n  .OurCustomerSay .heading {\r\n    padding-bottom: 20px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide img {\r\n    width: 100px !important;\r\n    height: 100px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\r\n    padding: 0px 0px !important;\r\n  }\r\n\r\n  /*  end */\r\n  .subscribe .subscribe__content .subscribe__form input {\r\n    width: 70% !important;\r\n  }\r\n  .btn.btn--rounded {\r\n    padding: 8px 15px !important;\r\n  }\r\n  .subscribe .subscribe__content h4 {\r\n    font-size: 14px !important;\r\n    margin-bottom: 10px !important;\r\n  }\r\n\r\n  /* end */\r\n  .mobileApp {\r\n    width: 250px;\r\n  }\r\n  .site-footer__links ul {\r\n    margin-bottom: 30px;\r\n  }\r\n  .site-footer__links ul li {\r\n    margin-bottom: 15px !important;\r\n  }\r\n  .mobileApp .appleApp {\r\n    padding: 15px !important;\r\n    justify-content: center !important;\r\n  }\r\n  /* end */\r\n  /* product market page start*/\r\n  .product-market-page .product-market-body .product-market-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n    margin: 20px 0 10px 0px !important;\r\n  }\r\n  .product-market-page .product-market-body .view-pro {\r\n    padding: 11px 9px !important;\r\n    left: 11% !important;\r\n  }\r\n  /* product market page end*/\r\n  /* Blog page start*/\r\n  .blog-page .blog-content .blog-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  .blog-details-page .blog-sidebar {\r\n    background: #ffffff;\r\n    margin-right: 15px !important;\r\n    width: 100% !important;\r\n  }\r\n  .blog-details-page {\r\n    flex-direction: column;\r\n  }\r\n  .blog-details-page .blog-details-content {\r\n    width: 100% !important;\r\n  }\r\n  /* Blog page end*/\r\n  /* faq page end*/\r\n  .faq-page .faq-header h2 {\r\n    font-size: 30px !important;\r\n    width: 300px !important;\r\n  }\r\n  .faq-page .faq-header p {\r\n    font-size: 14px !important;\r\n    line-height: 22px;\r\n  }\r\n  /* faq page end*/\r\n  .producer-page .producer-content .producer-item {\r\n    flex-basis: calc(100% - 14px) !important;\r\n  }\r\n  .service-point-page .serch-form button {\r\n    right: 6% !important;\r\n  }\r\n  /* faq page end*/\r\n    /*product market start  */\r\n    .product-market-banner {\r\n        margin: 0px !important;\r\n    }\r\n/*product market start  */\r\n  /*payment start  */\r\n  .payment-body .payment-item {\r\n\tpadding: 10px 25px !important;\r\n   }\r\n   .payment-body .payment-item img {\r\n\twidth: 45px !important;\r\n    }\r\n    .show-content {\r\n        width: 100% !important;\r\n    }\r\n    .payment-body .payment-item h2 {\r\n        font-size: 12px !important;\r\n    }\r\n    .show-content form h3 {\r\n        font-size: 16px !important;\r\n    }\r\n    .show-content form .form-group .form-control {\r\n        font-size: 13px !important;\r\n    }\r\n    .show-content form p {\r\n        font-size: 12px !important;\r\n    }\r\n  /* payment end  */\r\n    /* view more page start  */\r\n    .view-more-pages-banner {\r\n      height: 65px !important;\r\n      margin-bottom: 20px;\r\n    }\r\n    .section-products-featured .section-products-featured__header h3 {\r\n      font-size: 10px !important;\r\n    }\r\n    .on-sale-view-more-header{\r\n      margin-bottom: 20px;\r\n    }\r\n    .view-more-pages .timer-Wrap li {\r\n      margin-right: 5px !important;\r\n      padding: 5px !important;\r\n      font-size: 13px !important;\r\n    }\r\n    .view-more-pages .timer-Wrap li:first-child {\r\n      font-size: 12px !important;\r\n    }\r\n    .todays-Sale span {\r\n      padding-left: 5px !important;\r\n    }\r\n    /* view more page end  */\r\n}\r\n\r\n/* // Small devices (landscape phones, 576px and up) */\r\n@media (min-width: 576px) and (max-width: 767.98px) {\r\n  .logo {\r\n    max-width: 100px !important;\r\n  }\r\n  .container {\r\n    max-width: 600px !important;\r\n  }\r\n  .header-top {\r\n    display: none;\r\n  }\r\n  /* top end */\r\n  .site-header .new-search-form {\r\n    width: 330px !important;\r\n    height: 40px !important;\r\n    padding: 8px !important;\r\n    margin-left: 20px !important;\r\n  }\r\n  .site-header .seach-btn i {\r\n    font-size: 13px !important;\r\n  }\r\n  .site-header .seach-btn {\r\n    padding: 9.5px 17px !important;\r\n  }\r\n  /* end */\r\n  .header-bottom {\r\n    display: none;\r\n  }\r\n  /* bottom end */\r\n  .page-intro .Category-card {\r\n    display: none;\r\n  }\r\n  .page-intro .swiper-wrapper {\r\n    margin-left: 0px !important;\r\n    height: 250px !important;\r\n  }\r\n  .Cart-popup-outer {\r\n    display: none !important;\r\n  }\r\n  .site-nav {\r\n    display: block !important;\r\n  }\r\n  .shop-data {\r\n    justify-content: space-evenly !important;\r\n    margin-left: 0 !important;\r\n    margin-bottom: 0px !important;\r\n  }\r\n  .shop-data li .data-item__content h4 {\r\n    margin-bottom: 10px !important;\r\n    font-size: 10px !important;\r\n  }\r\n  .shop-data li i {\r\n    height: 45px !important;\r\n    width: 45px !important;\r\n    font-size: 16px !important;\r\n  }\r\n  .shop-data li .data-item__content p {\r\n    font-size: 11px !important;\r\n  }\r\n  /* page intro end */\r\n  .section-products-featured {\r\n    margin: 0px 0px 20px 0px !important;\r\n    padding: 30px 20px;\r\n  }\r\n  /* end  */\r\n  .products-carousel {\r\n    padding-top: 20px;\r\n  }\r\n  .todays-Sale span .timer-Wrap li {\r\n    margin-right: 6px !important;\r\n    width: 25px !important;\r\n    height: 25px !important;\r\n    line-height: 25px !important;\r\n    font-size: 14px !important;\r\n  }\r\n  .btn.btn--rounded {\r\n    font-size: 10px !important;\r\n    padding: 8px 12px !important;\r\n  }\r\n  .section-products-featured .section-products-featured__header h3 {\r\n    padding-bottom: 13px !important;\r\n  }\r\n  /* end */\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\r\n    font-size: 12px !important;\r\n    padding-top: 15px !important;\r\n  }\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\r\n    width: 120px !important;\r\n    height: 120px !important;\r\n  }\r\n  /* end */\r\n  .brandslider .brand-list li {\r\n    flex-basis: calc(33% - 14px) !important;\r\n  }\r\n  .brandslider {\r\n    padding-top: 30px;\r\n  }\r\n  .brand-link h2 {\r\n    padding: 8px 0px;\r\n  }\r\n  /* end */\r\n  .customOrder .customOrder-list {\r\n    width: 100% !important;\r\n  }\r\n  .customOrder .customOrder-list .customOrder-itemOne {\r\n    margin-right: 10px !important;\r\n  }\r\n  .customOrder .customOrder-list .CO-btn {\r\n    font-size: 14px !important;\r\n    padding: 8px 20px !important;\r\n    margin-top: 20px !important;\r\n  }\r\n  /* end */\r\n  .saveTime-Wrap {\r\n    padding: 0px 0px 20px 0px !important;\r\n  }\r\n  .saveTime-Wrap .saveTime img {\r\n    height: 100% !important;\r\n  }\r\n  /* end */\r\n  .PromotionBanner {\r\n    margin-bottom: 20px !important;\r\n    flex-wrap: wrap !important;\r\n  }\r\n  .PromotionBanner .PromotionLeft {\r\n    display: none !important;\r\n  }\r\n  .PromotionBanner .Promo-Banner-List {\r\n    grid-template-columns: auto auto !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  .PromotionBanner img {\r\n    width: 250px !important;\r\n  }\r\n  /* end */\r\n  .Achive-wrap {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  .Achive-wrap .Achive-header {\r\n    padding-bottom: 30px !important;\r\n  }\r\n  .Achive-wrap .Achive-header h2 {\r\n    padding-bottom: 10px !important;\r\n    font-size: 16px !important;\r\n    width: 150px !important;\r\n  }\r\n  .Achive-wrap .Achive-list {\r\n    flex-wrap: wrap !important;\r\n    flex-direction: row !important;\r\n  }\r\n  .Achive-list li {\r\n    flex-basis: calc(50% - 14px) !important;\r\n    display: flex !important;\r\n    justify-content: center !important;\r\n    flex-direction: column !important;\r\n    margin: 10px 0 10px 10px !important;\r\n  }\r\n  /* end */\r\n  .Info-list {\r\n    flex-wrap: wrap !important;\r\n    flex-direction: column !important;\r\n  }\r\n  .InfoSections-Wrap .InfoSections-header h2 {\r\n    font-size: 16px !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  .InfoSections-Wrap .Info-item {\r\n    width: 100% !important;\r\n  }\r\n  .InfoSections-Wrap .InfoSections-header {\r\n    padding-bottom: 30px !important;\r\n  }\r\n  .InfoSections-Wrap {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  .Info-list li:last-child {\r\n    margin-top: 20px;\r\n  }\r\n  .How-works .How-works-header h2 {\r\n    width: 200px !important;\r\n    font-size: 16px !important;\r\n    padding-bottom: 10px !important;\r\n  }\r\n  .How-works .How-works-body {\r\n    padding-top: 30px !important;\r\n  }\r\n  .How-works {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  /* end */\r\n  .OurCustomerSay .heading h2 {\r\n    font-size: 16px !important;\r\n    padding-bottom: 10px !important;\r\n    width: 350px !important;\r\n  }\r\n  .OurCustomerSay .heading {\r\n    padding-bottom: 30px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide img {\r\n    width: 100px !important;\r\n    height: 100px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\r\n    padding: 0px 20px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide p {\r\n    font-size: 13px !important;\r\n    line-height: 20px !important;\r\n  }\r\n  .OurCustomerSay {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 20px !important;\r\n  }\r\n  .subscribe .subscribe__content .subscribe__form input {\r\n    width: 70% !important;\r\n  }\r\n  .btn.btn--rounded {\r\n    padding: 10px 20px !important;\r\n  }\r\n  .btn.btn--rounded:hover {\r\n    border: none !important;\r\n  }\r\n  .subscribe .subscribe__content h4 {\r\n    font-size: 14px !important;\r\n  }\r\n  /* end */\r\n  .mobileApp {\r\n    width: 250px;\r\n  }\r\n  .site-footer__links ul {\r\n    margin-bottom: 30px;\r\n  }\r\n  .site-footer__links ul li {\r\n    margin-bottom: 15px !important;\r\n  }\r\n  .mobileApp .appleApp {\r\n    padding: 15px !important;\r\n    justify-content: center !important;\r\n  }\r\n  /* end */\r\n  /* product market page start*/\r\n  .product-market-page .product-market-body .product-market-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  /* product market page end*/\r\n  /* Blog page start*/\r\n  .blog-page .blog-content .blog-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  .blog-details-page .blog-sidebar {\r\n    background: #ffffff;\r\n    margin-right: 15px !important;\r\n    width: 100% !important;\r\n  }\r\n  .blog-details-page {\r\n    flex-direction: column;\r\n  }\r\n  .blog-details-page .blog-details-content {\r\n    width: 100% !important;\r\n  }\r\n  /* Blog page end*/\r\n  /* producer page start*/\r\n  .producer-page .producer-content .producer-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  .service-point-page .serch-form button {\r\n    right: 20% !important;\r\n  }\r\n  /* producer page end*/\r\n  /*product market start  */\r\n    .product-market-banner {\r\n        margin: 0px !important;\r\n    }\r\n/*product market start  */\r\n  /*payment start  */\r\n  .payment-body .payment-item {\r\n\tpadding: 15px 35px !important;\r\n   }\r\n   .payment-body .payment-item img {\r\n\twidth: 50px !important;\r\n    }\r\n    .show-content {\r\n        width: 100% !important;\r\n    }\r\n    .show-content form h3 {\r\n        font-size: 18px !important;\r\n    }\r\n    .show-content form .form-group .form-control {\r\n        font-size: 14px !important;\r\n    }\r\n  /* payment end  */\r\n  /* view more page start  */\r\n  .view-more-pages-banner {\r\n    height: 65px !important;\r\n    margin-bottom: 20px;\r\n  }\r\n  .section-products-featured .section-products-featured__header h3 {\r\n    font-size: 14px !important;\r\n  }\r\n  .on-sale-view-more-header{\r\n    margin-bottom: 20px;\r\n  }\r\n  .view-more-pages .timer-Wrap li {\r\n    margin-right: 5px !important;\r\n    padding: 5px !important;\r\n  }\r\n  /* view more page end  */\r\n}\r\n\r\n/* // Medium devices (tablets, 768px and up) */\r\n@media (min-width: 768px) and (max-width: 991.98px) {\r\n  .logo {\r\n    max-width: 130px !important;\r\n  }\r\n  .container {\r\n    max-width: 745px !important;\r\n  }\r\n  .site-header .new-search-form {\r\n    width: 460px !important;\r\n  }\r\n  .site-nav {\r\n    display: block !important;\r\n  }\r\n  /* top header */\r\n  .header-top {\r\n    display: none !important;\r\n  }\r\n  .cart-btn-hv:hover .Cart-popup-outer {\r\n    display: none !important;\r\n  }\r\n  /* top header end */\r\n  /* bottom, header */\r\n  .header-bottom,\r\n  .Category-card {\r\n    display: none !important;\r\n  }\r\n  .page-intro .swiper-wrapper {\r\n    margin-left: 0px !important;\r\n    height: 280px !important;\r\n  }\r\n  .shop-data {\r\n    margin-left: 0 !important;\r\n    margin-bottom: 30px !important;\r\n  }\r\n  .shop-data li .data-item__content h4 {\r\n    font-size: 13px !important;\r\n    margin-bottom: 6px !important;\r\n  }\r\n  /* bottom header end */\r\n  .btn.btn--rounded {\r\n    font-size: 12px !important;\r\n    padding: 8px 12px !important;\r\n  }\r\n  /* product */\r\n  .product-item .product__description h3 {\r\n    font-size: 14px !important;\r\n  }\r\n  .product-item .product__description .product__price h4 {\r\n    font-size: 15px !important;\r\n  }\r\n  .product-item .product__description .product__price span {\r\n    font-size: 16px !important;\r\n    margin-left: 10px !important;\r\n  }\r\n  .product-item .product__description .btn-hm-add {\r\n    padding: 6px 12px !important;\r\n    font-size: 13px !important;\r\n  }\r\n  /* end */\r\n  .section-products-featured .section-products-featured__header h3 {\r\n    font-size: 16px !important;\r\n    padding-bottom: 20px !important;\r\n  }\r\n  .section-products-featured .section-products-featured__header {\r\n    margin-bottom: 30px !important;\r\n  }\r\n  .todays-Sale span .timer-Wrap li {\r\n    margin-right: 8px !important;\r\n    width: 25px !important;\r\n    height: 25px !important;\r\n    line-height: 25px !important;\r\n    font-size: 16px !important;\r\n  }\r\n  /* cate */\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\r\n    font-size: 14px !important;\r\n  }\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\r\n    width: 150px !important;\r\n    height: 150px !important;\r\n  }\r\n  .brandslider .brand-list li {\r\n    flex-basis: calc(25% - 14px) !important;\r\n  }\r\n  .brand-link h2 {\r\n    padding: 10px 0px !important;\r\n  }\r\n  /* cate end*/\r\n  /* product end */\r\n  .customOrder .customOrder-list {\r\n    width: 100% !important;\r\n  }\r\n  .customOrder .customOrder-list .customOrder-itemOne {\r\n    margin-right: 12px !important;\r\n  }\r\n  .customOrder .customOrder-list .CO-btn {\r\n    background: #c53030;\r\n    font-size: 14px !important;\r\n    padding: 8px 20px !important;\r\n    margin-top: 20px !important;\r\n  }\r\n  /* custom order */\r\n  .PromotionBanner {\r\n    flex-wrap: wrap;\r\n  }\r\n  .PromotionBanner .Promo-Banner-List {\r\n    grid-template-columns: auto auto !important;\r\n  }\r\n  .PromotionBanner img {\r\n    width: 100% !important;\r\n  }\r\n  .PromotionBanner .PromotionLeft img {\r\n    height: 100% !important;\r\n  }\r\n  .PromotionBanner .PromotionLeft {\r\n    display: none !important;\r\n  }\r\n  .PromotionRight {\r\n    padding-top: 10px !important;\r\n  }\r\n\r\n  /* banner end */\r\n  .Achive-wrap {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 30px !important;\r\n  }\r\n  .Achive-wrap .Achive-header h2 {\r\n    font-size: 16px !important;\r\n  }\r\n  .Achive-wrap .Achive-header {\r\n    padding-bottom: 30px !important;\r\n  }\r\n  .Achive-wrap .Achive-list {\r\n    flex-wrap: wrap !important;\r\n    flex-direction: row !important;\r\n  }\r\n  .Achive-list li {\r\n    flex-basis: calc(33% - 14px) !important;\r\n    display: flex !important;\r\n    justify-content: center !important;\r\n    flex-direction: column !important;\r\n    margin: 10px 0 10px 10px !important;\r\n  }\r\n  /* achive edn */\r\n  .InfoSections-Wrap {\r\n    padding: 20px 10px !important;\r\n    margin-bottom: 30px !important;\r\n  }\r\n  .InfoSections-Wrap .InfoSections-header h2 {\r\n    font-size: 16px !important;\r\n    padding-bottom: 15px !important;\r\n  }\r\n  .InfoSections-Wrap .InfoSections-header {\r\n    padding-bottom: 30px !important;\r\n  }\r\n  .Info-list .card button {\r\n    font-size: 12px !important;\r\n    padding: 8px 10px !important;\r\n  }\r\n  .InfoSections-Wrap .Info-item img {\r\n    height: 315px !important;\r\n  }\r\n\r\n  /* trust end */\r\n  .How-works .How-works-header h2 {\r\n    width: 150px !important;\r\n    font-size: 16px !important;\r\n  }\r\n\r\n  /* work end */\r\n  .OurCustomerSay .heading h2 {\r\n    font-size: 16px !important;\r\n    width: 350px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide img {\r\n    width: 120px !important;\r\n    height: 120px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide p {\r\n    font-size: 13px !important;\r\n    line-height: 20px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\r\n    width: 100% !important;\r\n    padding: 0px 20px !important;\r\n    margin-right: 0 !important;\r\n  }\r\n  /* what say end */\r\n  .site-footer .site-footer__links {\r\n    flex-wrap: wrap !important;\r\n    justify-content: space-between !important;\r\n  }\r\n  .site-footer .site-footer__links ul li:first-child {\r\n    margin-bottom: 20px !important;\r\n  }\r\n  .site-footer .site-footer__links ul:last-child {\r\n    margin-top: 40px;\r\n  }\r\n  .site-footer .site-footer__links ul .f-heading {\r\n    font-size: 14px !important;\r\n  }\r\n  .site-footer .site-footer__links ul li a {\r\n    font-size: 13px !important;\r\n    margin-bottom: 6px !important;\r\n  }\r\n  .site-footer .site-footer__bottom {\r\n    padding: 15px 0 !important;\r\n  }\r\n  .mobileApp .appleApp .appleInfo p {\r\n    font-size: 13px !important;\r\n  }\r\n  .mobileApp .appleApp .appleInfo h4 {\r\n    font-size: 14px !important;\r\n  }\r\n  /* footer end*/\r\n  /* product market page start*/\r\n  .product-market-page .product-market-body .product-market-item {\r\n    flex-basis: calc(33% - 14px) !important;\r\n  }\r\n  /* product market page end*/\r\n  /* Blog page start*/\r\n  .blog-page .blog-content .blog-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  .blog-details-page .blog-sidebar {\r\n    background: #ffffff;\r\n    margin-right: 15px !important;\r\n    width: 40% !important;\r\n  }\r\n  .blog-details-page .blog-sidebar .tags .tags-list {\r\n    grid-template-columns: auto !important;\r\n  }\r\n  .service-point-page .serch-form button {\r\n    right: 26% !important;\r\n  }\r\n  /* Blog page end*/\r\n  /*product market start  */\r\n  .product-market-banner {\r\n    margin: 0px !important;\r\n  }\r\n  /*product market end  */\r\n  /*payment start  */\r\n  .payment-body .payment-item {\r\n\tpadding: 20px 50px !important;\r\n   }\r\n   .payment-body .payment-item img {\r\n\twidth: 70px !important;\r\n}\r\n  /* payment end  */\r\n}\r\n\r\n/* // Large devices (desktops, 992px and up) */\r\n@media (min-width: 992px) and (max-width: 1199.98px) {\r\n  .logo {\r\n    max-width: 170px !important;\r\n  }\r\n  .site-header .new-search-form {\r\n    width: 550px !important;\r\n  }\r\n  .header-top .nav-list .nav-item {\r\n    padding-right: 0 !important;\r\n  }\r\n  .header-top .nav-list .nav-item .nav-link {\r\n    font-size: 12px !important;\r\n  }\r\n  .header-top .nav-list .nav-item .nav-link svg {\r\n    width: 15px !important;\r\n    height: 15px !important;\r\n  }\r\n  .header-top .f-right .nav-item {\r\n    padding-left: 10px !important;\r\n    padding-right: 0;\r\n  }\r\n  .header-top .f-right .nav-item .nav-link {\r\n    font-size: 12px !important;\r\n  }\r\n  /* slider */\r\n  .page-intro {\r\n    justify-content: space-between !important;\r\n  }\r\n  .page-intro .swiper-wrapper {\r\n    height: 302px !important;\r\n    width: 100% !important;\r\n    margin-left: -5px !important;\r\n  }\r\n  .swiper-slide {\r\n    width: 100% !important;\r\n  }\r\n  .page-intro .Category-card {\r\n    width: 245px !important;\r\n    left: 37px !important;\r\n    margin-left: 12px !important;\r\n  }\r\n  .cat-item .cat-link {\r\n    font-size: 13px !important;\r\n  }\r\n  .header-bottom .nav-list .cat {\r\n    font-size: 14px !important;\r\n  }\r\n  .header-bottom .nav-list .bar {\r\n    font-size: 24px !important;\r\n  }\r\n  .header-bottom .f-right {\r\n    padding-left: 0px !important;\r\n  }\r\n  .header-bottom .f-right .nav-item {\r\n    padding-left: 10px !important;\r\n  }\r\n  .header-bottom .f-right .nav-item .nav-link {\r\n    font-size: 11px !important;\r\n  }\r\n  .shop-data {\r\n    margin-top: 6px !important;\r\n    margin-bottom: 40px !important;\r\n  }\r\n  /* end */\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link img {\r\n    width: 125px !important;\r\n    height: 125px !important;\r\n  }\r\n  .cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\r\n    font-size: 13px !important;\r\n    padding-top: 15px !important;\r\n  }\r\n  .container {\r\n    max-width: 1130px !important;\r\n  }\r\n  .data-item__content > h4 {\r\n    font-size: 12px;\r\n  }\r\n  .data-item__content > p {\r\n    font-size: 10px;\r\n  }\r\n  .site-header__btn-menu {\r\n    display: none !important;\r\n  }\r\n  .site-header__btn-avatar {\r\n    display: block !important;\r\n  }\r\n  /* custom order */\r\n  .customOrder .customOrder-list {\r\n    width: 100% !important;\r\n  }\r\n  /* custom order end*/\r\n  .Promo-Banner-Item {\r\n    width: 300px !important;\r\n  }\r\n  .OurCustomerSay .Testimonial-slide .swiper-slide {\r\n    padding: 0px 50px !important;\r\n  }\r\n  /* Banner end */\r\n  .Achive-wrap .Achive-list li p svg {\r\n    width: 40px !important;\r\n    height: 40px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li span {\r\n    font-size: 22px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li h3 {\r\n    font-size: 12px !important;\r\n    padding-top: 10px !important;\r\n  }\r\n  .Achive-wrap .Achive-list li p i {\r\n    font-size: 41px !important;\r\n  }\r\n  .Info-list .card button {\r\n    font-size: 12px !important;\r\n    padding: 12px 10px !important;\r\n  }\r\n  .InfoSections-Wrap .Info-item img {\r\n    height: 298px !important;\r\n  }\r\n  /* achive end */\r\n  .site-footer {\r\n    padding-top: 60px !important;\r\n  }\r\n  .site-footer .site-footer__links ul {\r\n    margin-right: 85px !important;\r\n  }\r\n  /* footer end */\r\n  /* product market-page start*/\r\n  .product-market-page .product-market-body .product-market-item {\r\n    flex-basis: calc(25% - 14px) !important;\r\n  }\r\n  /* product market-page end*/\r\n  .blog-page .blog-content .blog-item {\r\n    flex-basis: calc(50% - 14px) !important;\r\n  }\r\n  .blog-details-page .blog-sidebar {\r\n    background: #ffffff;\r\n    margin-right: 15px !important;\r\n    width: 30% !important;\r\n  }\r\n  .service-point-page .serch-form button {\r\n    right: 32% !important;\r\n  }\r\n  /*product market start  */\r\n  .product-market-banner {\r\n    margin: 0px !important;\r\n  }\r\n  /*product market start  */\r\n}\r\n\r\n/* // Extra large devices (large desktops, 1200px and up) */\r\n@media (min-width: 1200px) {\r\n}\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/styles.scss":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/styles.scss ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_1_node_modules_next_dist_compiled_postcss_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_2_node_modules_next_dist_compiled_resolve_url_loader_index_js_ruleSet_1_rules_2_oneOf_7_use_3_node_modules_next_dist_compiled_sass_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_4_fonts_icons_icons_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! -!../../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../../node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./fonts/icons/icons.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/fonts/icons/icons.css");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_1_node_modules_next_dist_compiled_postcss_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_2_node_modules_next_dist_compiled_resolve_url_loader_index_js_ruleSet_1_rules_2_oneOf_7_use_3_node_modules_next_dist_compiled_sass_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_4_partials_reset_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! -!../../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../../node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./partials/reset.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/partials/reset.css");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_1_node_modules_next_dist_compiled_postcss_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_2_node_modules_next_dist_compiled_resolve_url_loader_index_js_ruleSet_1_rules_2_oneOf_7_use_3_node_modules_next_dist_compiled_sass_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_4_partials_responsive_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! -!../../node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!../../node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!../../node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!../../node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./partials/responsive.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./assets/css/partials/responsive.css");
// Imports




var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
___CSS_LOADER_EXPORT___.push([module.id, "@import url(https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap);"]);
___CSS_LOADER_EXPORT___.i(_node_modules_next_dist_compiled_css_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_1_node_modules_next_dist_compiled_postcss_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_2_node_modules_next_dist_compiled_resolve_url_loader_index_js_ruleSet_1_rules_2_oneOf_7_use_3_node_modules_next_dist_compiled_sass_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_4_fonts_icons_icons_css__WEBPACK_IMPORTED_MODULE_1__.default);
___CSS_LOADER_EXPORT___.i(_node_modules_next_dist_compiled_css_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_1_node_modules_next_dist_compiled_postcss_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_2_node_modules_next_dist_compiled_resolve_url_loader_index_js_ruleSet_1_rules_2_oneOf_7_use_3_node_modules_next_dist_compiled_sass_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_4_partials_reset_css__WEBPACK_IMPORTED_MODULE_2__.default);
___CSS_LOADER_EXPORT___.i(_node_modules_next_dist_compiled_css_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_1_node_modules_next_dist_compiled_postcss_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_2_node_modules_next_dist_compiled_resolve_url_loader_index_js_ruleSet_1_rules_2_oneOf_7_use_3_node_modules_next_dist_compiled_sass_loader_cjs_js_ruleSet_1_rules_2_oneOf_7_use_4_partials_responsive_css__WEBPACK_IMPORTED_MODULE_3__.default);
___CSS_LOADER_EXPORT___.push([module.id, "@import url(https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap);"]);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@charset \"UTF-8\";\nhtml,\nbody {\n  overflow-x: hidden !important;\n}\n\n:root {\n  --main-font: \"Poppins\";\n  --font-title: \"Archivo\";\n  --color-orange: #218ab6;\n  --color-orange-light: #FFF3DF;\n  --color-black: #333333;\n  --color-text: #868686;\n  --color-white: #FFFFFF;\n  --color-gray: #706c61;\n  --color-red: #FF0000;\n}\n\n@-webkit-keyframes skeleton {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n\n@keyframes skeleton {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n@-webkit-keyframes watchAnimation {\n  from {\n    -webkit-transform: rotate(0deg) translateX(10px) rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg) translateX(10px) rotate(-360deg);\n  }\n}\n@keyframes watchAnimation {\n  from {\n    transform: rotate(0deg) translateX(10px) rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg) translateX(10px) rotate(-360deg);\n  }\n}\n@-webkit-keyframes opacity {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@keyframes opacity {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n}\n\nbody {\n  box-sizing: border-box;\n  background-color: #f2f3f8;\n  font-family: var(--main-font);\n  color: var(--color-text);\n  font-size: 16px;\n}\nbody.body--with-footer .main {\n  align-items: normal;\n}\n\nspan {\n  font-weight: 300;\n}\n\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  /* display: none; <- Crashes Chrome on hover */\n  -webkit-appearance: none;\n  margin: 0;\n  /* <-- Apparently some margin are still there even though it's hidden */\n}\n\nbutton {\n  cursor: pointer;\n}\n\ninput[type=number] {\n  -moz-appearance: textfield;\n  /* Firefox */\n}\n\ninput,\ntextarea,\nbutton,\nselect {\n  border: none;\n  background: none;\n  outline: none;\n  border-radius: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-family: var(--main-font);\n}\n\nbutton {\n  cursor: pointer;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  color: var(--color-black);\n}\n\n.container {\n  max-width: 380px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 16px;\n  padding-right: 16px;\n}\n@media (min-width: 767px) {\n  .container {\n    max-width: 650px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n@media (min-width: 1024px) {\n  .container {\n    max-width: 980px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n@media (min-width: 1202px) {\n  .container {\n    max-width: 1280px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n\n.main-page {\n  padding-top: 0px;\n  background-color: #f2f3f8;\n}\n@media (min-width: 767px) {\n  .main-page {\n    padding-top: 0px;\n  }\n}\n\n.block .block__title {\n  font-size: 14px;\n  margin-bottom: 23px;\n}\n\n.btn-hamburger {\n  display: block;\n  position: relative;\n  display: block;\n  z-index: 100;\n  width: 25px;\n  height: 25px;\n  margin-left: auto;\n}\n.btn-hamburger:before, .btn-hamburger:after,\n.btn-hamburger span {\n  content: \"\";\n  display: block;\n  width: 20px;\n  height: 2px;\n  top: 50%;\n  border-radius: 3px;\n  margin-top: -1px;\n  position: absolute;\n  left: 50%;\n  margin-left: -10px;\n  transition: none 0.3s ease 0.3s;\n  transition-property: transform, top, bottom, right, opacity;\n}\n.btn-hamburger:before {\n  transform: translateY(-6px);\n}\n.btn-hamburger:after {\n  transform: translateY(6px);\n}\n.btn-hamburger.is-active:before {\n  transform: rotate(45deg);\n}\n.btn-hamburger.is-active:after {\n  transform: rotate(-45deg);\n}\n.btn-hamburger.is-active span {\n  opacity: 0;\n}\n\n.btn {\n  color: #000000;\n  cursor: pointer;\n  transition: all ease-in-out 600ms;\n}\n.btn.btn--rounded {\n  font-size: 12px;\n  background: #218ab6;\n  color: #fff;\n  display: inline-block;\n  border-radius: 50px;\n  padding: 11px 20px;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n@media (min-width: 767px) {\n  .btn.btn--rounded {\n    font-size: 13px;\n    padding: 11px 20px;\n  }\n}\n.btn.btn--rounded.btn--border {\n  border: 1px solid #218ab6;\n}\n.btn.btn--rounded.btn--yellow {\n  background-color: #218ab6;\n}\n.btn.btn--rounded:hover {\n  background-color: #fff;\n  color: #218ab6;\n}\n\n.logo {\n  max-width: 190px;\n}\n\n.breadcrumb {\n  padding: 20px 0 20px 0;\n}\n@media (min-width: 767px) {\n  .breadcrumb {\n    padding: 29px 0 35px 0;\n  }\n}\n.breadcrumb .breadcrumb-list {\n  display: flex;\n}\n.breadcrumb .breadcrumb-list li {\n  font-size: 13px;\n  color: #b2b2b2;\n}\n.breadcrumb .breadcrumb-list li:not(:first-child) {\n  margin-left: 10px;\n}\n.breadcrumb .breadcrumb-list li:not(:first-child):before {\n  content: \"/ \";\n  margin-right: 3px;\n}\n\n.account-content {\n  padding: 20px;\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  display: none;\n}\n.account-content .account-content-wrap {\n  background-color: #ffffff;\n  border: 1px solid #ebeaea;\n  padding: 20px;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  border-radius: 4px;\n}\n.account-content .account-content-wrap div .reg-btn {\n  margin: 0 !important;\n  padding: 10px 20px;\n  background: #4c8000;\n  color: #ffffff;\n  border-radius: 4px;\n  transition: all ease-in-out 600ms;\n}\n.account-content .account-content-wrap div .reg-btn:hover {\n  background: #000000;\n}\n.account-content .account-content-wrap div .log-btn {\n  margin: 0 !important;\n  padding: 10px 20px;\n  background: #000000;\n  color: #ffffff;\n  border-radius: 4px;\n  transition: all ease-in-out 600ms;\n}\n.account-content .account-content-wrap div .log-btn:hover {\n  background: #4c8000;\n}\n.account-content .account-content-wrap div:first-child {\n  margin-right: 20px;\n}\n\n.account-wrap:hover .account-content {\n  display: block;\n}\n\n.header-top {\n  position: relative;\n  z-index: 100000;\n  background: #4c8000;\n  border-bottom: 1px solid #4c8000;\n  color: #ffffff;\n  padding: 12px 30px;\n}\n.header-top .f-right {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n.header-top .f-right .nav-item {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.header-top .f-right .nav-item .nav-link {\n  font-size: 14px;\n  text-transform: capitalize;\n}\n.header-top .f-right .nav-item .nav-link:hover {\n  color: #000;\n  font-weight: 400;\n}\n.header-top .nav-list {\n  float: left;\n  display: flex;\n}\n.header-top .nav-list .nav-item {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.header-top .nav-list .nav-item .nav-link {\n  font-size: 14px;\n  text-transform: capitalize;\n}\n.header-top .nav-list .nav-item .nav-link:hover {\n  color: #000;\n  font-weight: 400;\n}\n\n.header-bottom {\n  position: relative;\n  background: #000000;\n  border-bottom: 1px solid #000000;\n  color: #4c8000;\n  padding: 15px 50px;\n}\n.header-bottom .f-right {\n  display: flex;\n  align-items: flex-end;\n  justify-content: flex-start;\n  padding-left: 18px;\n}\n.header-bottom .f-right .nav-item {\n  padding-left: 20px;\n}\n.header-bottom .f-right .nav-item .nav-link {\n  font-size: 14px;\n  text-transform: capitalize;\n  font-weight: 500;\n}\n.header-bottom .f-right .nav-item .nav-link:hover {\n  color: #ffffff;\n}\n.header-bottom .nav-list {\n  float: left;\n  background-color: #060606;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 47px;\n  position: relative;\n  top: -15px;\n  width: 245px;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.header-bottom .nav-list .cat {\n  color: #ffffff;\n  font-size: 18px;\n  cursor: pointer;\n  text-transform: uppercase;\n  font-weight: 600;\n}\n.header-bottom .nav-list .bar {\n  font-size: 26px;\n}\n.header-bottom .nav-list .arrowRight {\n  font-size: 18px;\n}\n.header-bottom .nav-list .nav-item {\n  padding-right: 20px;\n}\n.header-bottom .nav-list .nav-item .nav-link {\n  font-size: 14px;\n  text-transform: capitalize;\n}\n\n.site-header {\n  position: relative;\n  z-index: 999;\n  height: 65px;\n  color: #000;\n  background: #000;\n  box-shadow: none;\n  transition: ease-in-out 600ms;\n}\n@media (min-width: 767px) {\n  .site-header {\n    height: 85px;\n  }\n}\n.site-header .btn-hamburger:before, .site-header .btn-hamburger:after,\n.site-header .btn-hamburger span {\n  background-color: #4c8000;\n}\n.site-header svg {\n  stroke: #4c8000 !important;\n}\n.site-header .container {\n  display: flex;\n  height: 100%;\n  align-items: center;\n}\n.site-header .site-header__btn-avatar {\n  display: none;\n}\n@media (min-width: 1024px) {\n  .site-header .site-header__btn-avatar {\n    display: block;\n  }\n}\n@media (min-width: 1024px) {\n  .site-header .site-header__btn-menu {\n    display: none;\n  }\n}\n.site-header .site-header__actions {\n  margin-left: auto;\n  display: flex;\n  align-items: center;\n}\n@media (min-width: 1024px) {\n  .site-header .site-header__actions {\n    margin-left: 0;\n  }\n}\n.site-header .site-header__actions button {\n  margin-left: 15px;\n}\n@media (min-width: 1024px) {\n  .site-header .site-header__actions button {\n    margin-left: 25px;\n  }\n}\n.site-header .site-header__actions i {\n  color: #4c8000;\n  z-index: 10;\n  transition: all 0.3s ease;\n  position: relative;\n  font-size: 18px;\n}\n.site-header .Header-middle {\n  position: relative;\n  margin-left: auto;\n  margin-right: auto;\n}\n.site-header .new-search-form {\n  width: 800px;\n  background: #fff;\n  height: 46px;\n  padding: 11px;\n  border: 2px solid #4c8000;\n  border-radius: 4px;\n}\n.site-header .new-search-form input {\n  width: 100%;\n}\n.site-header .seach-btn {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 9.5px 25px;\n  background: #4c8000;\n  color: #fff;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.site-header .seach-btn i {\n  font-size: 18px;\n}\n.site-header .seach-btn:hover {\n  background: #218ab6;\n  color: #ffffff;\n}\n.site-header .site-nav {\n  top: 0;\n  right: -250px;\n  width: 250px;\n  z-index: 9999;\n  height: 100vh;\n  margin-left: auto;\n  margin-right: auto;\n  position: fixed;\n  background-color: #fff;\n  transition: all 0.3s ease;\n  border-left: 1px solid #e5e5e5;\n  display: none;\n}\n@media (min-width: 1024px) {\n  .site-header .site-nav {\n    position: relative;\n    height: auto;\n    right: 0;\n    width: auto;\n    border: none;\n    background-color: transparent;\n  }\n}\n.site-header .site-nav .site-nav__btn {\n  padding: 13px 18px;\n  width: 100%;\n  font-size: 15px;\n  font-weight: 500;\n  text-align: left;\n}\n@media (min-width: 1024px) {\n  .site-header .site-nav .site-nav__btn {\n    display: none;\n  }\n}\n.site-header .site-nav.site-nav--open {\n  right: 0;\n}\n.site-header .site-nav a {\n  font-size: 15px;\n  font-weight: 500;\n  width: 100%;\n  color: #000;\n  display: block;\n  text-align: left;\n  padding: 15px 18px;\n}\n@media (min-width: 1024px) {\n  .site-header .site-nav a {\n    width: auto;\n    padding: 0;\n    color: #fff;\n    margin-right: 76px;\n    display: inline-block;\n    font-size: 14px;\n  }\n}\n.site-header .search-form-wrapper.search-form--active .search-form {\n  top: 0;\n}\n@media (min-width: 1024px) {\n  .site-header .search-form-wrapper.search-form--active .search-form {\n    top: auto;\n  }\n}\n@media (min-width: 1024px) {\n  .site-header .search-form-wrapper.search-form--active .search-form input {\n    border: 1px solid #ababab;\n  }\n}\n\n.search-form-wrapper {\n  position: relative;\n  z-index: 5000;\n  display: none;\n}\n.search-form-wrapper .search-form {\n  position: fixed;\n  z-index: 100;\n  top: -100vh;\n  left: 0;\n  height: 100vh;\n  right: 0;\n  transition: all 0.3s ease;\n  background-color: #fff;\n}\n@media (min-width: 767px) {\n  .search-form-wrapper .search-form {\n    display: block;\n  }\n}\n@media (min-width: 1024px) {\n  .search-form-wrapper .search-form {\n    position: static;\n    height: auto;\n    top: auto;\n  }\n}\n.search-form-wrapper .search-form .icon-cancel {\n  top: 18px;\n  right: 22px;\n  cursor: pointer;\n  position: absolute;\n}\n@media (min-width: 1024px) {\n  .search-form-wrapper .search-form .icon-cancel {\n    display: none;\n  }\n}\n.search-form-wrapper .search-form input {\n  padding: 0;\n  overflow: hidden;\n  height: 42px;\n  color: #808080;\n  font-size: 13px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border-bottom: 1px solid black;\n  transition: all 0.3s ease;\n  background-color: transparent;\n}\n.search-form-wrapper .search-form input::-moz-placeholder {\n  color: #808080;\n}\n.search-form-wrapper .search-form input:-ms-input-placeholder {\n  color: #808080;\n}\n.search-form-wrapper .search-form input::placeholder {\n  color: #808080;\n}\n@media (min-width: 1024px) {\n  .search-form-wrapper .search-form input {\n    width: 0;\n    top: 50%;\n    left: auto;\n    right: -9px;\n    border: none;\n    border-radius: 50px;\n    margin-top: -21px;\n    transform: none;\n  }\n}\n.search-form-wrapper.search-form--active input {\n  padding: 0 8px;\n  width: 80%;\n  text-align: center;\n  padding-right: 40px;\n  background-color: #fff;\n}\n@media (min-width: 1024px) {\n  .search-form-wrapper.search-form--active input {\n    width: 300px;\n    padding: 0 19px;\n    text-align: left;\n  }\n}\n.search-form-wrapper.search-form--active i {\n  color: #000 !important;\n  z-index: 10;\n}\n\n.cat-item {\n  padding: 12px 0px;\n  border-top: 1px solid #e2e8f0;\n  position: relative;\n}\n.cat-item .cat-link {\n  display: flex;\n  justify-content: space-between;\n  font-size: 14px;\n  color: #4a5568;\n  text-transform: capitalize;\n}\n.cat-item .Sub-Cat {\n  position: absolute;\n  top: 0;\n  right: -258px;\n  z-index: 100;\n  background: transparent;\n  padding: 0px 20px;\n  display: none;\n}\n.cat-item .Sub-Cat li {\n  padding: 12px 20px;\n  border-bottom: 1px solid #e2e8f0;\n  background: #fff;\n}\n.cat-item .Sub-Cat li a {\n  font-size: 14px;\n}\n.cat-item:hover .cat-link,\n.cat-item span > svg {\n  font-weight: 600;\n  color: #4c8000 !important;\n  stroke: #4c8000 !important;\n}\n\n.Man-col {\n  transition: all 600ms;\n}\n.Man-col:hover .Sub-Cat {\n  display: block;\n}\n\n.page-intro {\n  display: flex;\n}\n.page-intro .Category-card {\n  position: absolute;\n  left: 50px;\n  width: 245px;\n  background-color: #ffffff;\n}\n.page-intro .Category-card .cat-list {\n  padding: 10px 10px 0px 15px;\n  border: 1px solid #e2e8f0;\n}\n.page-intro .swiper-wrapper {\n  margin: 6px 0px 0px 6px;\n  height: 330px;\n  width: 100%;\n  margin-left: -5px;\n}\n.page-intro .swiper-wrapper .swiper-container {\n  width: 965px;\n}\n.page-intro .swiper-pagination {\n  position: absolute;\n  bottom: 3%;\n  right: 46%;\n  z-index: 100;\n}\n.page-intro .swiper-pagination .swiper-pagination-bullet {\n  width: 10px;\n  height: 10px;\n  border-radius: 30px;\n  background: rgba(0, 0, 0, 0.6);\n  display: inline-block;\n  margin-right: 10px;\n}\n.page-intro .swiper-pagination .swiper-pagination-bullet-active {\n  background: #4c8000;\n}\n.page-intro .swiper-button-prev,\n.page-intro .swiper-button-next {\n  bottom: 20px;\n  top: 50%;\n  transform: translateX(50%);\n  right: auto;\n  width: 30px;\n  height: 30px;\n  z-index: 100;\n  font-size: 13px;\n  display: flex;\n  cursor: pointer;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  display: none;\n  background-color: rgba(255, 255, 255, 0.12);\n  border-radius: 100%;\n}\n@media (min-width: 767px) {\n  .page-intro .swiper-button-prev,\n.page-intro .swiper-button-next {\n    width: 52px;\n    height: 52px;\n    bottom: 30px;\n    font-size: 17px;\n    display: flex;\n  }\n}\n.page-intro .swiper-button-prev:before,\n.page-intro .swiper-button-next:before {\n  color: #fff;\n  content: \"\";\n  font-family: \"icons\";\n}\n.page-intro .swiper-button-prev:hover,\n.page-intro .swiper-button-next:hover {\n  background: #fff;\n}\n.page-intro .swiper-button-prev:hover:before,\n.page-intro .swiper-button-next:hover:before {\n  color: #000;\n}\n.page-intro .swiper-button-next {\n  right: 20px;\n}\n@media (min-width: 767px) {\n  .page-intro .swiper-button-next {\n    right: 7%;\n  }\n}\n.page-intro .swiper-button-next:before {\n  content: \"\";\n}\n.page-intro .page-intro__slide {\n  height: 350px;\n  position: relative;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n  background-color: #fafafa;\n}\n@media (min-width: 767px) {\n  .page-intro .page-intro__slide {\n    height: 90vh;\n  }\n}\n.page-intro .page-intro__slide:before {\n  content: \"\";\n  left: 0;\n  z-index: 5;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.page-intro .page-intro__slide .container {\n  z-index: 10;\n  display: flex;\n  position: relative;\n  align-items: center;\n  height: 100%;\n}\n.page-intro .page-intro__slide .page-intro__slide__content {\n  margin-top: auto;\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .page-intro .page-intro__slide .page-intro__slide__content {\n    margin-bottom: 80px;\n    margin-top: 0;\n  }\n}\n.page-intro .page-intro__slide .page-intro__slide__content h2 {\n  font-size: 36px;\n  color: #fff;\n  font-weight: 600;\n  line-height: 120%;\n  margin-bottom: 45px;\n}\n@media (min-width: 767px) {\n  .page-intro .page-intro__slide .page-intro__slide__content h2 {\n    font-size: 64px;\n    width: 600px;\n  }\n}\n.page-intro .page-intro__slide .page-intro__slide__content .btn-shop {\n  display: flex;\n  color: #fff;\n  align-items: center;\n}\n.page-intro .page-intro__slide .page-intro__slide__content .btn-shop i {\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  width: 40px;\n  height: 40px;\n  color: #fff;\n  font-size: 15px;\n  margin-right: 10px;\n  background-color: var(--color-orange);\n  border-radius: 100%;\n}\n\n.customOrder {\n  margin: 40px 0px;\n  padding: 30px 20px;\n  background: #ffffff;\n  border-radius: 10px;\n}\n.customOrder .heading {\n  margin-bottom: 45px;\n  border-bottom: 1px solid #e2e8f0;\n}\n.customOrder .heading h2 {\n  font-size: 29px;\n  text-transform: capitalize;\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 15px;\n  width: 400px;\n}\n.customOrder p {\n  text-align: center;\n  font-size: 16px;\n  padding-bottom: 10px;\n  color: #218ab6;\n}\n.customOrder .customOrder-list {\n  width: 60%;\n  margin: auto;\n}\n.customOrder .customOrder-list .customOrder-item {\n  border: 2px solid #e2e8f0;\n  border-radius: 4px;\n}\n.customOrder .customOrder-list .customOrder-itemOne,\n.customOrder .customOrder-list .customOrder-itemTwo {\n  height: 40px;\n  width: 49%;\n  padding: 20px;\n  margin: 0px 0px 20px 0px;\n}\n.customOrder .customOrder-list .customOrder-itemOne {\n  margin-right: 14px;\n}\n.customOrder .customOrder-list .customOrder-itemThree {\n  padding: 20px;\n  margin: 0px 0px 20px 0px;\n  width: 100%;\n}\n.customOrder .customOrder-list .file-area {\n  width: 100%;\n  position: relative;\n  border: 5px dashed #e2e8f0;\n  margin-right: 20px;\n}\n.customOrder .customOrder-list .file-area input[type=file] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  cursor: pointer;\n}\n.customOrder .customOrder-list .file-area .file-dummy {\n  width: 100%;\n  padding: 30px;\n  border-color: #e2e8f0;\n  background: rgba(255, 255, 255, 0.2);\n  text-align: center;\n  transition: background 0.3s ease-in-out;\n}\n.customOrder .customOrder-list .file-area .file-dummy .success {\n  display: none;\n}\n.customOrder .customOrder-list .file-area:hover .file-dummy {\n  background: rgba(255, 255, 255, 0.1);\n}\n.customOrder .customOrder-list .file-area input[type=file]:focus + .file-dummy {\n  outline: 5px dashed #e2e8f0;\n  outline: -webkit-focus-ring-color auto 5px;\n}\n.customOrder .customOrder-list .file-area input[type=file]:valid + .file-dummy {\n  border-color: rgba(0, 255, 0, 0.4);\n  background-color: rgba(0, 255, 0, 0.3);\n}\n.customOrder .customOrder-list .file-area input[type=file]:valid + .file-dummy .success {\n  display: inline-block;\n}\n.customOrder .customOrder-list .file-area input[type=file]:valid + .file-dummy .default {\n  display: none;\n}\n.customOrder .customOrder-list .CO-btn {\n  background: #218ab6;\n  font-size: 16px;\n  padding: 15px 40px;\n  color: #fff;\n  margin-top: 40px;\n  border-radius: 30px;\n  text-transform: capitalize;\n}\n\n.mt-50 {\n  margin-top: 50px;\n}\n\n.cat-grid-wrap {\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n}\n.cat-grid-wrap .cat-grid-item {\n  display: flex;\n  flex-basis: calc(20% - 14px);\n  justify-content: center;\n  flex-direction: column;\n  margin: 20px 0 10px 10px;\n}\n.cat-grid-wrap .cat-grid-item .cat-grid-link {\n  text-align: center;\n}\n.cat-grid-wrap .cat-grid-item .cat-grid-link img {\n  width: 170px;\n  height: 170px;\n  border-radius: 100%;\n  border: 2px solid #e2e8f0;\n}\n.cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\n  font-size: 16px;\n  text-transform: capitalize;\n  font-weight: 600;\n  padding-top: 20px;\n}\n\n.todays-Sale {\n  display: flex;\n}\n.todays-Sale .sale-now-txt {\n  color: #218ab6;\n  font-weight: 500;\n}\n.todays-Sale span {\n  padding-left: 20px;\n}\n.todays-Sale span .timer-Wrap {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n.todays-Sale span .timer-Wrap li {\n  margin-right: 10px;\n  width: 30px;\n  height: 30px;\n  background: #218ab6;\n  text-align: center;\n  line-height: 30px;\n  color: #ffffff;\n  border-radius: 4px;\n  font-size: 18px;\n}\n\n.sc-mt {\n  margin-top: 100px;\n}\n\n.Cbo-item {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n}\n\n.react-rater-star.is-active {\n  color: #ffaf36;\n}\n\n.product-item {\n  margin-bottom: 10px;\n  transition: all ease-in-out 600ms;\n  position: relative;\n}\n.product-item:hover {\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.08);\n  -webkit-box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.08);\n}\n.product-item:hover .view-details {\n  display: block;\n}\n.product-item .react-rater-star {\n  font-size: 22px;\n}\n.product-item .product__description {\n  padding: 10px 1px 10px 15px;\n}\n.product-item .product__description h5 {\n  padding-bottom: 10px;\n  font-size: 14px;\n  color: #218ab6;\n  cursor: pointer;\n}\n.product-item.product-item--loading .product__image:before,\n.product-item.product-item--loading .product__description h3:before,\n.product-item.product-item--loading .product__price h4:before {\n  content: \"\";\n  background-color: #eee;\n  background-image: linear-gradient(90deg, #eee, #f5f5f5, #eee);\n  -webkit-animation-name: skeleton;\n          animation-name: skeleton;\n  -webkit-animation-duration: 1.2s;\n          animation-duration: 1.2s;\n  -webkit-animation-timing-function: ease-in-out;\n          animation-timing-function: ease-in-out;\n  -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n  background-size: 200px 100%;\n  background-repeat: no-repeat;\n  border-radius: 4px;\n  display: inline-block;\n  line-height: 1;\n  width: 100%;\n}\n.product-item.product-item--loading .product__image {\n  position: relative;\n}\n.product-item.product-item--loading .product__image:before {\n  top: 0;\n  left: 0;\n  position: absolute;\n  width: 100%;\n  height: 250px;\n}\n.product-item.product-item--loading .product__description h3:before {\n  height: 20px;\n  width: 80%;\n}\n.product-item.product-item--loading .product__price h4 {\n  width: 40%;\n}\n.product-item.product-item--loading .product__price h4:before {\n  height: 18px;\n  width: 100%;\n}\n.product-item .product__image {\n  height: 165px;\n  background-color: #fafafa;\n  margin-bottom: 20px;\n  position: relative;\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n}\n@media (min-width: 767px) {\n  .product-item .product__image {\n    margin-bottom: 5px;\n  }\n}\n.product-item .product__image > a {\n  height: 165px;\n  width: 100%;\n  display: block;\n  padding: 18px;\n}\n@media (min-width: 767px) {\n  .product-item .product__image > a {\n    padding: 24px;\n  }\n}\n.product-item .product__image .btn-heart {\n  top: 10px;\n  right: 12px;\n  z-index: 10;\n  width: 32px;\n  font-size: 12px;\n  border: none;\n  height: 32px;\n  background-color: #fff;\n  position: absolute;\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.16);\n}\n@media (min-width: 767px) {\n  .product-item .product__image .btn-heart {\n    height: 38px;\n    width: 38px;\n    top: 6px;\n    right: 10px;\n    font-size: 14px;\n  }\n}\n.product-item .product__image .btn-heart:hover, .product-item .product__image .btn-heart.btn-heart--active {\n  color: #ffffff;\n  background-color: #218ab6;\n}\n.product-item .product__image img {\n  top: 0;\n  left: 0;\n  z-index: 5;\n  width: 100%;\n  height: 165px;\n  -o-object-position: top center;\n     object-position: top center;\n  -o-object-fit: cover;\n     object-fit: cover;\n  position: absolute;\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n}\n.product-item .product__image .product__discount {\n  color: #fff;\n  padding: 5px 9px;\n  border-radius: 4px;\n  font-weight: 500;\n  font-size: 12px;\n  z-index: 10;\n  position: relative;\n  background-color: #218ab6;\n  top: -13px;\n  left: -13px;\n}\n.product-item .product__description .btn-hm-add {\n  padding: 8px 15px;\n  background-color: #218ab6;\n  color: #ffffff;\n  border-radius: 30px;\n}\n.product-item .product__description h3 {\n  margin-bottom: 9px;\n  font-weight: 300;\n  font-size: 13px;\n  cursor: pointer;\n}\n@media (min-width: 767px) {\n  .product-item .product__description h3 {\n    font-size: 16px;\n  }\n}\n.product-item .product__description .product__price {\n  display: flex;\n}\n.product-item .product__description .product__price h4 {\n  font-weight: 400;\n  font-size: 15px;\n}\n@media (min-width: 767px) {\n  .product-item .product__description .product__price h4 {\n    font-size: 18px;\n  }\n}\n.product-item .product__description .product__price span {\n  color: #cecece;\n  margin-left: 10px;\n  font-size: 15px;\n}\n@media (min-width: 767px) {\n  .product-item .product__description .product__price span {\n    font-size: 14px;\n    margin-left: 10px;\n  }\n}\n.product-item .product__description .product__price.product__price--discount h4 {\n  color: #218ab6;\n}\n\n.view-details {\n  position: absolute;\n  top: 24%;\n  right: 25%;\n  z-index: 100;\n  padding: 12px;\n  background: #218ab6;\n  color: #fff;\n  border-radius: 30px;\n  font-size: 14px;\n  font-weight: 400;\n  display: none;\n}\n\n.hover-details {\n  position: absolute;\n  z-index: 100;\n  padding: 12px;\n  background: #218ab6;\n  color: #fff;\n  font-size: 14px;\n  font-weight: 400;\n  left: 20%;\n  top: 33%;\n  border-radius: 30px;\n  transition: all ease-in-out 600ms;\n  display: none;\n}\n\n.brandslider {\n  text-align: center;\n}\n.brandslider .brand-list {\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n.brandslider .brand-list li {\n  display: flex;\n  flex-basis: calc(20% - 14px);\n  justify-content: center;\n  flex-direction: column;\n  margin: 10px 0 10px 10px;\n  position: relative;\n}\n.brandslider .brand-list li:hover .hover-details {\n  display: block;\n}\n\n.brand-link h2 {\n  padding: 15px 0px;\n  text-transform: capitalize;\n  font-size: 16px;\n  font-weight: 600;\n}\n.brand-link img {\n  width: 100%;\n}\n\n.product-item {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n}\n\n.section-products-featured .section-products-featured__header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n@media (min-width: 767px) {\n  .section-products-featured .section-products-featured__header {\n    margin-bottom: 45px;\n    border-bottom: 1px solid #e2e8f0;\n  }\n}\n.section-products-featured .section-products-featured__header h3 {\n  font-weight: 600;\n  font-size: 18px;\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 20px;\n}\n@media (min-width: 767px) {\n  .section-products-featured .section-products-featured__header h3 {\n    font-size: 22px;\n  }\n}\n.section-products-featured .products-carousel .swiper-container {\n  overflow: hidden;\n}\n.section-products-featured .products-carousel .swiper-container .swiper-wrapper {\n  position: relative;\n}\n.section-products-featured .products-carousel .swiper-container .swiper-wrapper .swiper-slide,\n.section-products-featured .products-carousel .swiper-container .swiper-wrapper .swiper-slide-active,\n.section-products-featured .products-carousel .swiper-container .swiper-wrapper .swiper-slide-duplicate {\n  width: 240px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  cursor: pointer !important;\n}\n\n.swiper-slide {\n  cursor: pointer !important;\n}\n\n.section-products-featured {\n  margin: 40px 0px;\n  padding: 30px 20px;\n  background: #ffffff;\n  border-radius: 10px;\n}\n\n.saveTime-Wrap {\n  padding: 0px 0px 50px 0px;\n}\n.saveTime-Wrap .saveTime img {\n  width: 100%;\n  height: 500px;\n}\n\n.PromotionBanner {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 50px;\n}\n.PromotionBanner img {\n  transition: all 0.2s ease-in-out;\n}\n.PromotionBanner img:hover {\n  /* Safari and Chrome */\n  /* Firefox */\n  /* IE 9 */\n  /* Opera */\n  transform: scale(1.07);\n}\n.PromotionBanner .PromotionLeft {\n  margin: 0px 20px;\n  overflow: hidden;\n  cursor: pointer;\n}\n.PromotionBanner .PromotionLeft img {\n  height: 580px;\n}\n.PromotionBanner .Promo-Banner-List {\n  display: grid;\n  grid-template-columns: auto;\n  grid-column-gap: 10px;\n  -moz-column-gap: 10px;\n       column-gap: 10px;\n  grid-row-gap: 1em;\n  row-gap: 1em;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.Achive-wrap {\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n.Achive-wrap .Achive-header {\n  margin-bottom: 45px;\n  border-bottom: 1px solid #ebebeb;\n}\n.Achive-wrap .Achive-header h2 {\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 15px;\n  font-size: 29px;\n  width: 400px;\n}\n.Achive-wrap .Achive-list {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n.Achive-wrap .Achive-list li {\n  transition: all ease-in-out 600ms;\n  border: 2px solid #eeeeee;\n  border-radius: 8px;\n  padding: 10px;\n  text-align: center;\n  width: 16%;\n  cursor: pointer;\n}\n.Achive-wrap .Achive-list li p {\n  padding-bottom: 20px;\n}\n.Achive-wrap .Achive-list li p svg {\n  width: 50px;\n  height: 50px;\n  stroke: #218ab6;\n  transition: all ease-in-out 600ms;\n}\n.Achive-wrap .Achive-list li p i {\n  color: #218ab6;\n  transition: all ease-in-out 600ms;\n  font-size: 50px;\n}\n.Achive-wrap .Achive-list li span {\n  transition: all ease-in-out 600ms;\n  font-size: 30px;\n  font-weight: 500;\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li h3 {\n  transition: all ease-in-out 600ms;\n  font-size: 18px;\n  font-weight: 600;\n  padding-top: 20px;\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover svg {\n  stroke: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover i {\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover span {\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover h3 {\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover {\n  border: 2px solid #218ab6;\n  color: #218ab6;\n}\n\n.swiper-slide {\n  background-size: cover !important;\n}\n\n.Info-list {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.Info-list .card {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-width: 0;\n  word-wrap: break-word;\n  background-color: white;\n  background-clip: border-box;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.25rem;\n  margin-bottom: 15px;\n}\n.Info-list .card button {\n  font-size: 14px;\n  padding: 15px 20px;\n}\n.Info-list .card .card-body {\n  padding: 15px 20px;\n}\n\n.collapse:not(.show) {\n  display: none;\n}\n\n.How-works {\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n.How-works .How-works-header {\n  border-bottom: 1px solid #ebebeb;\n}\n.How-works .How-works-header h2 {\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 15px;\n  width: 200px;\n  font-size: 29px;\n  text-transform: capitalize;\n  padding-bottom: 20px;\n}\n.How-works .How-works-header p {\n  font-size: 16px;\n  line-height: 28px;\n  padding-top: 30px;\n  color: #3cce8f;\n}\n.How-works .How-works-body {\n  padding-top: 20px;\n}\n.How-works .How-works-body img {\n  width: 100%;\n  height: 100%;\n}\n.How-works .How-works-body p {\n  color: #4c8000;\n  line-height: 24px;\n  padding-bottom: 30px;\n}\n\n.InfoSections-Wrap {\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n\n.InfoSections-Wrap .Info-item {\n  width: 33%;\n}\n.InfoSections-Wrap .Info-item img {\n  width: 100%;\n  height: 340px;\n}\n.InfoSections-Wrap .InfoSections-header {\n  border-bottom: 1px solid #ebebeb;\n  margin-bottom: 65px;\n}\n.InfoSections-Wrap .InfoSections-header h2 {\n  font-size: 29px;\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 20px;\n  max-width: 350px;\n}\n\n.OurCustomerSay {\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n.OurCustomerSay .heading {\n  border-bottom: 1px solid #ebebeb;\n  margin-bottom: 65px;\n}\n.OurCustomerSay .heading h2 {\n  font-size: 29px;\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 15px;\n  width: 600px;\n}\n.OurCustomerSay .Testimonial-slide {\n  text-align: center;\n}\n.OurCustomerSay .Testimonial-slide .swiper-slide {\n  padding: 0px 200px;\n}\n.OurCustomerSay .Testimonial-slide .swiper-slide img {\n  width: 150px;\n  height: 150px;\n  border: 1px solid;\n  border-radius: 100%;\n}\n.OurCustomerSay .Testimonial-slide .swiper-slide h3 {\n  font-size: 16px;\n  padding: 10px 0px;\n}\n.OurCustomerSay .Testimonial-slide .swiper-slide p {\n  font-size: 14px;\n  line-height: 22px;\n}\n.OurCustomerSay .Testimonial-slide .swiper-button-prev,\n.OurCustomerSay .Testimonial-slide .swiper-button-next {\n  bottom: 20px;\n  top: 50%;\n  transform: translateX(50%);\n  right: auto;\n  width: 30px;\n  height: 30px;\n  z-index: 100;\n  font-size: 13px;\n  display: flex;\n  cursor: pointer;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  display: none;\n  background-color: rgba(255, 255, 255, 0.12);\n  border-radius: 100%;\n}\n.OurCustomerSay .Testimonial-slide .swiper-button-prev:before,\n.OurCustomerSay .Testimonial-slide .swiper-button-next:before {\n  color: #fff;\n  content: \"\";\n  font-family: \"icons\";\n}\n.OurCustomerSay .Testimonial-slide .swiper-button-prev:hover,\n.OurCustomerSay .Testimonial-slide .swiper-button-next:hover {\n  background: #fff;\n}\n.OurCustomerSay .Testimonial-slide .swiper-button-prev:hover:before,\n.OurCustomerSay .Testimonial-slide .swiper-button-next:hover:before {\n  color: #000;\n}\n\n.subscribe {\n  margin-bottom: 30px;\n}\n.subscribe .subscribe__content {\n  padding: 35px 20px;\n  background-color: #fafafa;\n  background-repeat: no-repeat;\n  background-size: cover;\n  position: relative;\n  background-position: center;\n}\n@media (min-width: 767px) {\n  .subscribe .subscribe__content {\n    padding: 40px 60px 40px 60px;\n  }\n}\n@media (min-width: 1024px) {\n  .subscribe .subscribe__content {\n    padding: 80px 125px 80px 105px;\n    display: flex;\n    align-items: center;\n  }\n}\n.subscribe .subscribe__content:before {\n  content: \"\";\n  width: 100%;\n  left: 0;\n  top: 0;\n  z-index: 5;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.subscribe .subscribe__content * {\n  z-index: 10;\n  position: relative;\n}\n.subscribe .subscribe__content h4 {\n  font-size: 18px;\n  color: #fff;\n  margin-bottom: 20px;\n  line-height: 130%;\n  margin-right: auto;\n}\n@media (min-width: 767px) {\n  .subscribe .subscribe__content h4 {\n    font-size: 23px;\n  }\n}\n@media (min-width: 1024px) {\n  .subscribe .subscribe__content h4 {\n    width: 504px;\n    font-size: 26px;\n    margin-bottom: 0;\n  }\n}\n.subscribe .subscribe__content .subscribe__form input {\n  width: 100%;\n  height: 40px;\n  padding: 0 25px;\n  color: #ababab;\n  font-size: 13px;\n  background-color: #fff;\n  border-radius: 30px;\n  margin-right: 25px;\n}\n@media (min-width: 767px) {\n  .subscribe .subscribe__content .subscribe__form input {\n    width: auto;\n    height: 48px;\n    padding: 0 35px;\n  }\n}\n.subscribe .subscribe__content .subscribe__form .btn {\n  margin-top: 10px;\n  font-size: 11px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n@media (min-width: 767px) {\n  .subscribe .subscribe__content .subscribe__form .btn {\n    padding: 11px 20px;\n    font-size: 13px;\n    margin-top: 0;\n  }\n}\n\n.ckSection .section__intro {\n  margin-bottom: 36px;\n}\n.ckSection .section__intro h4 {\n  font-size: 23px;\n  font-weight: 300;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .ckSection .section__intro h4 {\n    font-size: 29px;\n  }\n}\n\n.mobileApp .androApp {\n  margin-top: 10px;\n}\n.mobileApp .appleApp {\n  padding: 15px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.mobileApp .appleApp .appleApp-logo {\n  padding-right: 20px;\n}\n.mobileApp .appleApp .appleApp-logo img {\n  width: 40px;\n}\n.mobileApp .appleApp .appleInfo p {\n  font-size: 14px;\n  font-weight: 500;\n  padding-bottom: 15px;\n  color: #ffffff;\n  text-transform: capitalize;\n}\n.mobileApp .appleApp .appleInfo h4 {\n  font-size: 16px;\n  font-weight: 500;\n  color: #ffffff;\n  text-transform: capitalize;\n}\n\n.footer-form {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.footer-form input,\n.footer-form textarea {\n  border: 1px solid #ebebeb;\n  padding: 8px;\n  width: 100%;\n  margin-bottom: 10px;\n  color: #131313;\n  background: #f2f3f8;\n  border-radius: 4px;\n}\n.footer-form button {\n  border: 0;\n  background: #218ab6;\n  border-radius: 30px;\n  color: #fff;\n  padding: 12px 30px;\n  text-transform: uppercase;\n}\n\n.f-info {\n  padding-top: 15px;\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  color: #f2f3f8;\n}\n.f-info li {\n  list-style: none;\n}\n.f-info li svg {\n  stroke: #4c8000;\n}\n.f-info h1 {\n  color: #f2f3f8;\n  font-size: 14px;\n}\n.f-info a {\n  font-size: 14px;\n}\n\n.site-footer {\n  padding-top: 50px;\n  background: #1a202c;\n}\n@media (min-width: 767px) {\n  .site-footer {\n    padding-top: 90px;\n  }\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__top {\n    display: flex;\n    flex-wrap: wrap;\n    padding-bottom: 60px;\n  }\n}\n@media (min-width: 1024px) {\n  .site-footer .site-footer__top {\n    flex-wrap: nowrap;\n  }\n}\n.site-footer .site-footer__description {\n  margin-right: auto;\n  margin-bottom: 70px;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__description {\n    width: 400px;\n    margin-bottom: 50px;\n  }\n}\n@media (min-width: 1024px) {\n  .site-footer .site-footer__description {\n    margin-bottom: 0;\n  }\n}\n.site-footer .site-footer__description svg {\n  -o-object-fit: contain;\n     object-fit: contain;\n  width: 30px;\n  height: 20px;\n  fill: white;\n  margin-right: 10px;\n}\n.site-footer .site-footer__description h6 {\n  display: flex;\n  color: #218ab6;\n  font-weight: 600;\n  align-items: center;\n  margin-bottom: 33px;\n  font-size: 18px;\n}\n.site-footer .site-footer__description p {\n  font-size: 13px;\n  line-height: 190%;\n}\n.site-footer .site-footer__social-networks {\n  display: flex;\n  margin-top: 20px;\n}\n.site-footer .site-footer__social-networks li {\n  font-size: 21px;\n  margin-right: 20px;\n}\n.site-footer .site-footer__social-networks li .footer-icon1 {\n  color: #3b5998;\n}\n.site-footer .site-footer__social-networks li .footer-icon2 {\n  color: #00acee;\n}\n.site-footer .site-footer__social-networks li .footer-icon3 {\n  color: #0e76a8;\n}\n.site-footer .site-footer__social-networks li .footer-icon4 {\n  color: #8a3ab9;\n}\n.site-footer .site-footer__social-networks li .footer-icon5 {\n  color: #ff0000;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__links {\n    display: flex;\n    width: 100%;\n  }\n}\n@media (min-width: 1024px) {\n  .site-footer .site-footer__links {\n    width: auto;\n  }\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__links ul {\n    margin-right: 50px;\n    margin-bottom: 0;\n  }\n}\n@media (min-width: 1024px) {\n  .site-footer .site-footer__links ul {\n    margin-right: 50px;\n  }\n}\n.site-footer .site-footer__links ul:last-of-type {\n  margin-right: 0;\n}\n.site-footer .site-footer__links ul .f-heading {\n  font-size: 16px;\n  font-weight: 600;\n  color: #218ab6;\n}\n.site-footer .site-footer__links ul li a {\n  font-size: 14px;\n  color: #fff;\n  margin-bottom: 12px;\n  font-weight: 300;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__links ul li {\n    margin-bottom: 15px;\n  }\n}\n.site-footer .site-footer__links ul li:first-child {\n  font-weight: 600;\n  margin-bottom: 26px;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__links ul li:first-child {\n    margin-bottom: 34px;\n  }\n}\n.site-footer .site-footer__links ul li a:hover {\n  text-decoration: underline;\n}\n.site-footer .site-footer__bottom {\n  padding: 20px 0;\n  border-top: 1px solid #ebebeb;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__bottom {\n    padding: 33px 0;\n  }\n}\n.site-footer .site-footer__bottom .container {\n  font-size: 11px;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__bottom .container {\n    font-size: 16px;\n  }\n}\n\n.campaings-link img {\n  width: 100%;\n}\n\n.reg-log-role {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n.reg-log-role .cus,\n.reg-log-role .ser {\n  background: #000;\n  height: 50px;\n  width: 250px;\n  color: #ffffff;\n}\n.reg-log-role .cus:hover,\n.reg-log-role .ser:hover {\n  background: #4c8000;\n}\n.reg-log-role .or {\n  background: #000;\n  height: 50px;\n  width: 60px;\n  color: #ffffff;\n  border-left: 2px solid #4c8000;\n  border-right: 2px solid #4c8000;\n}\n.reg-log-role .or:hover {\n  background: #4c8000;\n}\n\n.shop-data {\n  display: flex;\n  justify-content: space-between;\n  margin-left: 282px;\n  margin-top: 10px;\n  margin-bottom: 50px;\n  cursor: pointer;\n}\n@media (min-width: 767px) {\n  .shop-data {\n    display: flex;\n    justify-content: space-between;\n  }\n}\n.shop-data li {\n  text-align: center;\n  margin-bottom: 50px;\n  background: #fff;\n  padding: 10px;\n  border-radius: 10px;\n}\n@media (min-width: 767px) {\n  .shop-data li {\n    width: 19.5%;\n    margin-bottom: 0;\n    text-align: left;\n  }\n}\n.shop-data li i {\n  height: 55px;\n  width: 55px;\n  font-size: 20px;\n  flex-shrink: 0;\n  display: flex;\n  color: #4c8000;\n  border-radius: 10px;\n  transition: all 0.3s ease;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 6px;\n  margin-left: auto;\n  margin-right: auto;\n}\n@media (min-width: 767px) {\n  .shop-data li i {\n    margin-bottom: 5px;\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n.shop-data li .data-item__content h4 {\n  margin-bottom: 10px;\n}\n.shop-data li .data-item__content p {\n  font-size: 13px;\n  line-height: 150%;\n}\n.shop-data li:hover i {\n  color: #4c8000;\n  background: var(--color-orange-light);\n}\n\n.checkbox-color-wrapper {\n  display: flex;\n  position: relative;\n}\n.checkbox-color-wrapper .checkbox-color {\n  width: calc(100% / 6);\n}\n\n.checkbox-color {\n  font-weight: 300;\n  font-size: 14px;\n  display: flex;\n  color: #000;\n  margin-bottom: 18px;\n  align-items: center;\n}\n.checkbox-color .checkbox__check {\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 100%;\n  border-top: 1px solid #d4d4d4;\n  border-bottom: 1px solid #d4d4d4;\n  border-right: 1px solid #d4d4d4;\n}\n.checkbox-color .checkbox__check .checkbox__color {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  right: 8px;\n  bottom: 8px;\n}\n.checkbox-color:first-of-type .checkbox__check {\n  border-left: 1px solid #d4d4d4;\n}\n.checkbox-color input {\n  height: 0;\n  width: 0;\n  display: none;\n  overflow: hidden;\n}\n.checkbox-color input:checked + .checkbox__check {\n  background-color: #dbdbdb;\n}\n\n@media (min-width: 767px) {\n  .products-page .container {\n    display: flex;\n    align-items: flex-start;\n  }\n}\n.products-page .products-filter .btn-submit {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 150px;\n  margin-top: 20px;\n  margin-bottom: 30px;\n}\n@media (min-width: 767px) {\n  .products-page .products-filter .btn-submit {\n    display: none;\n  }\n}\n.products-page .products-filter .products-filter__wrapper {\n  width: 300px;\n  left: -300px;\n  top: 101px;\n  overflow: auto;\n  height: calc(100% - 101px);\n  flex-shrink: 0;\n  position: fixed;\n  z-index: 99;\n  padding: 20px 20px;\n  background-color: #fff;\n  transition: all 0.4s ease;\n}\n@media (min-width: 767px) {\n  .products-page .products-filter .products-filter__wrapper {\n    top: 134px;\n  }\n}\n@media (min-width: 1024px) {\n  .products-page .products-filter .products-filter__wrapper {\n    position: relative;\n    left: 0;\n    top: 0;\n    padding: 0;\n    height: auto;\n    margin-right: 20px;\n    width: 220px;\n  }\n}\n@media (min-width: 1202px) {\n  .products-page .products-filter .products-filter__wrapper {\n    width: 260px;\n    top: 0;\n    margin-right: 20px;\n  }\n}\n.products-page .products-filter .products-filter__wrapper.products-filter__wrapper--open {\n  left: 0;\n}\n.products-page .products-filter .products-filter__menu-btn {\n  margin-bottom: 20px;\n  top: 65px;\n  width: 100%;\n  left: 0;\n  right: 0;\n  padding: 8px 16px;\n  z-index: 100;\n  font-size: 12px;\n  background-color: #fff;\n  border-bottom: 1px solid #e6e6e6;\n}\n@media (min-width: 767px) {\n  .products-page .products-filter .products-filter__menu-btn {\n    top: 100px;\n  }\n}\n@media (min-width: 1024px) {\n  .products-page .products-filter .products-filter__menu-btn {\n    display: none;\n  }\n}\n.products-page .products-filter .products-filter__menu-btn i {\n  display: inline-block;\n  transition: all 0.3s ease;\n  transform: rotate(270deg);\n}\n.products-page .products-filter .products-filter__menu-btn.products-filter__menu-btn--active i {\n  transform: rotate(90deg);\n}\n.products-page .products-filter .products-filter__block {\n  padding: 20px 21px;\n  margin-bottom: 13px;\n  border: 1px solid #e6e6e6;\n}\n@media (min-width: 1024px) {\n  .products-page .products-filter .products-filter__block {\n    padding: 24px 31px;\n  }\n}\n.products-page .products-filter .products-filter__block > button {\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n  width: 100%;\n  text-transform: uppercase;\n}\n.products-page .products-filter .products-filter__block > button i {\n  font-size: 21px;\n  margin-left: auto;\n}\n.products-page .products-filter .rc-slider .rc-slider-handle {\n  height: 20px;\n  width: 20px;\n  margin-top: -7px;\n  border-color: #000;\n}\n.products-page .products-filter .rc-slider .rc-slider-handle.rc-slider-handle-dragging {\n  box-shadow: none;\n}\n.products-page .products-filter .rc-slider .rc-slider-track {\n  background: #000000;\n}\n.products-page .products-filter .products-filter__block__content {\n  padding-top: 25px;\n}\n.products-page .products-content {\n  width: 100%;\n}\n.products-page .products-content .products-content__intro {\n  display: flex;\n  position: relative;\n  align-items: center;\n  margin-bottom: 35px;\n  flex-wrap: wrap;\n  background: #fff;\n  padding: 10px;\n  border-radius: 4px;\n}\n.products-page .products-content .products-content__intro h2 {\n  font-size: 18px;\n  margin-right: auto;\n  font-weight: 300;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro h2 {\n    font-size: 24px;\n  }\n}\n.products-page .products-content .products-content__intro h2 span {\n  color: #d8d8d8;\n}\n.products-page .products-content .products-content__intro .products-filter-btn {\n  font-size: 16px;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-filter-btn {\n    display: none;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter {\n  position: absolute;\n  width: 290px;\n  padding: 20px;\n  top: 150%;\n  right: 0;\n  display: none;\n  z-index: 50;\n  border: 1px solid #e5e5e5;\n  background-color: #fff;\n}\n.products-page .products-content .products-content__intro .products-content__filter.products-order-open {\n  display: block;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter {\n    display: flex;\n    width: 100%;\n    padding: 0;\n    border: none;\n    position: static;\n    margin-top: 30px;\n  }\n}\n@media (min-width: 1024px) {\n  .products-page .products-content .products-content__intro .products-content__filter {\n    width: auto;\n    margin-top: 0;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select:last-of-type {\n  margin-bottom: 0;\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select:first-of-type {\n  margin-left: 0;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter .products__filter__select {\n    margin-left: 42px;\n    margin-bottom: 0;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select h4 {\n  font-size: 13px;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter .products__filter__select h4 {\n    font-size: 16px;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select .select-wrapper {\n  margin-left: auto;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter .products__filter__select .select-wrapper {\n    margin-left: 15px;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select .select-wrapper select {\n  font-size: 13px;\n  padding: 6px 25px 6px 8px;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter .products__filter__select .select-wrapper select {\n    padding: 9px 38px 9px 12px;\n    font-size: 15px;\n  }\n}\n\n.checkbox {\n  font-weight: 300;\n  font-size: 14px;\n  display: flex;\n  color: #000;\n  margin-bottom: 18px;\n  align-items: center;\n}\n.checkbox .checkbox__check {\n  display: block;\n  width: 26px;\n  height: 26px;\n  flex-shrink: 0;\n  position: relative;\n  margin-right: 18px;\n  border: 1px solid #d4d4d4;\n}\n.checkbox .checkbox__check:before {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 4px;\n  left: 9px;\n  opacity: 0;\n  width: 7px;\n  height: 12.5px;\n  transform: scale(1) rotate(45deg);\n  z-index: 100;\n  border: 1px solid black;\n  transition: all 0.2s linear;\n  border-width: 0 2px 2px 0;\n}\n.checkbox input:checked + .checkbox__check:before {\n  opacity: 1;\n}\n.checkbox.checkbox--square {\n  position: relative;\n  width: calc(100% / 6);\n}\n.checkbox.checkbox--square input:checked + .checkbox__check {\n  background-color: #000;\n  border-color: #000;\n}\n.checkbox.checkbox--square input:checked + .checkbox__check:before {\n  opacity: 0;\n}\n.checkbox.checkbox--square input:checked ~ p {\n  color: #fff;\n}\n.checkbox.checkbox--square input {\n  display: none;\n}\n.checkbox.checkbox--square p {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n.checkbox.checkbox--square .checkbox__check {\n  display: block;\n  width: 100%;\n  margin-right: 0;\n  position: relative;\n  padding-bottom: 100%;\n  border-left: none;\n  border-top: 1px solid #d4d4d4;\n  border-bottom: 1px solid #d4d4d4;\n  border-right: 1px solid #d4d4d4;\n}\n.checkbox.checkbox--square .checkbox__check .checkbox__color {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  right: 8px;\n  bottom: 8px;\n}\n.checkbox.checkbox--square:first-of-type .checkbox__check {\n  border-left: 1px solid #d4d4d4;\n}\n\n.checkbox-square-wrapper {\n  display: flex;\n}\n.products-list {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -15px;\n}\n@media (min-width: 767px) {\n  .products-list {\n    margin-right: -33px;\n  }\n}\n@media (min-width: 1024px) {\n  .products-list {\n    margin-right: 0;\n  }\n}\n.products-list .product-item {\n  width: calc(100% / 2 - 15px);\n  margin-bottom: 50px;\n  margin-right: 15px;\n}\n@media (min-width: 767px) {\n  .products-list .product-item {\n    margin-right: 25px;\n    margin-bottom: 40px;\n    width: calc(100% / 4 - 25px);\n  }\n}\n@media (min-width: 1024px) {\n  .products-list .product-item {\n    margin-right: 25px;\n    margin-bottom: 40px;\n    width: calc(100% / 4 - 25px);\n  }\n}\n\n.select-wrapper {\n  position: relative;\n}\n.select-wrapper:before {\n  right: 15px;\n  font-family: \"icons\";\n  display: block;\n  position: absolute;\n  content: \"\";\n  top: 50%;\n  color: #aaaaaa;\n  font-size: 16px;\n  transform: translateY(-50%);\n}\n.select-wrapper select {\n  font-size: 15px;\n  padding: 9px 38px 9px 12px;\n  border: 1px solid #d8d8d8;\n  border-radius: 50px;\n}\n.select-wrapper select option {\n  font-size: 15px;\n}\n.select-wrapper.select-form select {\n  width: 100%;\n}\n\n.quantity-buttons {\n  display: flex;\n  align-items: center;\n}\n.quantity-buttons .btn {\n  margin: 0 17px;\n}\n\n.quantity-button {\n  border-radius: 50px;\n  height: 38px;\n  padding: 0 20px;\n  display: inline-flex;\n  align-items: center;\n  border: 1px solid #d8d8d8;\n}\n@media (min-width: 767px) {\n  .quantity-button {\n    height: 49px;\n  }\n}\n.quantity-button .quantity-button__btn {\n  font-size: 23px;\n  font-weight: 400;\n}\n.quantity-button span {\n  font-size: 18px;\n  color: #000;\n  margin: 0 18px;\n  font-weight: 700;\n}\n\n.btn-heart {\n  border-radius: 100%;\n  width: 49px;\n  height: 49px;\n  display: flex;\n  font-size: 16px;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #d8d8d8;\n}\n.btn-heart:hover, .btn-heart.btn-heart--active {\n  color: #ffffff;\n  background-color: #4c8000;\n}\n\n.product-single-page .section {\n  margin-bottom: 90;\n}\n\n.product-single {\n  margin-bottom: 70px;\n}\n@media (min-width: 767px) {\n  .product-single {\n    margin-bottom: 170px;\n  }\n}\n.product-single .product-single__description {\n  max-width: 938px;\n  margin: 0 auto;\n  flex-wrap: wrap;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description {\n    display: flex;\n    justify-content: space-between;\n  }\n}\n.product-single .product-single__description .product-description-block {\n  text-align: center;\n  width: 100%;\n  margin-bottom: 60px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description .product-description-block {\n    width: 48%;\n    margin-bottom: 0;\n  }\n}\n.product-single .product-single__description .product-description-block i {\n  display: block;\n  font-size: 30px;\n  margin-bottom: 30px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description .product-description-block i {\n    font-size: 38px;\n    margin-bottom: 48px;\n  }\n}\n.product-single .product-single__description .product-description-block h4 {\n  color: #000;\n  font-weight: 700;\n  font-size: 15px;\n  margin-bottom: 25px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description .product-description-block h4 {\n    margin-bottom: 35px;\n    font-size: 16px;\n  }\n}\n.product-single .product-single__description .product-description-block p {\n  color: #000;\n  font-size: 13px;\n  line-height: 145%;\n  text-align: left;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description .product-description-block p {\n    font-size: 14px;\n  }\n}\n.product-single .product-single__content {\n  margin-bottom: 50px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__content {\n    display: flex;\n    align-items: flex-start;\n    margin-bottom: 100px;\n  }\n}\n@media (min-width: 767px) {\n  .product-single .product-gallery {\n    margin-right: 110px;\n  }\n}\n.product-single .product-gallery .product-gallery__thumbs {\n  height: 300px;\n}\n@media (min-width: 767px) {\n  .product-single .product-gallery .product-gallery__thumbs {\n    height: 491px;\n  }\n}\n@media (min-width: 767px) {\n  .product-single .product-gallery .product-gallery__thumb {\n    height: calc(100% / 5 - 15px);\n  }\n}\n.product-single .product-content {\n  flex: 1 1;\n}\n.product-single .product-single__reviews {\n  display: flex;\n  align-items: flex-start;\n  flex-wrap: wrap;\n}\n.product-single .product-single__reviews .reviews-list {\n  width: 100%;\n  margin-left: auto;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__reviews .reviews-list {\n    width: 48%;\n  }\n}\n.product-single .product-single__info .product-single__info-btns {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 90px;\n}\n.product-single .product-single__info .product-single__info-btns .btn {\n  margin: 0 15px;\n  padding: 8px 22px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__info .product-single__info-btns .btn {\n    padding: 12px 28px;\n  }\n}\n.product-single .product-single__info .product-single__info-btns .btn.btn--active {\n  border: 1px solid var(--color-orange);\n}\n\n.product-content {\n  position: relative;\n}\n.product-content .product-content__intro {\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .product-content .product-content__intro {\n    margin-bottom: 60px;\n  }\n}\n.product-content .product-filter-item {\n  margin-bottom: 38px;\n}\n.product-content .product-filter-item:last-of-type {\n  margin-bottom: 0;\n}\n.product-content .product-filter-item h5 {\n  font-weight: 300;\n  font-size: 13px;\n  margin-bottom: 19px;\n}\n.product-content .product-filter-item h5 strong {\n  font-weight: 700;\n}\n.product-content .product-filter-item .checkbox-color-wrapper .checkbox-color {\n  width: 30px;\n  height: 30px;\n  margin-right: 8px;\n  border: none;\n}\n@media (min-width: 767px) {\n  .product-content .product-filter-item .checkbox-color-wrapper .checkbox-color {\n    width: 43px;\n    height: 43px;\n    margin-right: 13px;\n  }\n}\n.product-content .product-filter-item .checkbox-color-wrapper .checkbox-color .checkbox__check {\n  border: 1px solid #d4d4d4;\n}\n.product-content .product-filter-item .checkbox-color-wrapper .checkbox-color .checkbox__color {\n  top: 4px;\n  left: 4px;\n  right: 4px;\n  bottom: 4px;\n}\n@media (min-width: 767px) {\n  .product-content .product-filter-item .checkbox-color-wrapper .checkbox-color .checkbox__color {\n    top: 8px;\n    left: 8px;\n    right: 8px;\n    bottom: 8px;\n  }\n}\n.product-content .product__prices {\n  display: flex;\n}\n.product-content .product__prices h4 {\n  font-weight: 400;\n  color: #ff0000;\n  font-size: 18px;\n}\n@media (min-width: 767px) {\n  .product-content .product__prices h4 {\n    font-size: 30px;\n  }\n}\n.product-content .product__prices span {\n  margin-left: 30px;\n  font-weight: 400;\n  font-size: 18px;\n  color: #cecece;\n}\n@media (min-width: 767px) {\n  .product-content .product__prices span {\n    font-size: 30px;\n  }\n}\n.product-content .product__id {\n  top: -10px;\n  right: 0;\n  text-align: right;\n  line-height: 146%;\n  color: #cecece;\n  font-size: 12px;\n  position: absolute;\n}\n.product-content .product__name {\n  font-size: 20px;\n  font-weight: 300;\n  margin-bottom: 9px;\n}\n@media (min-width: 767px) {\n  .product-content .product__name {\n    font-size: 30px;\n    margin-bottom: 15px;\n  }\n}\n.product-content .product-on-sale {\n  background-color: #ff0000;\n  color: #fff;\n  font-size: 11px;\n  font-weight: 500;\n  padding: 5px 9px;\n  text-transform: uppercase;\n  border-radius: 40px;\n  margin-bottom: 15px;\n  display: inline-block;\n}\n@media (min-width: 767px) {\n  .product-content .product-on-sale {\n    font-size: 12px;\n    margin-bottom: 25px;\n  }\n}\n\n.product-gallery {\n  display: flex;\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .product-gallery {\n    margin-bottom: 0;\n  }\n}\n.product-gallery .product-gallery__thumbs {\n  display: none;\n}\n@media (min-width: 767px) {\n  .product-gallery .product-gallery__thumbs {\n    width: 97px;\n    display: block;\n    margin-right: 28px;\n  }\n}\n.product-gallery .product-gallery__thumb {\n  width: 100%;\n  height: 97px;\n  margin-bottom: 15px;\n}\n.product-gallery .product-gallery__thumb img {\n  width: 100%;\n  height: 100%;\n  -o-object-position: top center;\n     object-position: top center;\n  -o-object-fit: cover;\n     object-fit: cover;\n}\n.product-gallery .product-gallery__image {\n  height: 300px;\n  width: 100%;\n}\n@media (min-width: 767px) {\n  .product-gallery .product-gallery__image {\n    width: 476px;\n    height: 476px;\n  }\n}\n.product-gallery .product-gallery__image img {\n  width: 100%;\n  height: 100%;\n  -o-object-position: top center;\n     object-position: top center;\n  -o-object-fit: cover;\n     object-fit: cover;\n}\n\n.review-item {\n  display: flex;\n}\n.review-item .review__avatar {\n  width: 40px;\n  margin-right: 27px;\n  flex-shrink: 0;\n  background-color: gray;\n  border-radius: 100%;\n  height: 40px;\n}\n.review-item .review__avatar img {\n  border-radius: 100%;\n  -o-object-fit: cover;\n     object-fit: cover;\n  height: 100%;\n  width: 100%;\n}\n.review-item .review__content {\n  flex: 1 1;\n}\n.review-item .review__content h3 {\n  font-size: 13px;\n  font-weight: 700;\n  margin-bottom: 4px;\n}\n.review-item .review__content .review__comment {\n  font-size: 13px;\n  color: #000;\n  line-height: 155%;\n}\n.review-item .review__content .react-rater {\n  margin-bottom: 5px;\n}\n.review-item .review__content .react-rater .react-rater-star {\n  margin-right: 4px;\n  font-size: 21px;\n  line-height: 100%;\n}\n.review-item .review__content .react-rater .react-rater-star.is-active {\n  color: var(--color-orange);\n}\n\n.reviews-list .review-item {\n  margin-bottom: 35px;\n}\n.reviews-list .review-item:last-of-type {\n  margin-bottom: 0;\n}\n\n.product-punctuation {\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 50px;\n}\n@media (min-width: 767px) {\n  .product-punctuation {\n    display: flex;\n    justify-content: center;\n    margin-bottom: 0;\n    flex-wrap: wrap;\n  }\n}\n.product-punctuation .product-punctuation__values {\n  text-align: center;\n  margin-bottom: 25px;\n}\n@media (min-width: 767px) {\n  .product-punctuation .product-punctuation__values {\n    margin-bottom: 0;\n  }\n}\n.product-punctuation .product-punctuation__values h3 {\n  font-size: 59px;\n  font-weight: 700;\n  margin-bottom: 6px;\n}\n.product-punctuation .product-punctuation__values .react-rater {\n  margin-bottom: 9px;\n}\n.product-punctuation .product-punctuation__values .react-rater .react-rater-star {\n  margin-right: 4px;\n  font-size: 23px;\n  line-height: 100%;\n}\n.product-punctuation .product-punctuation__values .react-rater .react-rater-star.is-active {\n  color: var(--color-orange);\n}\n@media (min-width: 767px) {\n  .product-punctuation .product-punctuation__rates {\n    width: 200px;\n    margin-left: 68px;\n  }\n}\n.product-punctuation .punctuation-btn-wrapper {\n  width: 100%;\n  margin-top: 30px;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .product-punctuation .punctuation-btn-wrapper {\n    margin-top: 50px;\n  }\n}\n\n.punctuations-lists .punctuation-item {\n  display: flex;\n  align-items: center;\n}\n.punctuations-lists .punctuation-item .react-rater .react-rater-star.is-active {\n  color: var(--color-orange);\n}\n.punctuations-lists .punctuation-item > span {\n  font-size: 12px;\n  color: #000;\n  margin: 0 auto;\n}\n.punctuations-lists .punctuation-item .punctuation-item__bar {\n  height: 2px;\n  width: 142px;\n  margin-left: auto;\n  border-radius: 40px;\n  position: relative;\n  background-color: #dbdbdb;\n}\n.punctuations-lists .punctuation-item .punctuation-item__bar .punctuation-item__bar__current {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 50%;\n  z-index: 10;\n  background-color: var(--color-orange);\n}\n\n.checkout-steps {\n  display: flex;\n  align-items: center;\n}\n.checkout-steps li {\n  position: relative;\n  padding-right: 60px;\n}\n@media (min-width: 767px) {\n  .checkout-steps li {\n    padding-right: 105px;\n  }\n}\n.checkout-steps li.active i {\n  color: #fff;\n  background: var(--color-orange);\n}\n.checkout-steps li.done i {\n  color: var(--color-orange);\n  border: 1.3px solid var(--color-orange);\n}\n.checkout-steps li:before {\n  top: 50%;\n  right: 15px;\n  height: 1px;\n  left: 45px;\n  content: \"\";\n  display: block;\n  background: #eeeeee;\n  margin-top: -1px;\n  position: absolute;\n}\n.checkout-steps li i {\n  display: flex;\n  width: 36px;\n  height: 36px;\n  border-radius: 100%;\n  justify-content: center;\n  align-items: center;\n  color: #d8d8d8;\n  font-size: 16px;\n}\n.checkout-steps li i.icon-delivery {\n  font-size: 12px;\n}\n.checkout-steps li:last-of-type {\n  padding-right: 0;\n}\n.checkout-steps li:last-of-type:before {\n  content: none;\n}\n\n.wish-list {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  border: 1px solid #e2e8f0;\n  margin-bottom: 10px;\n}\n.wish-list img {\n  width: 100px;\n  height: 100px;\n}\n\n.cart {\n  padding: 52px 0;\n}\n.cart .cart__intro {\n  display: flex;\n  align-items: center;\n  margin-bottom: 35px;\n  justify-content: space-between;\n}\n@media (min-width: 767px) {\n  .cart .cart__intro {\n    margin-bottom: 66px;\n  }\n}\n.cart .cart__title {\n  font-size: 20px;\n  font-weight: 700;\n  line-height: 140%;\n}\n.cart .cart-actions {\n  margin-top: 75px;\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n.cart .cart-actions .btn {\n  margin-left: 20px;\n}\n.cart .cart-actions .cart-actions__items-wrapper {\n  display: flex;\n  width: 100%;\n  align-items: center;\n}\n@media (min-width: 767px) {\n  .cart .cart-actions .cart-actions__items-wrapper {\n    margin-top: 30px;\n  }\n}\n@media (min-width: 1024px) {\n  .cart .cart-actions .cart-actions__items-wrapper {\n    width: auto;\n    margin-top: 0;\n  }\n}\n.cart .cart-actions.cart-actions--checkout {\n  display: flex;\n  flex-direction: column-reverse;\n}\n@media (min-width: 767px) {\n  .cart .cart-actions.cart-actions--checkout {\n    flex-direction: row;\n  }\n}\n.cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper {\n  margin-bottom: 30px;\n  justify-content: space-between;\n}\n@media (min-width: 767px) {\n  .cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper {\n    width: auto;\n    justify-content: flex-start;\n  }\n}\n.cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper .btn {\n  padding: 9px 13px;\n  font-size: 10px;\n  margin-left: 0;\n}\n@media (min-width: 767px) {\n  .cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper .btn {\n    font-size: 12px;\n    padding: 11px 20px;\n  }\n}\n.cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper .btn:first-of-type {\n  margin-right: 10px;\n}\n.cart .icon-cancel {\n  font-size: 13px;\n}\n.cart .cart__btn-back {\n  font-weight: 700;\n  font-size: 14px;\n  color: #000;\n  margin-right: auto;\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .cart .cart__btn-back {\n    margin-bottom: 0;\n  }\n}\n.cart .cart__btn-back i {\n  margin-right: 15px;\n}\n.cart .cart__promo-code {\n  padding: 0 20px;\n  font-size: 13px;\n  height: 40px;\n  width: 100%;\n  margin-bottom: 18px;\n  border: 1px solid #d8d8d8;\n  border-radius: 30px;\n}\n@media (min-width: 767px) {\n  .cart .cart__promo-code {\n    height: 49px;\n    width: auto;\n    margin-bottom: 0;\n    margin-right: 0;\n  }\n}\n@media (min-width: 1024px) {\n  .cart .cart__promo-code {\n    margin-right: 70px;\n  }\n}\n.cart .cart__promo-code::-webkit-input-placeholder {\n  color: #ababab;\n}\n.cart .cart__promo-code:-moz-placeholder {\n  /* Firefox 18- */\n  color: #ababab;\n}\n.cart .cart__promo-code::-moz-placeholder {\n  /* Firefox 19+ */\n  color: #ababab;\n}\n.cart .cart__promo-code:-ms-input-placeholder {\n  color: #ababab;\n}\n.cart .cart-actions__total {\n  font-weight: 300;\n  margin-right: auto;\n}\n@media (min-width: 1024px) {\n  .cart .cart-actions__total {\n    margin-right: 60px;\n  }\n}\n.cart .cart-actions__total strong {\n  margin-left: 15px;\n  color: #000;\n  font-weight: 700;\n}\n\n.cart-list {\n  width: 100%;\n}\n.cart-list table {\n  width: 100%;\n}\n.cart-list tr {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  position: relative;\n  padding-bottom: 18px;\n  margin-bottom: 18px;\n  border-bottom: 1px solid #d8d8d8;\n}\n@media (min-width: 767px) {\n  .cart-list tr {\n    display: table-row;\n    padding: 0;\n    margin: 0;\n    border: none;\n  }\n}\n.cart-list tr:last-of-type {\n  border-bottom: none;\n}\n.cart-list tr:first-of-type {\n  display: none;\n}\n@media (min-width: 767px) {\n  .cart-list tr:first-of-type {\n    display: table-row;\n  }\n}\n.cart-list tr th {\n  text-align: center;\n  font-size: 16px;\n  color: #218ab6;\n  padding-bottom: 30px;\n}\n.cart-list tr td {\n  display: block;\n  flex-wrap: wrap;\n  padding: 10px 0;\n  color: #000;\n}\n@media (max-width: 767px) {\n  .cart-list tr td {\n    width: 100% !important;\n  }\n}\n@media (min-width: 767px) {\n  .cart-list tr td {\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n    padding: 20px 0;\n  }\n}\n.cart-list tr td.cart-item-before:before {\n  font-weight: 600;\n  margin-right: 15px;\n  content: attr(data-label) \": \";\n}\n@media (min-width: 767px) {\n  .cart-list tr td.cart-item-before:before {\n    display: none;\n  }\n}\n.cart-list tr td:nth-of-type(1) {\n  width: 30%;\n}\n.cart-list tr td:nth-of-type(2) {\n  width: 12%;\n}\n.cart-list tr td:nth-of-type(3) {\n  width: 12%;\n}\n.cart-list tr td:nth-of-type(4) {\n  width: 50% !important;\n  text-align: right;\n}\n@media (min-width: 767px) {\n  .cart-list tr td:nth-of-type(4) {\n    text-align: center;\n    width: 23% !important;\n  }\n}\n.cart-list tr td:nth-of-type(5) {\n  text-align: left;\n  padding-left: 15px;\n  width: 50% !important;\n}\n@media (min-width: 767px) {\n  .cart-list tr td:nth-of-type(5) {\n    text-align: center;\n    width: 23% !important;\n  }\n}\n.cart-list tr td.cart-item-cancel {\n  top: 5px;\n  right: 0;\n  width: auto !important;\n  position: absolute;\n}\n@media (min-width: 767px) {\n  .cart-list tr td.cart-item-cancel {\n    position: static;\n  }\n}\n.cart-list tr td.cart-item-cancel i {\n  cursor: pointer;\n}\n\n.pop-cart-wrap {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.pop-cart-product {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.pop-cart-product .pop-cart-product__img img {\n  width: 70px;\n  height: 70px;\n}\n.pop-cart-product .pop-cart-product__content {\n  width: 200px !important;\n}\n.pop-cart-product .pop-cart-product__content div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 10px;\n}\n\n.cart-product {\n  display: flex;\n  align-items: center;\n}\n.cart-product .cart-product__img {\n  height: 70px;\n  width: 70px;\n  background: #fafafa;\n  border-radius: 100%;\n  margin-right: 25px;\n}\n@media (min-width: 767px) {\n  .cart-product .cart-product__img {\n    margin-right: 48px;\n  }\n}\n.cart-product .cart-product__img img {\n  width: 100%;\n  height: 100%;\n  -o-object-fit: cover;\n     object-fit: cover;\n  border-radius: 100%;\n  -o-object-position: top center;\n     object-position: top center;\n}\n.cart-product .cart-product__content {\n  padding-right: 25px;\n  text-align: left;\n}\n@media (min-width: 767px) {\n  .cart-product .cart-product__content {\n    padding: 0;\n  }\n}\n.cart-product .cart-product__content h3 {\n  font-size: 16px;\n  font-weight: 700;\n  margin-bottom: 10px;\n}\n.cart-product .cart-product__content p {\n  font-size: 13px;\n  font-weight: 300;\n  color: #c4c4c4;\n}\n\n.btn-cart {\n  position: relative;\n  transition: all 600ms;\n}\n.btn-cart svg {\n  stroke: #4c8000;\n}\n.btn-cart .btn-cart__count {\n  bottom: 0;\n  right: 0;\n  font-size: 10px;\n  width: 13px;\n  height: 13px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  background-color: #4c8000;\n  border-radius: 100%;\n  position: absolute;\n  z-index: 100;\n}\n\nli {\n  list-style: none;\n}\n\n.cart-btn-hv:hover .Cart-popup-outer {\n  display: block;\n}\n\n.Cart-popup-outer {\n  position: absolute;\n  top: 47px;\n  right: 45px;\n  background: transparent;\n  padding: 20px;\n  transition: all 600ms;\n  display: none;\n}\n.Cart-popup-outer .Cart-popup {\n  background: #fff;\n  padding: 20px;\n  border: 1px solid #e2e8f0;\n  width: auto;\n}\n.Cart-popup-outer .cart-list {\n  padding-bottom: 20px;\n}\n.Cart-popup-outer .cart-list .cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.Cart-popup-outer .cart-list .cart-item img {\n  width: 60px;\n  height: 60px;\n  padding-right: 10px;\n}\n.Cart-popup-outer .cart-list .cart-item .Pop-product-name {\n  font-size: 14px;\n  font-weight: 500;\n}\n.Cart-popup-outer .cart-list .cart-item .Pop-delete {\n  padding-left: 10px;\n}\n.Cart-popup-outer .cart-list .cart-item .Pop-delete i {\n  font-size: 14px;\n}\n.Cart-popup-outer .cart-list .cart-item h4 {\n  padding-top: 10px;\n  font-size: 14px;\n  font-weight: 500;\n}\n.Cart-popup-outer .cart-popup-footer-wrap {\n  border-top: 1px solid #e2e8f0;\n}\n.Cart-popup-outer .cart-popup-footer-wrap .cart-popup-footer {\n  padding-top: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.Cart-popup-outer .cart-popup-footer-wrap .cart-popup-footer li:first-child {\n  margin-right: 20px;\n}\n.Cart-popup-outer .cart-popup-footer-wrap .cart-popup-footer a {\n  padding: 8px 15px;\n  font-size: 13px;\n  background: #4c8000;\n  color: #fff;\n  border-radius: 4px;\n}\n\n.modal {\n  position: fixed;\n  top: 40%;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  outline: 0;\n}\n\n.modal-open .modal {\n  overflow-x: hidden;\n}\n\n.fade {\n  transition: opacity 0.15s linear;\n}\n\n.modal.fade .modal-dialog {\n  transition: transform 0.3s ease-out;\n  transform: translate(0, -50px);\n}\n\n.modal.show .modal-dialog {\n  transform: none;\n}\n\n.modal-dialog {\n  position: relative;\n  width: 100%;\n  pointer-events: none;\n}\n\n.modal-content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n  outline: 0;\n}\n.modal-content .modal-header {\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 1rem 1rem;\n  border-top-left-radius: calc(0.3rem - 1px);\n  border-top-right-radius: calc(0.3rem - 1px);\n}\n.modal-content .modal-header button.close {\n  padding: 0;\n  background-color: transparent;\n  border: 0;\n}\n.modal-content .modal-body {\n  position: relative;\n  flex: 1 1 auto;\n  padding: 1rem;\n}\n\n.back-button-section {\n  padding: 30px 0;\n}\n@media (min-width: 767px) {\n  .back-button-section {\n    padding: 50px 0;\n  }\n}\n.back-button-section a {\n  color: black;\n  font-size: 13px;\n  font-weight: 600;\n}\n@media (min-width: 767px) {\n  .back-button-section a {\n    font-size: 14px;\n  }\n}\n.back-button-section a i {\n  margin-right: 24px;\n}\n\n.form-page {\n  padding-bottom: 100px;\n}\n\n.form-block {\n  width: 100%;\n  margin: 0 auto;\n}\n.form-block .form-logo {\n  text-align: center;\n}\n.form-block .form-logo .rs-l {\n  width: 200px;\n  padding-bottom: 20px;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .form-block {\n    width: 600px;\n    background: #fff;\n    padding: 10px 30px;\n    border-radius: 4px;\n  }\n}\n.form-block .form-block__title {\n  font-size: 22px;\n  font-weight: 600;\n  padding: 0 50px;\n  line-height: 150%;\n  margin-bottom: 24px;\n  text-align: center;\n}\n.form-block .form-block__description {\n  font-size: 14px;\n  line-height: 165%;\n  text-align: center;\n}\n.form-block .form {\n  margin-top: 40px;\n}\n\n.form .form__input-row {\n  margin-bottom: 15px;\n  margin-top: 30px;\n}\n.form .form__input-row.form__input-row--two {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n}\n.form .form__input-row.form__input-row--two .form__col {\n  width: 49%;\n}\n.form .form__input {\n  height: 47px;\n  width: 100%;\n  font-weight: 500;\n  color: #808080;\n  padding: 0 22px;\n  border-radius: 40px;\n  border: 1px solid #d8d8d8;\n}\n@media (min-width: 767px) {\n  .form .form__input {\n    height: 56px;\n    padding: 0 40px;\n  }\n}\n.form .form__input.form__input--sm {\n  height: 49px;\n  padding: 0 28px;\n}\n.form select {\n  color: #808080;\n}\n.form select option {\n  color: #808080;\n  font-size: 15px;\n}\n.form select option:first-of-type {\n  opacity: 0.8;\n  display: none;\n}\n.form .form__btns {\n  justify-content: space-between;\n  display: flex;\n}\n.form .form__btns .btn-social {\n  width: 48%;\n}\n.form .btn-submit {\n  margin-top: 20px;\n  width: 100%;\n  padding-top: 14px;\n  padding-bottom: 14px;\n  font-weight: 600;\n  text-transform: none;\n}\n@media (min-width: 767px) {\n  .form .btn-submit {\n    padding-top: 19px;\n    padding-bottom: 19px;\n  }\n}\n.form .form__signup-link {\n  margin-top: 22px;\n  font-size: 14px;\n  color: #000;\n  padding-bottom: 2px;\n  text-align: center;\n}\n.form .form__signup-link a {\n  margin-left: 30px;\n  font-weight: 600;\n}\n.form .form__signup-link a:hover {\n  text-decoration: underline;\n}\n.form .form__info {\n  margin-bottom: 22px;\n}\n@media (min-width: 767px) {\n  .form .form__info {\n    display: flex;\n    margin-bottom: 32px;\n    align-items: center;\n    justify-content: space-between;\n  }\n}\n.form .form__info .form__info__forgot-password {\n  margin-top: 24px;\n  text-align: center;\n  display: block;\n}\n@media (min-width: 767px) {\n  .form .form__info .form__info__forgot-password {\n    margin-top: 0px;\n    color: #00acee;\n  }\n}\n.form .form__info .form__info__forgot-password:hover {\n  color: #00acee;\n  text-decoration: underline;\n}\n.form .form__info .checkbox {\n  margin-bottom: 0;\n}\n.form .form__info .checkbox .checkbox__check {\n  height: 20px;\n  width: 20px;\n}\n.form .form__info .checkbox .checkbox__check:before {\n  top: 2px;\n  left: 6px;\n  width: 6px;\n  height: 10.5px;\n}\n.form .form__info .checkbox p {\n  font-size: 13px;\n  line-height: 130%;\n}\n.form .form__info a {\n  font-size: 14px;\n}\n\n.fb-btn {\n  color: #fff;\n  font-weight: 600;\n  border-radius: 40px;\n  padding: 12px 30px;\n  display: flex;\n  align-items: center;\n  background-color: #3b5998;\n}\n@media (min-width: 767px) {\n  .fb-btn {\n    padding: 14px 58px;\n  }\n}\n.fb-btn i {\n  font-size: 18px;\n  margin-right: 8px;\n}\n\n.google-btn {\n  color: #000;\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n  border-radius: 40px;\n  border: 1px solid #f1584d;\n  padding: 12px 30px;\n}\n@media (min-width: 767px) {\n  .google-btn {\n    padding: 14px 58px;\n  }\n}\n.google-btn img {\n  margin-right: 10px;\n}\n\n.tooltip {\n  z-index: 10;\n  width: auto;\n  background: #ff0000;\n  color: white;\n  border-radius: 6px;\n  padding: 10px 15px;\n  position: fixed;\n}\n.tooltip:before {\n  width: 0;\n  height: 0;\n  content: \"\";\n  position: absolute;\n  left: 50%;\n  margin-left: -3px;\n  bottom: -6px;\n  border-style: solid;\n  border-width: 7px 3px 0 3px;\n  border-color: #ff0000 transparent transparent transparent;\n}\n\n.error-page {\n  align-items: center;\n  text-align: center;\n  padding: 60px 0;\n  min-height: calc(100vh - 200px);\n}\n.error-page h1 {\n  font-size: 44px;\n  margin: 0 auto 20px auto;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .error-page h1 {\n    font-size: 92px;\n  }\n}\n.error-page p {\n  line-height: 160%;\n  font-size: 15px;\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .error-page p {\n    font-size: 17px;\n    margin-bottom: 50px;\n  }\n}\n.error-page .btn {\n  margin: 0 auto;\n}\n\n.checkout-content {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n.checkout-content .block {\n  margin-bottom: 48px;\n}\n.checkout-content .block:last-of-type {\n  margin-bottom: 0;\n}\n.checkout-content .checkout__btns {\n  margin-bottom: 38px;\n}\n.checkout-content .checkout__btns .btn {\n  width: 125px;\n  margin-right: 11px;\n}\n.checkout-content .checkout__col-6 {\n  width: 100%;\n}\n@media (min-width: 1024px) {\n  .checkout-content .checkout__col-6 {\n    width: 53%;\n  }\n}\n@media (min-width: 1202px) {\n  .checkout-content .checkout__col-6 {\n    width: 41%;\n  }\n}\n.checkout-content .checkout__col-4 {\n  width: 100%;\n  margin-top: 30px;\n}\n@media (min-width: 1024px) {\n  .checkout-content .checkout__col-4 {\n    width: 41%;\n    margin-top: 0;\n  }\n}\n@media (min-width: 1202px) {\n  .checkout-content .checkout__col-4 {\n    width: 25%;\n  }\n}\n.checkout-content .checkout__col-2 {\n  width: 100%;\n  margin-top: 30px;\n}\n@media (min-width: 1024px) {\n  .checkout-content .checkout__col-2 {\n    width: 300px;\n  }\n}\n@media (min-width: 1202px) {\n  .checkout-content .checkout__col-2 {\n    width: 22%;\n    margin-top: 0;\n  }\n}\n\n.round-options {\n  display: flex;\n  flex-wrap: wrap;\n}\n.round-options.round-options--three {\n  margin-right: -6px;\n}\n.round-options.round-options--three .round-item {\n  margin-right: 6px;\n  width: calc(100% / 3 - 6px);\n}\n.round-options.round-options--two {\n  margin-right: -6px;\n}\n.round-options.round-options--two .round-item {\n  margin-right: 6px;\n  width: calc(100% / 2 - 6px);\n}\n.round-options .round-item {\n  display: flex;\n  height: 44px;\n  margin-bottom: 8px;\n  align-items: center;\n  border: 1px solid #d8d8d8;\n  border-radius: 20px;\n  align-items: center;\n  justify-content: center;\n}\n.round-options .round-item img {\n  max-height: 80%;\n  max-width: 80%;\n}\n.round-options .round-item p {\n  font-weight: bold;\n  color: black;\n  font-size: 14px;\n}\n.round-options .round-item.round-item--bg {\n  height: 51px;\n  align-items: center;\n  padding: 0 26px 0 21px;\n  justify-content: space-between;\n}\n\n.checkout-items .checkout-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 23px;\n  justify-content: space-between;\n}\n.checkout-items .checkout-item .checkout-item__content {\n  display: flex;\n  align-items: center;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__data {\n  width: 110px;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__data h3 {\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n  margin-bottom: 7px;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__data span {\n  color: #c4c4c4;\n  font-size: 12px;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__img {\n  width: 51px;\n  height: 51px;\n  flex-shrink: 0;\n  margin-right: 16px;\n  border-radius: 100%;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__img img {\n  border-radius: 100%;\n  -o-object-fit: cover;\n     object-fit: cover;\n  width: 100%;\n  height: 100%;\n}\n\n.checkout-total {\n  width: 244px;\n  background: #f1f1f1;\n  align-items: center;\n  height: 49px;\n  display: flex;\n  padding: 0 36px;\n  margin: 34px auto 0 auto;\n  justify-content: space-between;\n}\n.checkout-total p {\n  font-weight: 300;\n}\n\n.message {\n  font-size: 13px;\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n  margin-left: 20px;\n}\n.message:before {\n  content: \"\";\n  height: 4px;\n  width: 4px;\n  border-radius: 100%;\n  display: block;\n  margin-right: 5px;\n}\n.message.message--error {\n  color: red;\n}\n.message.message--error:before {\n  background-color: red;\n}\n\n.payment-body {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  margin: 50px 0px;\n}\n.payment-body .payment-item {\n  padding: 30px 80px;\n  background: #fff;\n  text-align: center;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all ease-in-out 600ms;\n}\n.payment-body .payment-item img {\n  width: 80px;\n}\n.payment-body .payment-item h2 {\n  padding: 15px 0px 0px 0px;\n  font-size: 16px;\n  font-weight: 500;\n}\n.payment-body .payment-item:hover {\n  opacity: 0.6;\n}\n\n.br-bm {\n  border-bottom: 1px solid;\n}\n\n.show-content {\n  text-align: center;\n  width: 700px;\n  margin: auto;\n  padding: 50px 20px;\n  background: #fff;\n  border-radius: 4px;\n}\n.show-content form h3:first-child {\n  padding-bottom: 20px;\n}\n.show-content form h3 {\n  font-size: 28px;\n  font-weight: 500;\n}\n.show-content form p {\n  font-size: 16px;\n  font-weight: 400;\n  padding-top: 10px;\n}\n.show-content form .form-group {\n  padding-top: 40px;\n}\n.show-content form .form-group .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 30px;\n  width: 100%;\n  padding: 12px 20px;\n  font-size: 16px;\n}\n.show-content form .checkout_confirm {\n  margin-top: 20px;\n  padding: 15px 30px;\n  background: #218ab6;\n  border: 1px solid #218ab6;\n  border-radius: 30px;\n  color: #fff;\n  transition: all ease-in-out 600ms;\n}\n.show-content form .checkout_confirm:hover {\n  background: transparent;\n  border: 1px solid #218ab6;\n  color: #218ab6;\n}\n\n.product-market-banner {\n  width: 100%;\n  height: 330px;\n  max-height: 330px;\n  min-height: 100px;\n  background-position: 50%;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n.product-market-page {\n  background-color: #ffffff;\n  margin: 30px 0px;\n}\n.product-market-page .heading {\n  padding: 20px;\n  background: #fff;\n  border-radius: 10px;\n  text-align: center;\n}\n.product-market-page .heading h2 {\n  font-size: 32px;\n  font-weight: 500;\n  text-transform: capitalize;\n  padding-bottom: 10px;\n}\n.product-market-page .heading h5 {\n  font-size: 18px;\n  font-weight: 400;\n  text-transform: capitalize;\n  color: #414141;\n}\n.product-market-page .product-market-body {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n}\n.product-market-page .product-market-body .product-market-item {\n  background: #ffffff;\n  border-radius: 10px;\n  display: flex;\n  flex-basis: calc(20% - 14px);\n  justify-content: center;\n  flex-direction: column;\n  margin: 20px 0 10px 10px;\n  position: relative;\n  transition: all ease-in-out 600ms;\n  border: 1px solid #e2e8f0;\n}\n.product-market-page .product-market-body .product-market-item .product-market-image img {\n  width: 100%;\n  height: 100%;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n.product-market-page .product-market-body .product-market-item h2 {\n  font-size: 16px;\n  text-align: center;\n  color: var(--color-text);\n  padding: 15px 0px;\n}\n.product-market-page .product-market-body .product-market-item:hover .view-pro {\n  display: block;\n}\n.product-market-page .product-market-body .view-pro {\n  padding: 10px 20px;\n  background: #4c8000;\n  color: #ffffff;\n  position: absolute;\n  top: 35%;\n  left: 16%;\n  border-radius: 30px;\n  font-size: 14px;\n  display: none;\n}\n\n.faq-page .faq-header {\n  width: 100%;\n  background: #4c8000;\n  padding: 100px 0px;\n  text-align: center;\n  color: #ffffff;\n}\n.faq-page .faq-header h2 {\n  font-size: 54px;\n  text-transform: uppercase;\n  font-weight: 800;\n  color: #ffffff;\n  border-bottom: 3px solid rgba(30, 31, 30, 0.6);\n  width: 150px;\n  padding-bottom: 10px;\n  margin: auto;\n}\n.faq-page .faq-header p {\n  font-size: 16px;\n  text-transform: capitalize;\n  font-weight: 400;\n  color: #ffffff;\n  padding-top: 20px;\n}\n.faq-page .faq-content {\n  margin: 50px 0px;\n}\n.faq-page .faq-content .faq-item {\n  padding: 30px 20px 20px 70px;\n  background: #ffffff;\n  border-radius: 10px;\n  margin-bottom: 20px;\n}\n.faq-page .faq-content .faq-item .qus {\n  font-size: 16px;\n  font-weight: 500;\n  padding-bottom: 35px;\n  text-transform: capitalize;\n  position: relative;\n}\n.faq-page .faq-content .faq-item .qus::before {\n  content: \"Q.\";\n  position: absolute;\n  top: -8px;\n  left: -50px;\n  font-size: 30px;\n  color: #4c8000;\n}\n.faq-page .faq-content .faq-item .ans {\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n  text-transform: capitalize;\n  position: relative;\n}\n.faq-page .faq-content .faq-item .ans::before {\n  content: \"A.\";\n  position: absolute;\n  top: 0;\n  left: -50px;\n  font-size: 30px;\n  color: #000000;\n}\n\n.guideline-heading {\n  width: 300px !important;\n}\n\n.blog-page .blog-content {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n.blog-page .blog-content .blog-item {\n  display: flex;\n  flex-basis: calc(33% - 14px);\n  flex-direction: column;\n  background: #ffffff;\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 20px;\n}\n.blog-page .blog-content .blog-item .blog-body {\n  position: relative;\n}\n.blog-page .blog-content .blog-item .blog-body a img {\n  width: 100%;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n.blog-page .blog-content .blog-item .blog-body a .date-box {\n  position: absolute;\n  bottom: 0px;\n  padding: 10px;\n  background: #4c8000;\n  border: 1px solid #4c8000;\n  color: #fff;\n  text-align: center;\n  font-weight: 300;\n}\n.blog-page .blog-content .blog-item .blog-footer b {\n  font-size: 16px;\n  font-weight: 500;\n  color: #218ab6;\n  text-transform: uppercase;\n}\n.blog-page .blog-content .blog-item .blog-footer h1 {\n  padding-top: 15px;\n  font-size: 16px;\n  font-weight: 600;\n  text-transform: capitalize;\n  padding-bottom: 10px;\n}\n.blog-page .blog-content .blog-item .blog-footer h1:hover {\n  color: #218ab6;\n  font-weight: 600;\n}\n.blog-page .blog-content .blog-item .blog-footer p {\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n  text-transform: capitalize;\n  padding-bottom: 1rem;\n}\n.blog-page .blog-content .blog-item .blog-footer .read-more-btn {\n  font-size: 12px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #fff;\n  background: #4c8000;\n  padding: 7px 20px;\n  border: solid;\n  border: 1px solid #4c8000;\n  border-radius: 50px;\n  transition: 0.3s ease-in;\n}\n.blog-page .blog-content .blog-item .blog-footer .read-more-btn:hover {\n  background: transparent;\n  border: 1px solid #4c8000;\n  color: #4c8000;\n}\n\n.blog-details-page {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n.blog-details-page .blog-details-content {\n  width: 74%;\n  margin-right: 10px;\n}\n.blog-details-page .blog-details-content .blog-details-body {\n  border-radius: 10px;\n}\n.blog-details-page .blog-details-content .blog-details-body img {\n  width: 100%;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content {\n  border: 1px solid #e5e9f4;\n  padding: 20px 30px 30px;\n  background: #ffffff;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content h2 {\n  font-size: 28px;\n  line-height: 38px;\n  font-weight: 600;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content .post-meta {\n  margin-bottom: 20px;\n  margin-top: 12px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content .post-meta li:last-child {\n  padding-left: 10px;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content .post-meta li:first-child {\n  padding-right: 10px;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content .post-meta a {\n  font-size: 14px;\n  text-transform: uppercase;\n  color: #4c8000;\n  font-weight: 500;\n  cursor: pointer;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content div p {\n  font-size: 16px;\n  color: #333333;\n  line-height: 28px;\n  padding-bottom: 20px;\n  text-align: justify;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content div h3 {\n  font-size: 26px;\n  padding-bottom: 10px;\n}\n.blog-details-page .blog-sidebar {\n  background: #ffffff;\n  padding: 30px 15px;\n  margin-right: 10px;\n  border-radius: 10px;\n  width: 25%;\n}\n.blog-details-page .blog-sidebar .blog-sidebar-content .serch-form {\n  position: relative;\n}\n.blog-details-page .blog-sidebar .blog-sidebar-content .serch-form input {\n  width: 100%;\n  height: 50px;\n  border: 2px solid #4c8000;\n  background: #f7f8fc;\n  padding: 0px 50px 0px 20px;\n  border-radius: 30px;\n  color: #4c8000;\n}\n.blog-details-page .blog-sidebar .blog-sidebar-content .serch-form button {\n  position: absolute;\n  top: 0;\n  right: 0;\n  height: 50px;\n  width: 50px;\n  border: none;\n  background: none;\n  cursor: pointer;\n}\n.blog-details-page .blog-sidebar .blog-sidebar-content .serch-form button i {\n  color: #4c8000;\n  font-size: 16px;\n}\n.blog-details-page .blog-sidebar .title {\n  font-size: 24px;\n  line-height: 34px;\n  font-weight: 700;\n  color: #252a32;\n  display: block;\n  text-align: center;\n  padding-bottom: 17px;\n  border-bottom: 3px solid rgba(76, 128, 0, 0.8);\n}\n.blog-details-page .blog-sidebar .tags {\n  text-align: center;\n  padding-top: 50px;\n}\n.blog-details-page .blog-sidebar .tags .tags-list {\n  margin-top: 29px;\n  display: grid;\n  grid-template-columns: auto auto;\n}\n.blog-details-page .blog-sidebar .tags .tags-list li a {\n  font-size: 13px;\n  text-transform: uppercase;\n  padding: 8px 22px;\n  background: #ffffff;\n  border: 1px solid #4c8000;\n  border-radius: 50px;\n  color: #4c8000;\n  display: inline-block;\n  transition: all 0.3s ease-in;\n  margin-bottom: 15px;\n  margin-right: 9px;\n}\n.blog-details-page .blog-sidebar .categories {\n  padding-top: 50px;\n}\n.blog-details-page .blog-sidebar .categories .categories-list {\n  padding-top: 20px;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li {\n  line-height: 38px;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li a {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  transition: all 0.3s ease-in;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li a span {\n  font-size: 16px;\n  font-weight: 500;\n  color: #143250;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li a:hover span {\n  color: #4c8000;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li span.active {\n  color: #4c8000;\n}\n.blog-details-page .blog-sidebar .recent-post-widget {\n  padding-top: 50px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list {\n  margin-top: 30px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li {\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding-bottom: 15px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post {\n  display: flex;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-img {\n  margin-right: 20px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-img img {\n  width: 73px;\n  height: 59px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-details {\n  flex: 1 1;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-details a h4 {\n  font-size: 14px;\n  line-height: normal;\n  font-weight: 300;\n  color: #143250;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-details .date {\n  color: #7b8698;\n  font-size: 12px;\n  margin-bottom: 0px;\n}\n\n.buy-heading {\n  width: 800px !important;\n}\n\n.producer-heading {\n  width: 500px !important;\n}\n\n.producer-page .producer-content {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n.producer-page .producer-content .producer-item {\n  display: flex;\n  flex-basis: calc(25% - 14px);\n  flex-direction: column;\n  background: #ffffff;\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 20px;\n  cursor: pointer;\n}\n.producer-page .producer-content .producer-item img {\n  width: 100%;\n  border-radius: 10px;\n}\n.producer-page .producer-content .producer-item h2 {\n  padding-top: 20px;\n  padding-bottom: 10px;\n  font-size: 16px;\n  font-weight: 500;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n.producer-page .producer-content .producer-item h2 span {\n  padding-right: 10px;\n}\n.producer-page .producer-content .producer-item h2 span i {\n  font-size: 15px;\n  color: #75c500;\n}\n.producer-page .producer-content .producer-item h5 {\n  font-size: 16px;\n  font-weight: 400;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n.producer-page .producer-content .producer-item h5 span {\n  padding-right: 10px;\n}\n.producer-page .producer-content .producer-item h5 span svg {\n  width: 20px;\n  height: 20px;\n}\n.producer-page .producer-content .producer-item code {\n  text-align: center;\n}\n\n.partner-page .form-control {\n  height: 47px;\n  width: 100%;\n  font-weight: 500;\n  color: #808080;\n  padding: 0 22px;\n  border-radius: 40px;\n  border: 1px solid #d8d8d8;\n}\n.partner-page .form-control option {\n  font-size: 18px;\n  font-weight: 400;\n  color: #808080;\n}\n.partner-page label {\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  margin-top: 2rem;\n}\n.partner-page input[type=checkbox] {\n  border: 1px solid #4c8000;\n  width: 18px;\n  height: 18px;\n  margin-right: 20px;\n  border-radius: 4px;\n  position: relative;\n}\n.partner-page input:checked {\n  background-color: #4c8000;\n  color: #ffffff;\n}\n.partner-page .form-check-label {\n  font-size: 18px;\n  font-weight: 500;\n}\n.partner-page .form-check {\n  margin-top: 15px !important;\n  cursor: pointer;\n}\n.partner-page input[type=file] {\n  text-align: center;\n  padding: 16px;\n  margin-top: 15px;\n}\n\n.service-point-page .serch-form {\n  width: auto;\n  margin: auto;\n  position: relative;\n  margin-top: 30px;\n}\n.service-point-page .serch-form input {\n  height: 50px;\n  padding: 20px 38px;\n  border: 2px solid rgba(30, 31, 30, 0.6);\n  color: #000000;\n  border-radius: 4px;\n}\n.service-point-page .serch-form button {\n  position: absolute;\n  top: 0;\n  right: 38%;\n  height: 50px;\n  width: 50px;\n  border: none;\n  background: none;\n  cursor: pointer;\n  border-left: 1px solid rgba(30, 31, 30, 0.6);\n}\n.service-point-page .serch-form button i {\n  color: rgba(30, 31, 30, 0.8);\n  font-size: 16px;\n}\n\n.view-more-todays-deal-banner {\n  width: 100%;\n  height: 120px;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n.view-more-pages-banner {\n  width: 100%;\n  height: 335px;\n  max-height: 335px;\n  min-height: 100px;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  -o-object-fit: cover;\n  object-fit: cover;\n}\n\n.view-more-pages .timer-Wrap {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.view-more-pages .timer-Wrap li:first-child {\n  background: transparent !important;\n  padding: 0 !important;\n  color: #000;\n  font-size: 16px;\n  font-weight: 500;\n}\n.view-more-pages .timer-Wrap li {\n  margin-right: 10px;\n  background: #218ab6;\n  padding: 10px;\n  color: #ffffff;\n  border-radius: 4px;\n}\n.view-more-pages .view-more-pages-body {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.CampaingsPage {\n  margin: 0 !important;\n}\n.CampaingsPage .campaign-page-slider {\n  margin-bottom: 30px;\n}\n\n.CompanyOverview-item {\n  background-color: #fff;\n  border-radius: 10px;\n  padding: 20px;\n}\n.CompanyOverview-item h1 {\n  text-align: center;\n  font-size: 22px;\n  line-height: 28px;\n  padding-bottom: 10px;\n}\n.CompanyOverview-item p {\n  line-height: 28px;\n  font-size: 16px;\n  color: var(--color-text);\n  text-align: justify;\n  margin-bottom: 40px;\n}", "",{"version":3,"sources":["webpack://styles.scss","webpack://main.scss","webpack://partials/variables.scss","webpack://partials/breakpoints.scss"],"names":[],"mappings":"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","sourcesContent":["@charset \"UTF-8\";\n@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap\");\n@import './fonts/icons/icons.css';\n@import \"./partials/reset.css\";\n@import \"./partials/responsive.css\";\n@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap\");\nhtml,\nbody {\n  overflow-x: hidden !important;\n}\n\n:root {\n  --main-font: \"Poppins\";\n  --font-title: \"Archivo\";\n  --color-orange: #218ab6;\n  --color-orange-light: #FFF3DF;\n  --color-black: #333333;\n  --color-text: #868686;\n  --color-white: #FFFFFF;\n  --color-gray: #706c61;\n  --color-red: #FF0000;\n}\n\n@keyframes skeleton {\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n}\n@-webkit-keyframes watchAnimation {\n  from {\n    -webkit-transform: rotate(0deg) translateX(10px) rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg) translateX(10px) rotate(-360deg);\n  }\n}\n@-moz-keyframes watchAnimation {\n  from {\n    -moz-transform: rotate(0deg) translateX(10px) rotate(0deg);\n  }\n  to {\n    -moz-transform: rotate(360deg) translateX(10px) rotate(-360deg);\n  }\n}\n@-o-keyframes watchAnimation {\n  from {\n    -o-transform: rotate(0deg) translateX(10px) rotate(0deg);\n  }\n  to {\n    -o-transform: rotate(360deg) translateX(10px) rotate(-360deg);\n  }\n}\n@keyframes watchAnimation {\n  from {\n    transform: rotate(0deg) translateX(10px) rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg) translateX(10px) rotate(-360deg);\n  }\n}\n@-webkit-keyframes opacity {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@-moz-keyframes opacity {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@-o-keyframes opacity {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n@keyframes opacity {\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.2;\n  }\n}\n*,\n*:after,\n*:before {\n  box-sizing: border-box;\n}\n\nbody {\n  box-sizing: border-box;\n  background-color: #f2f3f8;\n  font-family: var(--main-font);\n  color: var(--color-text);\n  font-size: 16px;\n}\nbody.body--with-footer .main {\n  align-items: normal;\n}\n\nspan {\n  font-weight: 300;\n}\n\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  /* display: none; <- Crashes Chrome on hover */\n  -webkit-appearance: none;\n  margin: 0;\n  /* <-- Apparently some margin are still there even though it's hidden */\n}\n\nbutton {\n  cursor: pointer;\n}\n\ninput[type=number] {\n  -moz-appearance: textfield;\n  /* Firefox */\n}\n\ninput,\ntextarea,\nbutton,\nselect {\n  border: none;\n  background: none;\n  outline: none;\n  border-radius: 0;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  font-family: var(--main-font);\n}\n\nbutton {\n  cursor: pointer;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5 {\n  color: var(--color-black);\n}\n\n.container {\n  max-width: 380px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 16px;\n  padding-right: 16px;\n}\n@media (min-width: 767px) {\n  .container {\n    max-width: 650px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n@media (min-width: 1024px) {\n  .container {\n    max-width: 980px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n@media (min-width: 1202px) {\n  .container {\n    max-width: 1280px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n\n.main-page {\n  padding-top: 0px;\n  background-color: #f2f3f8;\n}\n@media (min-width: 767px) {\n  .main-page {\n    padding-top: 0px;\n  }\n}\n\n.block .block__title {\n  font-size: 14px;\n  margin-bottom: 23px;\n}\n\n.btn-hamburger {\n  display: block;\n  position: relative;\n  display: block;\n  z-index: 100;\n  width: 25px;\n  height: 25px;\n  margin-left: auto;\n}\n.btn-hamburger:before, .btn-hamburger:after,\n.btn-hamburger span {\n  content: \"\";\n  display: block;\n  width: 20px;\n  height: 2px;\n  top: 50%;\n  border-radius: 3px;\n  margin-top: -1px;\n  position: absolute;\n  left: 50%;\n  margin-left: -10px;\n  transition: none 0.3s ease 0.3s;\n  transition-property: transform, top, bottom, right, opacity;\n}\n.btn-hamburger:before {\n  transform: translateY(-6px);\n}\n.btn-hamburger:after {\n  transform: translateY(6px);\n}\n.btn-hamburger.is-active:before {\n  transform: rotate(45deg);\n}\n.btn-hamburger.is-active:after {\n  transform: rotate(-45deg);\n}\n.btn-hamburger.is-active span {\n  opacity: 0;\n}\n\n.btn {\n  color: #000000;\n  cursor: pointer;\n  transition: all ease-in-out 600ms;\n}\n.btn.btn--rounded {\n  font-size: 12px;\n  background: #218ab6;\n  color: #fff;\n  display: inline-block;\n  border-radius: 50px;\n  padding: 11px 20px;\n  font-weight: 500;\n  text-transform: uppercase;\n}\n@media (min-width: 767px) {\n  .btn.btn--rounded {\n    font-size: 13px;\n    padding: 11px 20px;\n  }\n}\n.btn.btn--rounded.btn--border {\n  border: 1px solid #218ab6;\n}\n.btn.btn--rounded.btn--yellow {\n  background-color: #218ab6;\n}\n.btn.btn--rounded:hover {\n  background-color: #fff;\n  color: #218ab6;\n}\n\n.logo {\n  max-width: 190px;\n}\n\n.breadcrumb {\n  padding: 20px 0 20px 0;\n}\n@media (min-width: 767px) {\n  .breadcrumb {\n    padding: 29px 0 35px 0;\n  }\n}\n.breadcrumb .breadcrumb-list {\n  display: flex;\n}\n.breadcrumb .breadcrumb-list li {\n  font-size: 13px;\n  color: #b2b2b2;\n}\n.breadcrumb .breadcrumb-list li:not(:first-child) {\n  margin-left: 10px;\n}\n.breadcrumb .breadcrumb-list li:not(:first-child):before {\n  content: \"/ \";\n  margin-right: 3px;\n}\n\n.account-content {\n  padding: 20px;\n  position: absolute;\n  top: 40px;\n  right: 20px;\n  display: none;\n}\n.account-content .account-content-wrap {\n  background-color: #ffffff;\n  border: 1px solid #ebeaea;\n  padding: 20px;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  border-radius: 4px;\n}\n.account-content .account-content-wrap div .reg-btn {\n  margin: 0 !important;\n  padding: 10px 20px;\n  background: #4c8000;\n  color: #ffffff;\n  border-radius: 4px;\n  transition: all ease-in-out 600ms;\n}\n.account-content .account-content-wrap div .reg-btn:hover {\n  background: #000000;\n}\n.account-content .account-content-wrap div .log-btn {\n  margin: 0 !important;\n  padding: 10px 20px;\n  background: #000000;\n  color: #ffffff;\n  border-radius: 4px;\n  transition: all ease-in-out 600ms;\n}\n.account-content .account-content-wrap div .log-btn:hover {\n  background: #4c8000;\n}\n.account-content .account-content-wrap div:first-child {\n  margin-right: 20px;\n}\n\n.account-wrap:hover .account-content {\n  display: block;\n}\n\n.header-top {\n  position: relative;\n  z-index: 100000;\n  background: #4c8000;\n  border-bottom: 1px solid #4c8000;\n  color: #ffffff;\n  padding: 12px 30px;\n}\n.header-top .f-right {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n.header-top .f-right .nav-item {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.header-top .f-right .nav-item .nav-link {\n  font-size: 14px;\n  text-transform: capitalize;\n}\n.header-top .f-right .nav-item .nav-link:hover {\n  color: #000;\n  font-weight: 400;\n}\n.header-top .nav-list {\n  float: left;\n  display: flex;\n}\n.header-top .nav-list .nav-item {\n  padding-right: 10px;\n  padding-left: 10px;\n}\n.header-top .nav-list .nav-item .nav-link {\n  font-size: 14px;\n  text-transform: capitalize;\n}\n.header-top .nav-list .nav-item .nav-link:hover {\n  color: #000;\n  font-weight: 400;\n}\n\n.header-bottom {\n  position: relative;\n  background: #000000;\n  border-bottom: 1px solid #000000;\n  color: #4c8000;\n  padding: 15px 50px;\n}\n.header-bottom .f-right {\n  display: flex;\n  align-items: flex-end;\n  justify-content: flex-start;\n  padding-left: 18px;\n}\n.header-bottom .f-right .nav-item {\n  padding-left: 20px;\n}\n.header-bottom .f-right .nav-item .nav-link {\n  font-size: 14px;\n  text-transform: capitalize;\n  font-weight: 500;\n}\n.header-bottom .f-right .nav-item .nav-link:hover {\n  color: #ffffff;\n}\n.header-bottom .nav-list {\n  float: left;\n  background-color: #060606;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 47px;\n  position: relative;\n  top: -15px;\n  width: 245px;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.header-bottom .nav-list .cat {\n  color: #ffffff;\n  font-size: 18px;\n  cursor: pointer;\n  text-transform: uppercase;\n  font-weight: 600;\n}\n.header-bottom .nav-list .bar {\n  font-size: 26px;\n}\n.header-bottom .nav-list .arrowRight {\n  font-size: 18px;\n}\n.header-bottom .nav-list .nav-item {\n  padding-right: 20px;\n}\n.header-bottom .nav-list .nav-item .nav-link {\n  font-size: 14px;\n  text-transform: capitalize;\n}\n\n.site-header {\n  position: relative;\n  z-index: 999;\n  height: 65px;\n  color: #000;\n  background: #000;\n  box-shadow: none;\n  transition: ease-in-out 600ms;\n}\n@media (min-width: 767px) {\n  .site-header {\n    height: 85px;\n  }\n}\n.site-header .btn-hamburger:before, .site-header .btn-hamburger:after,\n.site-header .btn-hamburger span {\n  background-color: #4c8000;\n}\n.site-header svg {\n  stroke: #4c8000 !important;\n}\n.site-header .container {\n  display: flex;\n  height: 100%;\n  align-items: center;\n}\n.site-header .site-header__btn-avatar {\n  display: none;\n}\n@media (min-width: 1024px) {\n  .site-header .site-header__btn-avatar {\n    display: block;\n  }\n}\n@media (min-width: 1024px) {\n  .site-header .site-header__btn-menu {\n    display: none;\n  }\n}\n.site-header .site-header__actions {\n  margin-left: auto;\n  display: flex;\n  align-items: center;\n}\n@media (min-width: 1024px) {\n  .site-header .site-header__actions {\n    margin-left: 0;\n  }\n}\n.site-header .site-header__actions button {\n  margin-left: 15px;\n}\n@media (min-width: 1024px) {\n  .site-header .site-header__actions button {\n    margin-left: 25px;\n  }\n}\n.site-header .site-header__actions i {\n  color: #4c8000;\n  z-index: 10;\n  transition: all 0.3s ease;\n  position: relative;\n  font-size: 18px;\n}\n.site-header .Header-middle {\n  position: relative;\n  margin-left: auto;\n  margin-right: auto;\n}\n.site-header .new-search-form {\n  width: 800px;\n  background: #fff;\n  height: 46px;\n  padding: 11px;\n  border: 2px solid #4c8000;\n  border-radius: 4px;\n}\n.site-header .new-search-form input {\n  width: 100%;\n}\n.site-header .seach-btn {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 9.5px 25px;\n  background: #4c8000;\n  color: #fff;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.site-header .seach-btn i {\n  font-size: 18px;\n}\n.site-header .seach-btn:hover {\n  background: #218ab6;\n  color: #ffffff;\n}\n.site-header .site-nav {\n  top: 0;\n  right: -250px;\n  width: 250px;\n  z-index: 9999;\n  height: 100vh;\n  margin-left: auto;\n  margin-right: auto;\n  position: fixed;\n  background-color: #fff;\n  transition: all 0.3s ease;\n  border-left: 1px solid #e5e5e5;\n  display: none;\n}\n@media (min-width: 1024px) {\n  .site-header .site-nav {\n    position: relative;\n    height: auto;\n    right: 0;\n    width: auto;\n    border: none;\n    background-color: transparent;\n  }\n}\n.site-header .site-nav .site-nav__btn {\n  padding: 13px 18px;\n  width: 100%;\n  font-size: 15px;\n  font-weight: 500;\n  text-align: left;\n}\n@media (min-width: 1024px) {\n  .site-header .site-nav .site-nav__btn {\n    display: none;\n  }\n}\n.site-header .site-nav.site-nav--open {\n  right: 0;\n}\n.site-header .site-nav a {\n  font-size: 15px;\n  font-weight: 500;\n  width: 100%;\n  color: #000;\n  display: block;\n  text-align: left;\n  padding: 15px 18px;\n}\n@media (min-width: 1024px) {\n  .site-header .site-nav a {\n    width: auto;\n    padding: 0;\n    color: #fff;\n    margin-right: 76px;\n    display: inline-block;\n    font-size: 14px;\n  }\n}\n.site-header .search-form-wrapper.search-form--active .search-form {\n  top: 0;\n}\n@media (min-width: 1024px) {\n  .site-header .search-form-wrapper.search-form--active .search-form {\n    top: auto;\n  }\n}\n@media (min-width: 1024px) {\n  .site-header .search-form-wrapper.search-form--active .search-form input {\n    border: 1px solid #ababab;\n  }\n}\n\n.search-form-wrapper {\n  position: relative;\n  z-index: 5000;\n  display: none;\n}\n.search-form-wrapper .search-form {\n  position: fixed;\n  z-index: 100;\n  top: -100vh;\n  left: 0;\n  height: 100vh;\n  right: 0;\n  transition: all 0.3s ease;\n  background-color: #fff;\n}\n@media (min-width: 767px) {\n  .search-form-wrapper .search-form {\n    display: block;\n  }\n}\n@media (min-width: 1024px) {\n  .search-form-wrapper .search-form {\n    position: static;\n    height: auto;\n    top: auto;\n  }\n}\n.search-form-wrapper .search-form .icon-cancel {\n  top: 18px;\n  right: 22px;\n  cursor: pointer;\n  position: absolute;\n}\n@media (min-width: 1024px) {\n  .search-form-wrapper .search-form .icon-cancel {\n    display: none;\n  }\n}\n.search-form-wrapper .search-form input {\n  padding: 0;\n  overflow: hidden;\n  height: 42px;\n  color: #808080;\n  font-size: 13px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border-bottom: 1px solid black;\n  transition: all 0.3s ease;\n  background-color: transparent;\n}\n.search-form-wrapper .search-form input::-moz-placeholder {\n  color: #808080;\n}\n.search-form-wrapper .search-form input::-webkit-input-placeholder {\n  color: #808080;\n}\n.search-form-wrapper .search-form input:-ms-input-placeholder {\n  color: #808080;\n}\n.search-form-wrapper .search-form input::placeholder {\n  color: #808080;\n}\n@media (min-width: 1024px) {\n  .search-form-wrapper .search-form input {\n    width: 0;\n    top: 50%;\n    left: auto;\n    right: -9px;\n    border: none;\n    border-radius: 50px;\n    margin-top: -21px;\n    transform: none;\n  }\n}\n.search-form-wrapper.search-form--active input {\n  padding: 0 8px;\n  width: 80%;\n  text-align: center;\n  padding-right: 40px;\n  background-color: #fff;\n}\n@media (min-width: 1024px) {\n  .search-form-wrapper.search-form--active input {\n    width: 300px;\n    padding: 0 19px;\n    text-align: left;\n  }\n}\n.search-form-wrapper.search-form--active i {\n  color: #000 !important;\n  z-index: 10;\n}\n\n.cat-item {\n  padding: 12px 0px;\n  border-top: 1px solid #e2e8f0;\n  position: relative;\n}\n.cat-item .cat-link {\n  display: flex;\n  justify-content: space-between;\n  font-size: 14px;\n  color: #4a5568;\n  text-transform: capitalize;\n}\n.cat-item .Sub-Cat {\n  position: absolute;\n  top: 0;\n  right: -258px;\n  z-index: 100;\n  background: transparent;\n  padding: 0px 20px;\n  display: none;\n}\n.cat-item .Sub-Cat li {\n  padding: 12px 20px;\n  border-bottom: 1px solid #e2e8f0;\n  background: #fff;\n}\n.cat-item .Sub-Cat li a {\n  font-size: 14px;\n}\n.cat-item:hover .cat-link,\n.cat-item span > svg {\n  font-weight: 600;\n  color: #4c8000 !important;\n  stroke: #4c8000 !important;\n}\n\n.Man-col {\n  transition: all 600ms;\n}\n.Man-col:hover .Sub-Cat {\n  display: block;\n}\n\n.page-intro {\n  display: flex;\n}\n.page-intro .Category-card {\n  position: absolute;\n  left: 50px;\n  width: 245px;\n  background-color: #ffffff;\n}\n.page-intro .Category-card .cat-list {\n  padding: 10px 10px 0px 15px;\n  border: 1px solid #e2e8f0;\n}\n.page-intro .swiper-wrapper {\n  margin: 6px 0px 0px 6px;\n  height: 330px;\n  width: 100%;\n  margin-left: -5px;\n}\n.page-intro .swiper-wrapper .swiper-container {\n  width: 965px;\n}\n.page-intro .swiper-pagination {\n  position: absolute;\n  bottom: 3%;\n  right: 46%;\n  z-index: 100;\n}\n.page-intro .swiper-pagination .swiper-pagination-bullet {\n  width: 10px;\n  height: 10px;\n  border-radius: 30px;\n  background: rgba(0, 0, 0, 0.6);\n  display: inline-block;\n  margin-right: 10px;\n}\n.page-intro .swiper-pagination .swiper-pagination-bullet-active {\n  background: #4c8000;\n}\n.page-intro .swiper-button-prev,\n.page-intro .swiper-button-next {\n  bottom: 20px;\n  top: 50%;\n  transform: translateX(50%);\n  right: auto;\n  width: 30px;\n  height: 30px;\n  z-index: 100;\n  font-size: 13px;\n  display: flex;\n  cursor: pointer;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  display: none;\n  background-color: rgba(255, 255, 255, 0.12);\n  border-radius: 100%;\n}\n@media (min-width: 767px) {\n  .page-intro .swiper-button-prev,\n.page-intro .swiper-button-next {\n    width: 52px;\n    height: 52px;\n    bottom: 30px;\n    font-size: 17px;\n    display: flex;\n  }\n}\n.page-intro .swiper-button-prev:before,\n.page-intro .swiper-button-next:before {\n  color: #fff;\n  content: \"\";\n  font-family: \"icons\";\n}\n.page-intro .swiper-button-prev:hover,\n.page-intro .swiper-button-next:hover {\n  background: #fff;\n}\n.page-intro .swiper-button-prev:hover:before,\n.page-intro .swiper-button-next:hover:before {\n  color: #000;\n}\n.page-intro .swiper-button-next {\n  right: 20px;\n}\n@media (min-width: 767px) {\n  .page-intro .swiper-button-next {\n    right: 7%;\n  }\n}\n.page-intro .swiper-button-next:before {\n  content: \"\";\n}\n.page-intro .page-intro__slide {\n  height: 350px;\n  position: relative;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n  background-color: #fafafa;\n}\n@media (min-width: 767px) {\n  .page-intro .page-intro__slide {\n    height: 90vh;\n  }\n}\n.page-intro .page-intro__slide:before {\n  content: \"\";\n  left: 0;\n  z-index: 5;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n.page-intro .page-intro__slide .container {\n  z-index: 10;\n  display: flex;\n  position: relative;\n  align-items: center;\n  height: 100%;\n}\n.page-intro .page-intro__slide .page-intro__slide__content {\n  margin-top: auto;\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .page-intro .page-intro__slide .page-intro__slide__content {\n    margin-bottom: 80px;\n    margin-top: 0;\n  }\n}\n.page-intro .page-intro__slide .page-intro__slide__content h2 {\n  font-size: 36px;\n  color: #fff;\n  font-weight: 600;\n  line-height: 120%;\n  margin-bottom: 45px;\n}\n@media (min-width: 767px) {\n  .page-intro .page-intro__slide .page-intro__slide__content h2 {\n    font-size: 64px;\n    width: 600px;\n  }\n}\n.page-intro .page-intro__slide .page-intro__slide__content .btn-shop {\n  display: flex;\n  color: #fff;\n  align-items: center;\n}\n.page-intro .page-intro__slide .page-intro__slide__content .btn-shop i {\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  width: 40px;\n  height: 40px;\n  color: #fff;\n  font-size: 15px;\n  margin-right: 10px;\n  background-color: var(--color-orange);\n  border-radius: 100%;\n}\n\n.customOrder {\n  margin: 40px 0px;\n  padding: 30px 20px;\n  background: #ffffff;\n  border-radius: 10px;\n}\n.customOrder .heading {\n  margin-bottom: 45px;\n  border-bottom: 1px solid #e2e8f0;\n}\n.customOrder .heading h2 {\n  font-size: 29px;\n  text-transform: capitalize;\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 15px;\n  width: 400px;\n}\n.customOrder p {\n  text-align: center;\n  font-size: 16px;\n  padding-bottom: 10px;\n  color: #218ab6;\n}\n.customOrder .customOrder-list {\n  width: 60%;\n  margin: auto;\n}\n.customOrder .customOrder-list .customOrder-item {\n  border: 2px solid #e2e8f0;\n  border-radius: 4px;\n}\n.customOrder .customOrder-list .customOrder-itemOne,\n.customOrder .customOrder-list .customOrder-itemTwo {\n  height: 40px;\n  width: 49%;\n  padding: 20px;\n  margin: 0px 0px 20px 0px;\n}\n.customOrder .customOrder-list .customOrder-itemOne {\n  margin-right: 14px;\n}\n.customOrder .customOrder-list .customOrder-itemThree {\n  padding: 20px;\n  margin: 0px 0px 20px 0px;\n  width: 100%;\n}\n.customOrder .customOrder-list .file-area {\n  width: 100%;\n  position: relative;\n  border: 5px dashed #e2e8f0;\n  margin-right: 20px;\n}\n.customOrder .customOrder-list .file-area input[type=file] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  cursor: pointer;\n}\n.customOrder .customOrder-list .file-area .file-dummy {\n  width: 100%;\n  padding: 30px;\n  border-color: #e2e8f0;\n  background: rgba(255, 255, 255, 0.2);\n  text-align: center;\n  transition: background 0.3s ease-in-out;\n}\n.customOrder .customOrder-list .file-area .file-dummy .success {\n  display: none;\n}\n.customOrder .customOrder-list .file-area:hover .file-dummy {\n  background: rgba(255, 255, 255, 0.1);\n}\n.customOrder .customOrder-list .file-area input[type=file]:focus + .file-dummy {\n  outline: 5px dashed #e2e8f0;\n  outline: -webkit-focus-ring-color auto 5px;\n}\n.customOrder .customOrder-list .file-area input[type=file]:valid + .file-dummy {\n  border-color: rgba(0, 255, 0, 0.4);\n  background-color: rgba(0, 255, 0, 0.3);\n}\n.customOrder .customOrder-list .file-area input[type=file]:valid + .file-dummy .success {\n  display: inline-block;\n}\n.customOrder .customOrder-list .file-area input[type=file]:valid + .file-dummy .default {\n  display: none;\n}\n.customOrder .customOrder-list .CO-btn {\n  background: #218ab6;\n  font-size: 16px;\n  padding: 15px 40px;\n  color: #fff;\n  margin-top: 40px;\n  border-radius: 30px;\n  text-transform: capitalize;\n}\n\n.mt-50 {\n  margin-top: 50px;\n}\n\n.cat-grid-wrap {\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n}\n.cat-grid-wrap .cat-grid-item {\n  display: flex;\n  flex-basis: calc(20% - 14px);\n  justify-content: center;\n  flex-direction: column;\n  margin: 20px 0 10px 10px;\n}\n.cat-grid-wrap .cat-grid-item .cat-grid-link {\n  text-align: center;\n}\n.cat-grid-wrap .cat-grid-item .cat-grid-link img {\n  width: 170px;\n  height: 170px;\n  border-radius: 100%;\n  border: 2px solid #e2e8f0;\n}\n.cat-grid-wrap .cat-grid-item .cat-grid-link h1 {\n  font-size: 16px;\n  text-transform: capitalize;\n  font-weight: 600;\n  padding-top: 20px;\n}\n\n.todays-Sale {\n  display: flex;\n}\n.todays-Sale .sale-now-txt {\n  color: #218ab6;\n  font-weight: 500;\n}\n.todays-Sale span {\n  padding-left: 20px;\n}\n.todays-Sale span .timer-Wrap {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n.todays-Sale span .timer-Wrap li {\n  margin-right: 10px;\n  width: 30px;\n  height: 30px;\n  background: #218ab6;\n  text-align: center;\n  line-height: 30px;\n  color: #ffffff;\n  border-radius: 4px;\n  font-size: 18px;\n}\n\n.sc-mt {\n  margin-top: 100px;\n}\n\n.Cbo-item {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n}\n\n.react-rater-star.is-active {\n  color: #ffaf36;\n}\n\n.product-item {\n  margin-bottom: 10px;\n  transition: all ease-in-out 600ms;\n  position: relative;\n}\n.product-item:hover {\n  box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.08);\n  -webkit-box-shadow: 0 10px 20px 0 rgba(0, 0, 0, 0.08);\n}\n.product-item:hover .view-details {\n  display: block;\n}\n.product-item .react-rater-star {\n  font-size: 22px;\n}\n.product-item .product__description {\n  padding: 10px 1px 10px 15px;\n}\n.product-item .product__description h5 {\n  padding-bottom: 10px;\n  font-size: 14px;\n  color: #218ab6;\n  cursor: pointer;\n}\n.product-item.product-item--loading .product__image:before,\n.product-item.product-item--loading .product__description h3:before,\n.product-item.product-item--loading .product__price h4:before {\n  content: \"\";\n  background-color: #eee;\n  background-image: linear-gradient(90deg, #eee, #f5f5f5, #eee);\n  animation-name: skeleton;\n  animation-duration: 1.2s;\n  animation-timing-function: ease-in-out;\n  animation-iteration-count: infinite;\n  background-size: 200px 100%;\n  background-repeat: no-repeat;\n  border-radius: 4px;\n  display: inline-block;\n  line-height: 1;\n  width: 100%;\n}\n.product-item.product-item--loading .product__image {\n  position: relative;\n}\n.product-item.product-item--loading .product__image:before {\n  top: 0;\n  left: 0;\n  position: absolute;\n  width: 100%;\n  height: 250px;\n}\n.product-item.product-item--loading .product__description h3:before {\n  height: 20px;\n  width: 80%;\n}\n.product-item.product-item--loading .product__price h4 {\n  width: 40%;\n}\n.product-item.product-item--loading .product__price h4:before {\n  height: 18px;\n  width: 100%;\n}\n.product-item .product__image {\n  height: 165px;\n  background-color: #fafafa;\n  margin-bottom: 20px;\n  position: relative;\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n}\n@media (min-width: 767px) {\n  .product-item .product__image {\n    margin-bottom: 5px;\n  }\n}\n.product-item .product__image > a {\n  height: 165px;\n  width: 100%;\n  display: block;\n  padding: 18px;\n}\n@media (min-width: 767px) {\n  .product-item .product__image > a {\n    padding: 24px;\n  }\n}\n.product-item .product__image .btn-heart {\n  top: 10px;\n  right: 12px;\n  z-index: 10;\n  width: 32px;\n  font-size: 12px;\n  border: none;\n  height: 32px;\n  background-color: #fff;\n  position: absolute;\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.16);\n}\n@media (min-width: 767px) {\n  .product-item .product__image .btn-heart {\n    height: 38px;\n    width: 38px;\n    top: 6px;\n    right: 10px;\n    font-size: 14px;\n  }\n}\n.product-item .product__image .btn-heart:hover, .product-item .product__image .btn-heart.btn-heart--active {\n  color: #ffffff;\n  background-color: #218ab6;\n}\n.product-item .product__image img {\n  top: 0;\n  left: 0;\n  z-index: 5;\n  width: 100%;\n  height: 165px;\n  object-position: top center;\n  object-fit: cover;\n  position: absolute;\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n}\n.product-item .product__image .product__discount {\n  color: #fff;\n  padding: 5px 9px;\n  border-radius: 4px;\n  font-weight: 500;\n  font-size: 12px;\n  z-index: 10;\n  position: relative;\n  background-color: #218ab6;\n  top: -13px;\n  left: -13px;\n}\n.product-item .product__description .btn-hm-add {\n  padding: 8px 15px;\n  background-color: #218ab6;\n  color: #ffffff;\n  border-radius: 30px;\n}\n.product-item .product__description h3 {\n  margin-bottom: 9px;\n  font-weight: 300;\n  font-size: 13px;\n  cursor: pointer;\n}\n@media (min-width: 767px) {\n  .product-item .product__description h3 {\n    font-size: 16px;\n  }\n}\n.product-item .product__description .product__price {\n  display: flex;\n}\n.product-item .product__description .product__price h4 {\n  font-weight: 400;\n  font-size: 15px;\n}\n@media (min-width: 767px) {\n  .product-item .product__description .product__price h4 {\n    font-size: 18px;\n  }\n}\n.product-item .product__description .product__price span {\n  color: #cecece;\n  margin-left: 10px;\n  font-size: 15px;\n}\n@media (min-width: 767px) {\n  .product-item .product__description .product__price span {\n    font-size: 14px;\n    margin-left: 10px;\n  }\n}\n.product-item .product__description .product__price.product__price--discount h4 {\n  color: #218ab6;\n}\n\n.view-details {\n  position: absolute;\n  top: 24%;\n  right: 25%;\n  z-index: 100;\n  padding: 12px;\n  background: #218ab6;\n  color: #fff;\n  border-radius: 30px;\n  font-size: 14px;\n  font-weight: 400;\n  display: none;\n}\n\n.hover-details {\n  position: absolute;\n  z-index: 100;\n  padding: 12px;\n  background: #218ab6;\n  color: #fff;\n  font-size: 14px;\n  font-weight: 400;\n  left: 20%;\n  top: 33%;\n  border-radius: 30px;\n  transition: all ease-in-out 600ms;\n  display: none;\n}\n\n.brandslider {\n  text-align: center;\n}\n.brandslider .brand-list {\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n.brandslider .brand-list li {\n  display: flex;\n  flex-basis: calc(20% - 14px);\n  justify-content: center;\n  flex-direction: column;\n  margin: 10px 0 10px 10px;\n  position: relative;\n}\n.brandslider .brand-list li:hover .hover-details {\n  display: block;\n}\n\n.brand-link h2 {\n  padding: 15px 0px;\n  text-transform: capitalize;\n  font-size: 16px;\n  font-weight: 600;\n}\n.brand-link img {\n  width: 100%;\n}\n\n.product-item {\n  border: 1px solid #e2e8f0;\n  border-radius: 8px;\n}\n\n.section-products-featured .section-products-featured__header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n@media (min-width: 767px) {\n  .section-products-featured .section-products-featured__header {\n    margin-bottom: 45px;\n    border-bottom: 1px solid #e2e8f0;\n  }\n}\n.section-products-featured .section-products-featured__header h3 {\n  font-weight: 600;\n  font-size: 18px;\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 20px;\n}\n@media (min-width: 767px) {\n  .section-products-featured .section-products-featured__header h3 {\n    font-size: 22px;\n  }\n}\n.section-products-featured .products-carousel .swiper-container {\n  overflow: hidden;\n}\n.section-products-featured .products-carousel .swiper-container .swiper-wrapper {\n  position: relative;\n}\n.section-products-featured .products-carousel .swiper-container .swiper-wrapper .swiper-slide,\n.section-products-featured .products-carousel .swiper-container .swiper-wrapper .swiper-slide-active,\n.section-products-featured .products-carousel .swiper-container .swiper-wrapper .swiper-slide-duplicate {\n  width: 240px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  cursor: pointer !important;\n}\n\n.swiper-slide {\n  cursor: pointer !important;\n}\n\n.section-products-featured {\n  margin: 40px 0px;\n  padding: 30px 20px;\n  background: #ffffff;\n  border-radius: 10px;\n}\n\n.saveTime-Wrap {\n  padding: 0px 0px 50px 0px;\n}\n.saveTime-Wrap .saveTime img {\n  width: 100%;\n  height: 500px;\n}\n\n.PromotionBanner {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 50px;\n}\n.PromotionBanner img {\n  transition: all 0.2s ease-in-out;\n}\n.PromotionBanner img:hover {\n  -webkit-transform: scale(1.07);\n  /* Safari and Chrome */\n  -moz-transform: scale(1.07);\n  /* Firefox */\n  -ms-transform: scale(1.07);\n  /* IE 9 */\n  -o-transform: scale(1.07);\n  /* Opera */\n  transform: scale(1.07);\n}\n.PromotionBanner .PromotionLeft {\n  margin: 0px 20px;\n  overflow: hidden;\n  cursor: pointer;\n}\n.PromotionBanner .PromotionLeft img {\n  height: 580px;\n}\n.PromotionBanner .Promo-Banner-List {\n  display: grid;\n  grid-template-columns: auto;\n  column-gap: 10px;\n  row-gap: 1em;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.Achive-wrap {\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n.Achive-wrap .Achive-header {\n  margin-bottom: 45px;\n  border-bottom: 1px solid #ebebeb;\n}\n.Achive-wrap .Achive-header h2 {\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 15px;\n  font-size: 29px;\n  width: 400px;\n}\n.Achive-wrap .Achive-list {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n.Achive-wrap .Achive-list li {\n  transition: all ease-in-out 600ms;\n  border: 2px solid #eeeeee;\n  border-radius: 8px;\n  padding: 10px;\n  text-align: center;\n  width: 16%;\n  cursor: pointer;\n}\n.Achive-wrap .Achive-list li p {\n  padding-bottom: 20px;\n}\n.Achive-wrap .Achive-list li p svg {\n  width: 50px;\n  height: 50px;\n  stroke: #218ab6;\n  transition: all ease-in-out 600ms;\n}\n.Achive-wrap .Achive-list li p i {\n  color: #218ab6;\n  transition: all ease-in-out 600ms;\n  font-size: 50px;\n}\n.Achive-wrap .Achive-list li span {\n  transition: all ease-in-out 600ms;\n  font-size: 30px;\n  font-weight: 500;\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li h3 {\n  transition: all ease-in-out 600ms;\n  font-size: 18px;\n  font-weight: 600;\n  padding-top: 20px;\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover svg {\n  stroke: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover i {\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover span {\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover h3 {\n  color: #218ab6;\n}\n.Achive-wrap .Achive-list li:hover {\n  border: 2px solid #218ab6;\n  color: #218ab6;\n}\n\n.swiper-slide {\n  background-size: cover !important;\n}\n\n.Info-list {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.Info-list .card {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-width: 0;\n  word-wrap: break-word;\n  background-color: white;\n  background-clip: border-box;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.25rem;\n  margin-bottom: 15px;\n}\n.Info-list .card button {\n  font-size: 14px;\n  padding: 15px 20px;\n}\n.Info-list .card .card-body {\n  padding: 15px 20px;\n}\n\n.collapse:not(.show) {\n  display: none;\n}\n\n.How-works {\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n.How-works .How-works-header {\n  border-bottom: 1px solid #ebebeb;\n}\n.How-works .How-works-header h2 {\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 15px;\n  width: 200px;\n  font-size: 29px;\n  text-transform: capitalize;\n  padding-bottom: 20px;\n}\n.How-works .How-works-header p {\n  font-size: 16px;\n  line-height: 28px;\n  padding-top: 30px;\n  color: #3cce8f;\n}\n.How-works .How-works-body {\n  padding-top: 20px;\n}\n.How-works .How-works-body img {\n  width: 100%;\n  height: 100%;\n}\n.How-works .How-works-body p {\n  color: #4c8000;\n  line-height: 24px;\n  padding-bottom: 30px;\n}\n\n.InfoSections-Wrap {\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n\n.InfoSections-Wrap .Info-item {\n  width: 33%;\n}\n.InfoSections-Wrap .Info-item img {\n  width: 100%;\n  height: 340px;\n}\n.InfoSections-Wrap .InfoSections-header {\n  border-bottom: 1px solid #ebebeb;\n  margin-bottom: 65px;\n}\n.InfoSections-Wrap .InfoSections-header h2 {\n  font-size: 29px;\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 20px;\n  max-width: 350px;\n}\n\n.OurCustomerSay {\n  padding: 30px 20px;\n  background: #fff;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n.OurCustomerSay .heading {\n  border-bottom: 1px solid #ebebeb;\n  margin-bottom: 65px;\n}\n.OurCustomerSay .heading h2 {\n  font-size: 29px;\n  border-bottom: 2px solid #218ab6;\n  padding-bottom: 15px;\n  width: 600px;\n}\n.OurCustomerSay .Testimonial-slide {\n  text-align: center;\n}\n.OurCustomerSay .Testimonial-slide .swiper-slide {\n  padding: 0px 200px;\n}\n.OurCustomerSay .Testimonial-slide .swiper-slide img {\n  width: 150px;\n  height: 150px;\n  border: 1px solid;\n  border-radius: 100%;\n}\n.OurCustomerSay .Testimonial-slide .swiper-slide h3 {\n  font-size: 16px;\n  padding: 10px 0px;\n}\n.OurCustomerSay .Testimonial-slide .swiper-slide p {\n  font-size: 14px;\n  line-height: 22px;\n}\n.OurCustomerSay .Testimonial-slide .swiper-button-prev,\n.OurCustomerSay .Testimonial-slide .swiper-button-next {\n  bottom: 20px;\n  top: 50%;\n  transform: translateX(50%);\n  right: auto;\n  width: 30px;\n  height: 30px;\n  z-index: 100;\n  font-size: 13px;\n  display: flex;\n  cursor: pointer;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  display: none;\n  background-color: rgba(255, 255, 255, 0.12);\n  border-radius: 100%;\n}\n.OurCustomerSay .Testimonial-slide .swiper-button-prev:before,\n.OurCustomerSay .Testimonial-slide .swiper-button-next:before {\n  color: #fff;\n  content: \"\";\n  font-family: \"icons\";\n}\n.OurCustomerSay .Testimonial-slide .swiper-button-prev:hover,\n.OurCustomerSay .Testimonial-slide .swiper-button-next:hover {\n  background: #fff;\n}\n.OurCustomerSay .Testimonial-slide .swiper-button-prev:hover:before,\n.OurCustomerSay .Testimonial-slide .swiper-button-next:hover:before {\n  color: #000;\n}\n\n.subscribe {\n  margin-bottom: 30px;\n}\n.subscribe .subscribe__content {\n  padding: 35px 20px;\n  background-color: #fafafa;\n  background-repeat: no-repeat;\n  background-size: cover;\n  position: relative;\n  background-position: center;\n}\n@media (min-width: 767px) {\n  .subscribe .subscribe__content {\n    padding: 40px 60px 40px 60px;\n  }\n}\n@media (min-width: 1024px) {\n  .subscribe .subscribe__content {\n    padding: 80px 125px 80px 105px;\n    display: flex;\n    align-items: center;\n  }\n}\n.subscribe .subscribe__content:before {\n  content: \"\";\n  width: 100%;\n  left: 0;\n  top: 0;\n  z-index: 5;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.4);\n}\n.subscribe .subscribe__content * {\n  z-index: 10;\n  position: relative;\n}\n.subscribe .subscribe__content h4 {\n  font-size: 18px;\n  color: #fff;\n  margin-bottom: 20px;\n  line-height: 130%;\n  margin-right: auto;\n}\n@media (min-width: 767px) {\n  .subscribe .subscribe__content h4 {\n    font-size: 23px;\n  }\n}\n@media (min-width: 1024px) {\n  .subscribe .subscribe__content h4 {\n    width: 504px;\n    font-size: 26px;\n    margin-bottom: 0;\n  }\n}\n.subscribe .subscribe__content .subscribe__form input {\n  width: 100%;\n  height: 40px;\n  padding: 0 25px;\n  color: #ababab;\n  font-size: 13px;\n  background-color: #fff;\n  border-radius: 30px;\n  margin-right: 25px;\n}\n@media (min-width: 767px) {\n  .subscribe .subscribe__content .subscribe__form input {\n    width: auto;\n    height: 48px;\n    padding: 0 35px;\n  }\n}\n.subscribe .subscribe__content .subscribe__form .btn {\n  margin-top: 10px;\n  font-size: 11px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n@media (min-width: 767px) {\n  .subscribe .subscribe__content .subscribe__form .btn {\n    padding: 11px 20px;\n    font-size: 13px;\n    margin-top: 0;\n  }\n}\n\n.ckSection .section__intro {\n  margin-bottom: 36px;\n}\n.ckSection .section__intro h4 {\n  font-size: 23px;\n  font-weight: 300;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .ckSection .section__intro h4 {\n    font-size: 29px;\n  }\n}\n\n.mobileApp .androApp {\n  margin-top: 10px;\n}\n.mobileApp .appleApp {\n  padding: 15px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.mobileApp .appleApp .appleApp-logo {\n  padding-right: 20px;\n}\n.mobileApp .appleApp .appleApp-logo img {\n  width: 40px;\n}\n.mobileApp .appleApp .appleInfo p {\n  font-size: 14px;\n  font-weight: 500;\n  padding-bottom: 15px;\n  color: #ffffff;\n  text-transform: capitalize;\n}\n.mobileApp .appleApp .appleInfo h4 {\n  font-size: 16px;\n  font-weight: 500;\n  color: #ffffff;\n  text-transform: capitalize;\n}\n\n.footer-form {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.footer-form input,\n.footer-form textarea {\n  border: 1px solid #ebebeb;\n  padding: 8px;\n  width: 100%;\n  margin-bottom: 10px;\n  color: #131313;\n  background: #f2f3f8;\n  border-radius: 4px;\n}\n.footer-form button {\n  border: 0;\n  background: #218ab6;\n  border-radius: 30px;\n  color: #fff;\n  padding: 12px 30px;\n  text-transform: uppercase;\n}\n\n.f-info {\n  padding-top: 15px;\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  color: #f2f3f8;\n}\n.f-info li {\n  list-style: none;\n}\n.f-info li svg {\n  stroke: #4c8000;\n}\n.f-info h1 {\n  color: #f2f3f8;\n  font-size: 14px;\n}\n.f-info a {\n  font-size: 14px;\n}\n\n.site-footer {\n  padding-top: 50px;\n  background: #1a202c;\n}\n@media (min-width: 767px) {\n  .site-footer {\n    padding-top: 90px;\n  }\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__top {\n    display: flex;\n    flex-wrap: wrap;\n    padding-bottom: 60px;\n  }\n}\n@media (min-width: 1024px) {\n  .site-footer .site-footer__top {\n    flex-wrap: nowrap;\n  }\n}\n.site-footer .site-footer__description {\n  margin-right: auto;\n  margin-bottom: 70px;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__description {\n    width: 400px;\n    margin-bottom: 50px;\n  }\n}\n@media (min-width: 1024px) {\n  .site-footer .site-footer__description {\n    margin-bottom: 0;\n  }\n}\n.site-footer .site-footer__description svg {\n  object-fit: contain;\n  width: 30px;\n  height: 20px;\n  fill: white;\n  margin-right: 10px;\n}\n.site-footer .site-footer__description h6 {\n  display: flex;\n  color: #218ab6;\n  font-weight: 600;\n  align-items: center;\n  margin-bottom: 33px;\n  font-size: 18px;\n}\n.site-footer .site-footer__description p {\n  font-size: 13px;\n  line-height: 190%;\n}\n.site-footer .site-footer__social-networks {\n  display: flex;\n  margin-top: 20px;\n}\n.site-footer .site-footer__social-networks li {\n  font-size: 21px;\n  margin-right: 20px;\n}\n.site-footer .site-footer__social-networks li .footer-icon1 {\n  color: #3b5998;\n}\n.site-footer .site-footer__social-networks li .footer-icon2 {\n  color: #00acee;\n}\n.site-footer .site-footer__social-networks li .footer-icon3 {\n  color: #0e76a8;\n}\n.site-footer .site-footer__social-networks li .footer-icon4 {\n  color: #8a3ab9;\n}\n.site-footer .site-footer__social-networks li .footer-icon5 {\n  color: #ff0000;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__links {\n    display: flex;\n    width: 100%;\n  }\n}\n@media (min-width: 1024px) {\n  .site-footer .site-footer__links {\n    width: auto;\n  }\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__links ul {\n    margin-right: 50px;\n    margin-bottom: 0;\n  }\n}\n@media (min-width: 1024px) {\n  .site-footer .site-footer__links ul {\n    margin-right: 50px;\n  }\n}\n.site-footer .site-footer__links ul:last-of-type {\n  margin-right: 0;\n}\n.site-footer .site-footer__links ul .f-heading {\n  font-size: 16px;\n  font-weight: 600;\n  color: #218ab6;\n}\n.site-footer .site-footer__links ul li a {\n  font-size: 14px;\n  color: #fff;\n  margin-bottom: 12px;\n  font-weight: 300;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__links ul li {\n    margin-bottom: 15px;\n  }\n}\n.site-footer .site-footer__links ul li:first-child {\n  font-weight: 600;\n  margin-bottom: 26px;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__links ul li:first-child {\n    margin-bottom: 34px;\n  }\n}\n.site-footer .site-footer__links ul li a:hover {\n  text-decoration: underline;\n}\n.site-footer .site-footer__bottom {\n  padding: 20px 0;\n  border-top: 1px solid #ebebeb;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__bottom {\n    padding: 33px 0;\n  }\n}\n.site-footer .site-footer__bottom .container {\n  font-size: 11px;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .site-footer .site-footer__bottom .container {\n    font-size: 16px;\n  }\n}\n\n.campaings-link img {\n  width: 100%;\n}\n\n.reg-log-role {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n.reg-log-role .cus,\n.reg-log-role .ser {\n  background: #000;\n  height: 50px;\n  width: 250px;\n  color: #ffffff;\n}\n.reg-log-role .cus:hover,\n.reg-log-role .ser:hover {\n  background: #4c8000;\n}\n.reg-log-role .or {\n  background: #000;\n  height: 50px;\n  width: 60px;\n  color: #ffffff;\n  border-left: 2px solid #4c8000;\n  border-right: 2px solid #4c8000;\n}\n.reg-log-role .or:hover {\n  background: #4c8000;\n}\n\n.shop-data {\n  display: flex;\n  justify-content: space-between;\n  margin-left: 282px;\n  margin-top: 10px;\n  margin-bottom: 50px;\n  cursor: pointer;\n}\n@media (min-width: 767px) {\n  .shop-data {\n    display: flex;\n    justify-content: space-between;\n  }\n}\n.shop-data li {\n  text-align: center;\n  margin-bottom: 50px;\n  background: #fff;\n  padding: 10px;\n  border-radius: 10px;\n}\n@media (min-width: 767px) {\n  .shop-data li {\n    width: 19.5%;\n    margin-bottom: 0;\n    text-align: left;\n  }\n}\n.shop-data li i {\n  height: 55px;\n  width: 55px;\n  font-size: 20px;\n  flex-shrink: 0;\n  display: flex;\n  color: #4c8000;\n  border-radius: 10px;\n  transition: all 0.3s ease;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 6px;\n  margin-left: auto;\n  margin-right: auto;\n}\n@media (min-width: 767px) {\n  .shop-data li i {\n    margin-bottom: 5px;\n    margin-left: 0;\n    margin-right: 0;\n  }\n}\n.shop-data li .data-item__content h4 {\n  margin-bottom: 10px;\n}\n.shop-data li .data-item__content p {\n  font-size: 13px;\n  line-height: 150%;\n}\n.shop-data li:hover i {\n  color: #4c8000;\n  background: var(--color-orange-light);\n}\n\n.checkbox-color-wrapper {\n  display: flex;\n  position: relative;\n}\n.checkbox-color-wrapper .checkbox-color {\n  width: calc(100% / 6);\n}\n\n.checkbox-color {\n  font-weight: 300;\n  font-size: 14px;\n  display: flex;\n  color: #000;\n  margin-bottom: 18px;\n  align-items: center;\n}\n.checkbox-color .checkbox__check {\n  display: block;\n  width: 100%;\n  position: relative;\n  padding-bottom: 100%;\n  border-top: 1px solid #d4d4d4;\n  border-bottom: 1px solid #d4d4d4;\n  border-right: 1px solid #d4d4d4;\n}\n.checkbox-color .checkbox__check .checkbox__color {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  right: 8px;\n  bottom: 8px;\n}\n.checkbox-color:first-of-type .checkbox__check {\n  border-left: 1px solid #d4d4d4;\n}\n.checkbox-color input {\n  height: 0;\n  width: 0;\n  display: none;\n  overflow: hidden;\n}\n.checkbox-color input:checked + .checkbox__check {\n  background-color: #dbdbdb;\n}\n\n@media (min-width: 767px) {\n  .products-page .container {\n    display: flex;\n    align-items: flex-start;\n  }\n}\n.products-page .products-filter .btn-submit {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 150px;\n  margin-top: 20px;\n  margin-bottom: 30px;\n}\n@media (min-width: 767px) {\n  .products-page .products-filter .btn-submit {\n    display: none;\n  }\n}\n.products-page .products-filter .products-filter__wrapper {\n  width: 300px;\n  left: -300px;\n  top: 101px;\n  overflow: auto;\n  height: calc(100% - 101px);\n  flex-shrink: 0;\n  position: fixed;\n  z-index: 99;\n  padding: 20px 20px;\n  background-color: #fff;\n  transition: all 0.4s ease;\n}\n@media (min-width: 767px) {\n  .products-page .products-filter .products-filter__wrapper {\n    top: 134px;\n  }\n}\n@media (min-width: 1024px) {\n  .products-page .products-filter .products-filter__wrapper {\n    position: relative;\n    left: 0;\n    top: 0;\n    padding: 0;\n    height: auto;\n    margin-right: 20px;\n    width: 220px;\n  }\n}\n@media (min-width: 1202px) {\n  .products-page .products-filter .products-filter__wrapper {\n    width: 260px;\n    top: 0;\n    margin-right: 20px;\n  }\n}\n.products-page .products-filter .products-filter__wrapper.products-filter__wrapper--open {\n  left: 0;\n}\n.products-page .products-filter .products-filter__menu-btn {\n  margin-bottom: 20px;\n  top: 65px;\n  width: 100%;\n  left: 0;\n  right: 0;\n  padding: 8px 16px;\n  z-index: 100;\n  font-size: 12px;\n  background-color: #fff;\n  border-bottom: 1px solid #e6e6e6;\n}\n@media (min-width: 767px) {\n  .products-page .products-filter .products-filter__menu-btn {\n    top: 100px;\n  }\n}\n@media (min-width: 1024px) {\n  .products-page .products-filter .products-filter__menu-btn {\n    display: none;\n  }\n}\n.products-page .products-filter .products-filter__menu-btn i {\n  display: inline-block;\n  transition: all 0.3s ease;\n  transform: rotate(270deg);\n}\n.products-page .products-filter .products-filter__menu-btn.products-filter__menu-btn--active i {\n  transform: rotate(90deg);\n}\n.products-page .products-filter .products-filter__block {\n  padding: 20px 21px;\n  margin-bottom: 13px;\n  border: 1px solid #e6e6e6;\n}\n@media (min-width: 1024px) {\n  .products-page .products-filter .products-filter__block {\n    padding: 24px 31px;\n  }\n}\n.products-page .products-filter .products-filter__block > button {\n  font-size: 12px;\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n  width: 100%;\n  text-transform: uppercase;\n}\n.products-page .products-filter .products-filter__block > button i {\n  font-size: 21px;\n  margin-left: auto;\n}\n.products-page .products-filter .rc-slider .rc-slider-handle {\n  height: 20px;\n  width: 20px;\n  margin-top: -7px;\n  border-color: #000;\n}\n.products-page .products-filter .rc-slider .rc-slider-handle.rc-slider-handle-dragging {\n  box-shadow: none;\n}\n.products-page .products-filter .rc-slider .rc-slider-track {\n  background: #000000;\n}\n.products-page .products-filter .products-filter__block__content {\n  padding-top: 25px;\n}\n.products-page .products-content {\n  width: 100%;\n}\n.products-page .products-content .products-content__intro {\n  display: flex;\n  position: relative;\n  align-items: center;\n  margin-bottom: 35px;\n  flex-wrap: wrap;\n  background: #fff;\n  padding: 10px;\n  border-radius: 4px;\n}\n.products-page .products-content .products-content__intro h2 {\n  font-size: 18px;\n  margin-right: auto;\n  font-weight: 300;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro h2 {\n    font-size: 24px;\n  }\n}\n.products-page .products-content .products-content__intro h2 span {\n  color: #d8d8d8;\n}\n.products-page .products-content .products-content__intro .products-filter-btn {\n  font-size: 16px;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-filter-btn {\n    display: none;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter {\n  position: absolute;\n  width: 290px;\n  padding: 20px;\n  top: 150%;\n  right: 0;\n  display: none;\n  z-index: 50;\n  border: 1px solid #e5e5e5;\n  background-color: #fff;\n}\n.products-page .products-content .products-content__intro .products-content__filter.products-order-open {\n  display: block;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter {\n    display: flex;\n    width: 100%;\n    padding: 0;\n    border: none;\n    position: static;\n    margin-top: 30px;\n  }\n}\n@media (min-width: 1024px) {\n  .products-page .products-content .products-content__intro .products-content__filter {\n    width: auto;\n    margin-top: 0;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select:last-of-type {\n  margin-bottom: 0;\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select:first-of-type {\n  margin-left: 0;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter .products__filter__select {\n    margin-left: 42px;\n    margin-bottom: 0;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select h4 {\n  font-size: 13px;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter .products__filter__select h4 {\n    font-size: 16px;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select .select-wrapper {\n  margin-left: auto;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter .products__filter__select .select-wrapper {\n    margin-left: 15px;\n  }\n}\n.products-page .products-content .products-content__intro .products-content__filter .products__filter__select .select-wrapper select {\n  font-size: 13px;\n  padding: 6px 25px 6px 8px;\n}\n@media (min-width: 767px) {\n  .products-page .products-content .products-content__intro .products-content__filter .products__filter__select .select-wrapper select {\n    padding: 9px 38px 9px 12px;\n    font-size: 15px;\n  }\n}\n\n.checkbox {\n  font-weight: 300;\n  font-size: 14px;\n  display: flex;\n  color: #000;\n  margin-bottom: 18px;\n  align-items: center;\n}\n.checkbox .checkbox__check {\n  display: block;\n  width: 26px;\n  height: 26px;\n  flex-shrink: 0;\n  position: relative;\n  margin-right: 18px;\n  border: 1px solid #d4d4d4;\n}\n.checkbox .checkbox__check:before {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 4px;\n  left: 9px;\n  opacity: 0;\n  width: 7px;\n  height: 12.5px;\n  transform: scale(1) rotate(45deg);\n  z-index: 100;\n  border: 1px solid black;\n  -webkit-transition: all 0.2s linear;\n  -o-transition: all 0.2s linear;\n  transition: all 0.2s linear;\n  border-width: 0 2px 2px 0;\n}\n.checkbox input:checked + .checkbox__check:before {\n  opacity: 1;\n}\n.checkbox.checkbox--square {\n  position: relative;\n  width: calc(100% / 6);\n}\n.checkbox.checkbox--square input:checked + .checkbox__check {\n  background-color: #000;\n  border-color: #000;\n}\n.checkbox.checkbox--square input:checked + .checkbox__check:before {\n  opacity: 0;\n}\n.checkbox.checkbox--square input:checked ~ p {\n  color: #fff;\n}\n.checkbox.checkbox--square input {\n  display: none;\n}\n.checkbox.checkbox--square p {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n.checkbox.checkbox--square .checkbox__check {\n  display: block;\n  width: 100%;\n  margin-right: 0;\n  position: relative;\n  padding-bottom: 100%;\n  border-left: none;\n  border-top: 1px solid #d4d4d4;\n  border-bottom: 1px solid #d4d4d4;\n  border-right: 1px solid #d4d4d4;\n}\n.checkbox.checkbox--square .checkbox__check .checkbox__color {\n  position: absolute;\n  top: 8px;\n  left: 8px;\n  right: 8px;\n  bottom: 8px;\n}\n.checkbox.checkbox--square:first-of-type .checkbox__check {\n  border-left: 1px solid #d4d4d4;\n}\n\n.checkbox-square-wrapper {\n  display: flex;\n}\n.products-list {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -15px;\n}\n@media (min-width: 767px) {\n  .products-list {\n    margin-right: -33px;\n  }\n}\n@media (min-width: 1024px) {\n  .products-list {\n    margin-right: 0;\n  }\n}\n.products-list .product-item {\n  width: calc(100% / 2 - 15px);\n  margin-bottom: 50px;\n  margin-right: 15px;\n}\n@media (min-width: 767px) {\n  .products-list .product-item {\n    margin-right: 25px;\n    margin-bottom: 40px;\n    width: calc(100% / 4 - 25px);\n  }\n}\n@media (min-width: 1024px) {\n  .products-list .product-item {\n    margin-right: 25px;\n    margin-bottom: 40px;\n    width: calc(100% / 4 - 25px);\n  }\n}\n\n.select-wrapper {\n  position: relative;\n}\n.select-wrapper:before {\n  right: 15px;\n  font-family: \"icons\";\n  display: block;\n  position: absolute;\n  content: \"\";\n  top: 50%;\n  color: #aaaaaa;\n  font-size: 16px;\n  transform: translateY(-50%);\n}\n.select-wrapper select {\n  font-size: 15px;\n  padding: 9px 38px 9px 12px;\n  border: 1px solid #d8d8d8;\n  border-radius: 50px;\n}\n.select-wrapper select option {\n  font-size: 15px;\n}\n.select-wrapper.select-form select {\n  width: 100%;\n}\n\n.quantity-buttons {\n  display: flex;\n  align-items: center;\n}\n.quantity-buttons .btn {\n  margin: 0 17px;\n}\n\n.quantity-button {\n  border-radius: 50px;\n  height: 38px;\n  padding: 0 20px;\n  display: inline-flex;\n  align-items: center;\n  border: 1px solid #d8d8d8;\n}\n@media (min-width: 767px) {\n  .quantity-button {\n    height: 49px;\n  }\n}\n.quantity-button .quantity-button__btn {\n  font-size: 23px;\n  font-weight: 400;\n}\n.quantity-button span {\n  font-size: 18px;\n  color: #000;\n  margin: 0 18px;\n  font-weight: 700;\n}\n\n.btn-heart {\n  border-radius: 100%;\n  width: 49px;\n  height: 49px;\n  display: flex;\n  font-size: 16px;\n  align-items: center;\n  justify-content: center;\n  border: 1px solid #d8d8d8;\n}\n.btn-heart:hover, .btn-heart.btn-heart--active {\n  color: #ffffff;\n  background-color: #4c8000;\n}\n\n.product-single-page .section {\n  margin-bottom: 90;\n}\n\n.product-single {\n  margin-bottom: 70px;\n}\n@media (min-width: 767px) {\n  .product-single {\n    margin-bottom: 170px;\n  }\n}\n.product-single .product-single__description {\n  max-width: 938px;\n  margin: 0 auto;\n  flex-wrap: wrap;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description {\n    display: flex;\n    justify-content: space-between;\n  }\n}\n.product-single .product-single__description .product-description-block {\n  text-align: center;\n  width: 100%;\n  margin-bottom: 60px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description .product-description-block {\n    width: 48%;\n    margin-bottom: 0;\n  }\n}\n.product-single .product-single__description .product-description-block i {\n  display: block;\n  font-size: 30px;\n  margin-bottom: 30px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description .product-description-block i {\n    font-size: 38px;\n    margin-bottom: 48px;\n  }\n}\n.product-single .product-single__description .product-description-block h4 {\n  color: #000;\n  font-weight: 700;\n  font-size: 15px;\n  margin-bottom: 25px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description .product-description-block h4 {\n    margin-bottom: 35px;\n    font-size: 16px;\n  }\n}\n.product-single .product-single__description .product-description-block p {\n  color: #000;\n  font-size: 13px;\n  line-height: 145%;\n  text-align: left;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__description .product-description-block p {\n    font-size: 14px;\n  }\n}\n.product-single .product-single__content {\n  margin-bottom: 50px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__content {\n    display: flex;\n    align-items: flex-start;\n    margin-bottom: 100px;\n  }\n}\n@media (min-width: 767px) {\n  .product-single .product-gallery {\n    margin-right: 110px;\n  }\n}\n.product-single .product-gallery .product-gallery__thumbs {\n  height: 300px;\n}\n@media (min-width: 767px) {\n  .product-single .product-gallery .product-gallery__thumbs {\n    height: 491px;\n  }\n}\n@media (min-width: 767px) {\n  .product-single .product-gallery .product-gallery__thumb {\n    height: calc(100% / 5 - 15px);\n  }\n}\n.product-single .product-content {\n  flex: 1;\n}\n.product-single .product-single__reviews {\n  display: flex;\n  align-items: flex-start;\n  flex-wrap: wrap;\n}\n.product-single .product-single__reviews .reviews-list {\n  width: 100%;\n  margin-left: auto;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__reviews .reviews-list {\n    width: 48%;\n  }\n}\n.product-single .product-single__info .product-single__info-btns {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 90px;\n}\n.product-single .product-single__info .product-single__info-btns .btn {\n  margin: 0 15px;\n  padding: 8px 22px;\n}\n@media (min-width: 767px) {\n  .product-single .product-single__info .product-single__info-btns .btn {\n    padding: 12px 28px;\n  }\n}\n.product-single .product-single__info .product-single__info-btns .btn.btn--active {\n  border: 1px solid var(--color-orange);\n}\n\n.product-content {\n  position: relative;\n}\n.product-content .product-content__intro {\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .product-content .product-content__intro {\n    margin-bottom: 60px;\n  }\n}\n.product-content .product-filter-item {\n  margin-bottom: 38px;\n}\n.product-content .product-filter-item:last-of-type {\n  margin-bottom: 0;\n}\n.product-content .product-filter-item h5 {\n  font-weight: 300;\n  font-size: 13px;\n  margin-bottom: 19px;\n}\n.product-content .product-filter-item h5 strong {\n  font-weight: 700;\n}\n.product-content .product-filter-item .checkbox-color-wrapper .checkbox-color {\n  width: 30px;\n  height: 30px;\n  margin-right: 8px;\n  border: none;\n}\n@media (min-width: 767px) {\n  .product-content .product-filter-item .checkbox-color-wrapper .checkbox-color {\n    width: 43px;\n    height: 43px;\n    margin-right: 13px;\n  }\n}\n.product-content .product-filter-item .checkbox-color-wrapper .checkbox-color .checkbox__check {\n  border: 1px solid #d4d4d4;\n}\n.product-content .product-filter-item .checkbox-color-wrapper .checkbox-color .checkbox__color {\n  top: 4px;\n  left: 4px;\n  right: 4px;\n  bottom: 4px;\n}\n@media (min-width: 767px) {\n  .product-content .product-filter-item .checkbox-color-wrapper .checkbox-color .checkbox__color {\n    top: 8px;\n    left: 8px;\n    right: 8px;\n    bottom: 8px;\n  }\n}\n.product-content .product__prices {\n  display: flex;\n}\n.product-content .product__prices h4 {\n  font-weight: 400;\n  color: #ff0000;\n  font-size: 18px;\n}\n@media (min-width: 767px) {\n  .product-content .product__prices h4 {\n    font-size: 30px;\n  }\n}\n.product-content .product__prices span {\n  margin-left: 30px;\n  font-weight: 400;\n  font-size: 18px;\n  color: #cecece;\n}\n@media (min-width: 767px) {\n  .product-content .product__prices span {\n    font-size: 30px;\n  }\n}\n.product-content .product__id {\n  top: -10px;\n  right: 0;\n  text-align: right;\n  line-height: 146%;\n  color: #cecece;\n  font-size: 12px;\n  position: absolute;\n}\n.product-content .product__name {\n  font-size: 20px;\n  font-weight: 300;\n  margin-bottom: 9px;\n}\n@media (min-width: 767px) {\n  .product-content .product__name {\n    font-size: 30px;\n    margin-bottom: 15px;\n  }\n}\n.product-content .product-on-sale {\n  background-color: #ff0000;\n  color: #fff;\n  font-size: 11px;\n  font-weight: 500;\n  padding: 5px 9px;\n  text-transform: uppercase;\n  border-radius: 40px;\n  margin-bottom: 15px;\n  display: inline-block;\n}\n@media (min-width: 767px) {\n  .product-content .product-on-sale {\n    font-size: 12px;\n    margin-bottom: 25px;\n  }\n}\n\n.product-gallery {\n  display: flex;\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .product-gallery {\n    margin-bottom: 0;\n  }\n}\n.product-gallery .product-gallery__thumbs {\n  display: none;\n}\n@media (min-width: 767px) {\n  .product-gallery .product-gallery__thumbs {\n    width: 97px;\n    display: block;\n    margin-right: 28px;\n  }\n}\n.product-gallery .product-gallery__thumb {\n  width: 100%;\n  height: 97px;\n  margin-bottom: 15px;\n}\n.product-gallery .product-gallery__thumb img {\n  width: 100%;\n  height: 100%;\n  object-position: top center;\n  object-fit: cover;\n}\n.product-gallery .product-gallery__image {\n  height: 300px;\n  width: 100%;\n}\n@media (min-width: 767px) {\n  .product-gallery .product-gallery__image {\n    width: 476px;\n    height: 476px;\n  }\n}\n.product-gallery .product-gallery__image img {\n  width: 100%;\n  height: 100%;\n  object-position: top center;\n  object-fit: cover;\n}\n\n.review-item {\n  display: flex;\n}\n.review-item .review__avatar {\n  width: 40px;\n  margin-right: 27px;\n  flex-shrink: 0;\n  background-color: gray;\n  border-radius: 100%;\n  height: 40px;\n}\n.review-item .review__avatar img {\n  border-radius: 100%;\n  object-fit: cover;\n  height: 100%;\n  width: 100%;\n}\n.review-item .review__content {\n  flex: 1;\n}\n.review-item .review__content h3 {\n  font-size: 13px;\n  font-weight: 700;\n  margin-bottom: 4px;\n}\n.review-item .review__content .review__comment {\n  font-size: 13px;\n  color: #000;\n  line-height: 155%;\n}\n.review-item .review__content .react-rater {\n  margin-bottom: 5px;\n}\n.review-item .review__content .react-rater .react-rater-star {\n  margin-right: 4px;\n  font-size: 21px;\n  line-height: 100%;\n}\n.review-item .review__content .react-rater .react-rater-star.is-active {\n  color: var(--color-orange);\n}\n\n.reviews-list .review-item {\n  margin-bottom: 35px;\n}\n.reviews-list .review-item:last-of-type {\n  margin-bottom: 0;\n}\n\n.product-punctuation {\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 50px;\n}\n@media (min-width: 767px) {\n  .product-punctuation {\n    display: flex;\n    justify-content: center;\n    margin-bottom: 0;\n    flex-wrap: wrap;\n  }\n}\n.product-punctuation .product-punctuation__values {\n  text-align: center;\n  margin-bottom: 25px;\n}\n@media (min-width: 767px) {\n  .product-punctuation .product-punctuation__values {\n    margin-bottom: 0;\n  }\n}\n.product-punctuation .product-punctuation__values h3 {\n  font-size: 59px;\n  font-weight: 700;\n  margin-bottom: 6px;\n}\n.product-punctuation .product-punctuation__values .react-rater {\n  margin-bottom: 9px;\n}\n.product-punctuation .product-punctuation__values .react-rater .react-rater-star {\n  margin-right: 4px;\n  font-size: 23px;\n  line-height: 100%;\n}\n.product-punctuation .product-punctuation__values .react-rater .react-rater-star.is-active {\n  color: var(--color-orange);\n}\n@media (min-width: 767px) {\n  .product-punctuation .product-punctuation__rates {\n    width: 200px;\n    margin-left: 68px;\n  }\n}\n.product-punctuation .punctuation-btn-wrapper {\n  width: 100%;\n  margin-top: 30px;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .product-punctuation .punctuation-btn-wrapper {\n    margin-top: 50px;\n  }\n}\n\n.punctuations-lists .punctuation-item {\n  display: flex;\n  align-items: center;\n}\n.punctuations-lists .punctuation-item .react-rater .react-rater-star.is-active {\n  color: var(--color-orange);\n}\n.punctuations-lists .punctuation-item > span {\n  font-size: 12px;\n  color: #000;\n  margin: 0 auto;\n}\n.punctuations-lists .punctuation-item .punctuation-item__bar {\n  height: 2px;\n  width: 142px;\n  margin-left: auto;\n  border-radius: 40px;\n  position: relative;\n  background-color: #dbdbdb;\n}\n.punctuations-lists .punctuation-item .punctuation-item__bar .punctuation-item__bar__current {\n  position: absolute;\n  left: 0;\n  top: 0;\n  height: 100%;\n  width: 50%;\n  z-index: 10;\n  background-color: var(--color-orange);\n}\n\n.checkout-steps {\n  display: flex;\n  align-items: center;\n}\n.checkout-steps li {\n  position: relative;\n  padding-right: 60px;\n}\n@media (min-width: 767px) {\n  .checkout-steps li {\n    padding-right: 105px;\n  }\n}\n.checkout-steps li.active i {\n  color: #fff;\n  background: var(--color-orange);\n}\n.checkout-steps li.done i {\n  color: var(--color-orange);\n  border: 1.3px solid var(--color-orange);\n}\n.checkout-steps li:before {\n  top: 50%;\n  right: 15px;\n  height: 1px;\n  left: 45px;\n  content: \"\";\n  display: block;\n  background: #eeeeee;\n  margin-top: -1px;\n  position: absolute;\n}\n.checkout-steps li i {\n  display: flex;\n  width: 36px;\n  height: 36px;\n  border-radius: 100%;\n  justify-content: center;\n  align-items: center;\n  color: #d8d8d8;\n  font-size: 16px;\n}\n.checkout-steps li i.icon-delivery {\n  font-size: 12px;\n}\n.checkout-steps li:last-of-type {\n  padding-right: 0;\n}\n.checkout-steps li:last-of-type:before {\n  content: none;\n}\n\n.wish-list {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  border: 1px solid #e2e8f0;\n  margin-bottom: 10px;\n}\n.wish-list img {\n  width: 100px;\n  height: 100px;\n}\n\n.cart {\n  padding: 52px 0;\n}\n.cart .cart__intro {\n  display: flex;\n  align-items: center;\n  margin-bottom: 35px;\n  justify-content: space-between;\n}\n@media (min-width: 767px) {\n  .cart .cart__intro {\n    margin-bottom: 66px;\n  }\n}\n.cart .cart__title {\n  font-size: 20px;\n  font-weight: 700;\n  line-height: 140%;\n}\n.cart .cart-actions {\n  margin-top: 75px;\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n.cart .cart-actions .btn {\n  margin-left: 20px;\n}\n.cart .cart-actions .cart-actions__items-wrapper {\n  display: flex;\n  width: 100%;\n  align-items: center;\n}\n@media (min-width: 767px) {\n  .cart .cart-actions .cart-actions__items-wrapper {\n    margin-top: 30px;\n  }\n}\n@media (min-width: 1024px) {\n  .cart .cart-actions .cart-actions__items-wrapper {\n    width: auto;\n    margin-top: 0;\n  }\n}\n.cart .cart-actions.cart-actions--checkout {\n  display: flex;\n  flex-direction: column-reverse;\n}\n@media (min-width: 767px) {\n  .cart .cart-actions.cart-actions--checkout {\n    flex-direction: row;\n  }\n}\n.cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper {\n  margin-bottom: 30px;\n  justify-content: space-between;\n}\n@media (min-width: 767px) {\n  .cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper {\n    width: auto;\n    justify-content: flex-start;\n  }\n}\n.cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper .btn {\n  padding: 9px 13px;\n  font-size: 10px;\n  margin-left: 0;\n}\n@media (min-width: 767px) {\n  .cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper .btn {\n    font-size: 12px;\n    padding: 11px 20px;\n  }\n}\n.cart .cart-actions.cart-actions--checkout .cart-actions__items-wrapper .btn:first-of-type {\n  margin-right: 10px;\n}\n.cart .icon-cancel {\n  font-size: 13px;\n}\n.cart .cart__btn-back {\n  font-weight: 700;\n  font-size: 14px;\n  color: #000;\n  margin-right: auto;\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .cart .cart__btn-back {\n    margin-bottom: 0;\n  }\n}\n.cart .cart__btn-back i {\n  margin-right: 15px;\n}\n.cart .cart__promo-code {\n  padding: 0 20px;\n  font-size: 13px;\n  height: 40px;\n  width: 100%;\n  margin-bottom: 18px;\n  border: 1px solid #d8d8d8;\n  border-radius: 30px;\n}\n@media (min-width: 767px) {\n  .cart .cart__promo-code {\n    height: 49px;\n    width: auto;\n    margin-bottom: 0;\n    margin-right: 0;\n  }\n}\n@media (min-width: 1024px) {\n  .cart .cart__promo-code {\n    margin-right: 70px;\n  }\n}\n.cart .cart__promo-code::-webkit-input-placeholder {\n  color: #ababab;\n}\n.cart .cart__promo-code:-moz-placeholder {\n  /* Firefox 18- */\n  color: #ababab;\n}\n.cart .cart__promo-code::-moz-placeholder {\n  /* Firefox 19+ */\n  color: #ababab;\n}\n.cart .cart__promo-code:-ms-input-placeholder {\n  color: #ababab;\n}\n.cart .cart-actions__total {\n  font-weight: 300;\n  margin-right: auto;\n}\n@media (min-width: 1024px) {\n  .cart .cart-actions__total {\n    margin-right: 60px;\n  }\n}\n.cart .cart-actions__total strong {\n  margin-left: 15px;\n  color: #000;\n  font-weight: 700;\n}\n\n.cart-list {\n  width: 100%;\n}\n.cart-list table {\n  width: 100%;\n}\n.cart-list tr {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  position: relative;\n  padding-bottom: 18px;\n  margin-bottom: 18px;\n  border-bottom: 1px solid #d8d8d8;\n}\n@media (min-width: 767px) {\n  .cart-list tr {\n    display: table-row;\n    padding: 0;\n    margin: 0;\n    border: none;\n  }\n}\n.cart-list tr:last-of-type {\n  border-bottom: none;\n}\n.cart-list tr:first-of-type {\n  display: none;\n}\n@media (min-width: 767px) {\n  .cart-list tr:first-of-type {\n    display: table-row;\n  }\n}\n.cart-list tr th {\n  text-align: center;\n  font-size: 16px;\n  color: #218ab6;\n  padding-bottom: 30px;\n}\n.cart-list tr td {\n  display: block;\n  flex-wrap: wrap;\n  padding: 10px 0;\n  color: #000;\n}\n@media (max-width: 767px) {\n  .cart-list tr td {\n    width: 100% !important;\n  }\n}\n@media (min-width: 767px) {\n  .cart-list tr td {\n    display: table-cell;\n    vertical-align: middle;\n    text-align: center;\n    padding: 20px 0;\n  }\n}\n.cart-list tr td.cart-item-before:before {\n  font-weight: 600;\n  margin-right: 15px;\n  content: attr(data-label) \": \";\n}\n@media (min-width: 767px) {\n  .cart-list tr td.cart-item-before:before {\n    display: none;\n  }\n}\n.cart-list tr td:nth-of-type(1) {\n  width: 30%;\n}\n.cart-list tr td:nth-of-type(2) {\n  width: 12%;\n}\n.cart-list tr td:nth-of-type(3) {\n  width: 12%;\n}\n.cart-list tr td:nth-of-type(4) {\n  width: 50% !important;\n  text-align: right;\n}\n@media (min-width: 767px) {\n  .cart-list tr td:nth-of-type(4) {\n    text-align: center;\n    width: 23% !important;\n  }\n}\n.cart-list tr td:nth-of-type(5) {\n  text-align: left;\n  padding-left: 15px;\n  width: 50% !important;\n}\n@media (min-width: 767px) {\n  .cart-list tr td:nth-of-type(5) {\n    text-align: center;\n    width: 23% !important;\n  }\n}\n.cart-list tr td.cart-item-cancel {\n  top: 5px;\n  right: 0;\n  width: auto !important;\n  position: absolute;\n}\n@media (min-width: 767px) {\n  .cart-list tr td.cart-item-cancel {\n    position: static;\n  }\n}\n.cart-list tr td.cart-item-cancel i {\n  cursor: pointer;\n}\n\n.pop-cart-wrap {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.pop-cart-product {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.pop-cart-product .pop-cart-product__img img {\n  width: 70px;\n  height: 70px;\n}\n.pop-cart-product .pop-cart-product__content {\n  width: 200px !important;\n}\n.pop-cart-product .pop-cart-product__content div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 10px;\n}\n\n.cart-product {\n  display: flex;\n  align-items: center;\n}\n.cart-product .cart-product__img {\n  height: 70px;\n  width: 70px;\n  background: #fafafa;\n  border-radius: 100%;\n  margin-right: 25px;\n}\n@media (min-width: 767px) {\n  .cart-product .cart-product__img {\n    margin-right: 48px;\n  }\n}\n.cart-product .cart-product__img img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 100%;\n  object-position: top center;\n}\n.cart-product .cart-product__content {\n  padding-right: 25px;\n  text-align: left;\n}\n@media (min-width: 767px) {\n  .cart-product .cart-product__content {\n    padding: 0;\n  }\n}\n.cart-product .cart-product__content h3 {\n  font-size: 16px;\n  font-weight: 700;\n  margin-bottom: 10px;\n}\n.cart-product .cart-product__content p {\n  font-size: 13px;\n  font-weight: 300;\n  color: #c4c4c4;\n}\n\n.btn-cart {\n  position: relative;\n  transition: all 600ms;\n}\n.btn-cart svg {\n  stroke: #4c8000;\n}\n.btn-cart .btn-cart__count {\n  bottom: 0;\n  right: 0;\n  font-size: 10px;\n  width: 13px;\n  height: 13px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  background-color: #4c8000;\n  border-radius: 100%;\n  position: absolute;\n  z-index: 100;\n}\n\nli {\n  list-style: none;\n}\n\n.cart-btn-hv:hover .Cart-popup-outer {\n  display: block;\n}\n\n.Cart-popup-outer {\n  position: absolute;\n  top: 47px;\n  right: 45px;\n  background: transparent;\n  padding: 20px;\n  transition: all 600ms;\n  display: none;\n}\n.Cart-popup-outer .Cart-popup {\n  background: #fff;\n  padding: 20px;\n  border: 1px solid #e2e8f0;\n  width: auto;\n}\n.Cart-popup-outer .cart-list {\n  padding-bottom: 20px;\n}\n.Cart-popup-outer .cart-list .cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.Cart-popup-outer .cart-list .cart-item img {\n  width: 60px;\n  height: 60px;\n  padding-right: 10px;\n}\n.Cart-popup-outer .cart-list .cart-item .Pop-product-name {\n  font-size: 14px;\n  font-weight: 500;\n}\n.Cart-popup-outer .cart-list .cart-item .Pop-delete {\n  padding-left: 10px;\n}\n.Cart-popup-outer .cart-list .cart-item .Pop-delete i {\n  font-size: 14px;\n}\n.Cart-popup-outer .cart-list .cart-item h4 {\n  padding-top: 10px;\n  font-size: 14px;\n  font-weight: 500;\n}\n.Cart-popup-outer .cart-popup-footer-wrap {\n  border-top: 1px solid #e2e8f0;\n}\n.Cart-popup-outer .cart-popup-footer-wrap .cart-popup-footer {\n  padding-top: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.Cart-popup-outer .cart-popup-footer-wrap .cart-popup-footer li:first-child {\n  margin-right: 20px;\n}\n.Cart-popup-outer .cart-popup-footer-wrap .cart-popup-footer a {\n  padding: 8px 15px;\n  font-size: 13px;\n  background: #4c8000;\n  color: #fff;\n  border-radius: 4px;\n}\n\n.modal {\n  position: fixed;\n  top: 40%;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  outline: 0;\n}\n\n.modal-open .modal {\n  overflow-x: hidden;\n}\n\n.fade {\n  -webkit-transition: opacity 0.15s linear;\n  transition: opacity 0.15s linear;\n}\n\n.modal.fade .modal-dialog {\n  transition: -webkit-transform 0.3s ease-out;\n  -webkit-transition: -webkit-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out;\n  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\n  -webkit-transform: translate(0, -50px);\n  transform: translate(0, -50px);\n}\n\n.modal.show .modal-dialog {\n  -webkit-transform: none;\n  transform: none;\n}\n\n.modal-dialog {\n  position: relative;\n  width: 100%;\n  pointer-events: none;\n}\n\n.modal-content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n  outline: 0;\n}\n.modal-content .modal-header {\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: 1rem 1rem;\n  border-top-left-radius: calc(0.3rem - 1px);\n  border-top-right-radius: calc(0.3rem - 1px);\n}\n.modal-content .modal-header button.close {\n  padding: 0;\n  background-color: transparent;\n  border: 0;\n}\n.modal-content .modal-body {\n  position: relative;\n  flex: 1 1 auto;\n  padding: 1rem;\n}\n\n.back-button-section {\n  padding: 30px 0;\n}\n@media (min-width: 767px) {\n  .back-button-section {\n    padding: 50px 0;\n  }\n}\n.back-button-section a {\n  color: black;\n  font-size: 13px;\n  font-weight: 600;\n}\n@media (min-width: 767px) {\n  .back-button-section a {\n    font-size: 14px;\n  }\n}\n.back-button-section a i {\n  margin-right: 24px;\n}\n\n.form-page {\n  padding-bottom: 100px;\n}\n\n.form-block {\n  width: 100%;\n  margin: 0 auto;\n}\n.form-block .form-logo {\n  text-align: center;\n}\n.form-block .form-logo .rs-l {\n  width: 200px;\n  padding-bottom: 20px;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .form-block {\n    width: 600px;\n    background: #fff;\n    padding: 10px 30px;\n    border-radius: 4px;\n  }\n}\n.form-block .form-block__title {\n  font-size: 22px;\n  font-weight: 600;\n  padding: 0 50px;\n  line-height: 150%;\n  margin-bottom: 24px;\n  text-align: center;\n}\n.form-block .form-block__description {\n  font-size: 14px;\n  line-height: 165%;\n  text-align: center;\n}\n.form-block .form {\n  margin-top: 40px;\n}\n\n.form .form__input-row {\n  margin-bottom: 15px;\n  margin-top: 30px;\n}\n.form .form__input-row.form__input-row--two {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n}\n.form .form__input-row.form__input-row--two .form__col {\n  width: 49%;\n}\n.form .form__input {\n  height: 47px;\n  width: 100%;\n  font-weight: 500;\n  color: #808080;\n  padding: 0 22px;\n  border-radius: 40px;\n  border: 1px solid #d8d8d8;\n}\n@media (min-width: 767px) {\n  .form .form__input {\n    height: 56px;\n    padding: 0 40px;\n  }\n}\n.form .form__input.form__input--sm {\n  height: 49px;\n  padding: 0 28px;\n}\n.form select {\n  color: #808080;\n}\n.form select option {\n  color: #808080;\n  font-size: 15px;\n}\n.form select option:first-of-type {\n  opacity: 0.8;\n  display: none;\n}\n.form .form__btns {\n  justify-content: space-between;\n  display: flex;\n}\n.form .form__btns .btn-social {\n  width: 48%;\n}\n.form .btn-submit {\n  margin-top: 20px;\n  width: 100%;\n  padding-top: 14px;\n  padding-bottom: 14px;\n  font-weight: 600;\n  text-transform: none;\n}\n@media (min-width: 767px) {\n  .form .btn-submit {\n    padding-top: 19px;\n    padding-bottom: 19px;\n  }\n}\n.form .form__signup-link {\n  margin-top: 22px;\n  font-size: 14px;\n  color: #000;\n  padding-bottom: 2px;\n  text-align: center;\n}\n.form .form__signup-link a {\n  margin-left: 30px;\n  font-weight: 600;\n}\n.form .form__signup-link a:hover {\n  text-decoration: underline;\n}\n.form .form__info {\n  margin-bottom: 22px;\n}\n@media (min-width: 767px) {\n  .form .form__info {\n    display: flex;\n    margin-bottom: 32px;\n    align-items: center;\n    justify-content: space-between;\n  }\n}\n.form .form__info .form__info__forgot-password {\n  margin-top: 24px;\n  text-align: center;\n  display: block;\n}\n@media (min-width: 767px) {\n  .form .form__info .form__info__forgot-password {\n    margin-top: 0px;\n    color: #00acee;\n  }\n}\n.form .form__info .form__info__forgot-password:hover {\n  color: #00acee;\n  text-decoration: underline;\n}\n.form .form__info .checkbox {\n  margin-bottom: 0;\n}\n.form .form__info .checkbox .checkbox__check {\n  height: 20px;\n  width: 20px;\n}\n.form .form__info .checkbox .checkbox__check:before {\n  top: 2px;\n  left: 6px;\n  width: 6px;\n  height: 10.5px;\n}\n.form .form__info .checkbox p {\n  font-size: 13px;\n  line-height: 130%;\n}\n.form .form__info a {\n  font-size: 14px;\n}\n\n.fb-btn {\n  color: #fff;\n  font-weight: 600;\n  border-radius: 40px;\n  padding: 12px 30px;\n  display: flex;\n  align-items: center;\n  background-color: #3b5998;\n}\n@media (min-width: 767px) {\n  .fb-btn {\n    padding: 14px 58px;\n  }\n}\n.fb-btn i {\n  font-size: 18px;\n  margin-right: 8px;\n}\n\n.google-btn {\n  color: #000;\n  display: flex;\n  align-items: center;\n  font-weight: 600;\n  border-radius: 40px;\n  border: 1px solid #f1584d;\n  padding: 12px 30px;\n}\n@media (min-width: 767px) {\n  .google-btn {\n    padding: 14px 58px;\n  }\n}\n.google-btn img {\n  margin-right: 10px;\n}\n\n.tooltip {\n  z-index: 10;\n  width: auto;\n  background: #ff0000;\n  color: white;\n  border-radius: 6px;\n  padding: 10px 15px;\n  position: fixed;\n}\n.tooltip:before {\n  width: 0;\n  height: 0;\n  content: \"\";\n  position: absolute;\n  left: 50%;\n  margin-left: -3px;\n  bottom: -6px;\n  border-style: solid;\n  border-width: 7px 3px 0 3px;\n  border-color: #ff0000 transparent transparent transparent;\n}\n\n.error-page {\n  align-items: center;\n  text-align: center;\n  padding: 60px 0;\n  min-height: calc(100vh - 200px);\n}\n.error-page h1 {\n  font-size: 44px;\n  margin: 0 auto 20px auto;\n  text-align: center;\n}\n@media (min-width: 767px) {\n  .error-page h1 {\n    font-size: 92px;\n  }\n}\n.error-page p {\n  line-height: 160%;\n  font-size: 15px;\n  margin-bottom: 40px;\n}\n@media (min-width: 767px) {\n  .error-page p {\n    font-size: 17px;\n    margin-bottom: 50px;\n  }\n}\n.error-page .btn {\n  margin: 0 auto;\n}\n\n.checkout-content {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}\n.checkout-content .block {\n  margin-bottom: 48px;\n}\n.checkout-content .block:last-of-type {\n  margin-bottom: 0;\n}\n.checkout-content .checkout__btns {\n  margin-bottom: 38px;\n}\n.checkout-content .checkout__btns .btn {\n  width: 125px;\n  margin-right: 11px;\n}\n.checkout-content .checkout__col-6 {\n  width: 100%;\n}\n@media (min-width: 1024px) {\n  .checkout-content .checkout__col-6 {\n    width: 53%;\n  }\n}\n@media (min-width: 1202px) {\n  .checkout-content .checkout__col-6 {\n    width: 41%;\n  }\n}\n.checkout-content .checkout__col-4 {\n  width: 100%;\n  margin-top: 30px;\n}\n@media (min-width: 1024px) {\n  .checkout-content .checkout__col-4 {\n    width: 41%;\n    margin-top: 0;\n  }\n}\n@media (min-width: 1202px) {\n  .checkout-content .checkout__col-4 {\n    width: 25%;\n  }\n}\n.checkout-content .checkout__col-2 {\n  width: 100%;\n  margin-top: 30px;\n}\n@media (min-width: 1024px) {\n  .checkout-content .checkout__col-2 {\n    width: 300px;\n  }\n}\n@media (min-width: 1202px) {\n  .checkout-content .checkout__col-2 {\n    width: 22%;\n    margin-top: 0;\n  }\n}\n\n.round-options {\n  display: flex;\n  flex-wrap: wrap;\n}\n.round-options.round-options--three {\n  margin-right: -6px;\n}\n.round-options.round-options--three .round-item {\n  margin-right: 6px;\n  width: calc(100% / 3 - 6px);\n}\n.round-options.round-options--two {\n  margin-right: -6px;\n}\n.round-options.round-options--two .round-item {\n  margin-right: 6px;\n  width: calc(100% / 2 - 6px);\n}\n.round-options .round-item {\n  display: flex;\n  height: 44px;\n  margin-bottom: 8px;\n  align-items: center;\n  border: 1px solid #d8d8d8;\n  border-radius: 20px;\n  align-items: center;\n  justify-content: center;\n}\n.round-options .round-item img {\n  max-height: 80%;\n  max-width: 80%;\n}\n.round-options .round-item p {\n  font-weight: bold;\n  color: black;\n  font-size: 14px;\n}\n.round-options .round-item.round-item--bg {\n  height: 51px;\n  align-items: center;\n  padding: 0 26px 0 21px;\n  justify-content: space-between;\n}\n\n.checkout-items .checkout-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 23px;\n  justify-content: space-between;\n}\n.checkout-items .checkout-item .checkout-item__content {\n  display: flex;\n  align-items: center;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__data {\n  width: 110px;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__data h3 {\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n  margin-bottom: 7px;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__data span {\n  color: #c4c4c4;\n  font-size: 12px;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__img {\n  width: 51px;\n  height: 51px;\n  flex-shrink: 0;\n  margin-right: 16px;\n  border-radius: 100%;\n}\n.checkout-items .checkout-item .checkout-item__content .checkout-item__img img {\n  border-radius: 100%;\n  object-fit: cover;\n  width: 100%;\n  height: 100%;\n}\n\n.checkout-total {\n  width: 244px;\n  background: #f1f1f1;\n  align-items: center;\n  height: 49px;\n  display: flex;\n  padding: 0 36px;\n  margin: 34px auto 0 auto;\n  justify-content: space-between;\n}\n.checkout-total p {\n  font-weight: 300;\n}\n\n.message {\n  font-size: 13px;\n  display: flex;\n  align-items: center;\n  margin-top: 10px;\n  margin-left: 20px;\n}\n.message:before {\n  content: \"\";\n  height: 4px;\n  width: 4px;\n  border-radius: 100%;\n  display: block;\n  margin-right: 5px;\n}\n.message.message--error {\n  color: red;\n}\n.message.message--error:before {\n  background-color: red;\n}\n\n.payment-body {\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  margin: 50px 0px;\n}\n.payment-body .payment-item {\n  padding: 30px 80px;\n  background: #fff;\n  text-align: center;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all ease-in-out 600ms;\n}\n.payment-body .payment-item img {\n  width: 80px;\n}\n.payment-body .payment-item h2 {\n  padding: 15px 0px 0px 0px;\n  font-size: 16px;\n  font-weight: 500;\n}\n.payment-body .payment-item:hover {\n  opacity: 0.6;\n}\n\n.br-bm {\n  border-bottom: 1px solid;\n}\n\n.show-content {\n  text-align: center;\n  width: 700px;\n  margin: auto;\n  padding: 50px 20px;\n  background: #fff;\n  border-radius: 4px;\n}\n.show-content form h3:first-child {\n  padding-bottom: 20px;\n}\n.show-content form h3 {\n  font-size: 28px;\n  font-weight: 500;\n}\n.show-content form p {\n  font-size: 16px;\n  font-weight: 400;\n  padding-top: 10px;\n}\n.show-content form .form-group {\n  padding-top: 40px;\n}\n.show-content form .form-group .form-control {\n  border: 1px solid #e2e8f0;\n  border-radius: 30px;\n  width: 100%;\n  padding: 12px 20px;\n  font-size: 16px;\n}\n.show-content form .checkout_confirm {\n  margin-top: 20px;\n  padding: 15px 30px;\n  background: #218ab6;\n  border: 1px solid #218ab6;\n  border-radius: 30px;\n  color: #fff;\n  transition: all ease-in-out 600ms;\n}\n.show-content form .checkout_confirm:hover {\n  background: transparent;\n  border: 1px solid #218ab6;\n  color: #218ab6;\n}\n\n.product-market-banner {\n  width: 100%;\n  height: 330px;\n  max-height: 330px;\n  min-height: 100px;\n  background-position: 50%;\n  background-size: cover;\n  background-repeat: no-repeat;\n}\n\n.product-market-page {\n  background-color: #ffffff;\n  margin: 30px 0px;\n}\n.product-market-page .heading {\n  padding: 20px;\n  background: #fff;\n  border-radius: 10px;\n  text-align: center;\n}\n.product-market-page .heading h2 {\n  font-size: 32px;\n  font-weight: 500;\n  text-transform: capitalize;\n  padding-bottom: 10px;\n}\n.product-market-page .heading h5 {\n  font-size: 18px;\n  font-weight: 400;\n  text-transform: capitalize;\n  color: #414141;\n}\n.product-market-page .product-market-body {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n}\n.product-market-page .product-market-body .product-market-item {\n  background: #ffffff;\n  border-radius: 10px;\n  display: flex;\n  flex-basis: calc(20% - 14px);\n  justify-content: center;\n  flex-direction: column;\n  margin: 20px 0 10px 10px;\n  position: relative;\n  transition: all ease-in-out 600ms;\n  border: 1px solid #e2e8f0;\n}\n.product-market-page .product-market-body .product-market-item .product-market-image img {\n  width: 100%;\n  height: 100%;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n.product-market-page .product-market-body .product-market-item h2 {\n  font-size: 16px;\n  text-align: center;\n  color: var(--color-text);\n  padding: 15px 0px;\n}\n.product-market-page .product-market-body .product-market-item:hover .view-pro {\n  display: block;\n}\n.product-market-page .product-market-body .view-pro {\n  padding: 10px 20px;\n  background: #4c8000;\n  color: #ffffff;\n  position: absolute;\n  top: 35%;\n  left: 16%;\n  border-radius: 30px;\n  font-size: 14px;\n  display: none;\n}\n\n.faq-page .faq-header {\n  width: 100%;\n  background: #4c8000;\n  padding: 100px 0px;\n  text-align: center;\n  color: #ffffff;\n}\n.faq-page .faq-header h2 {\n  font-size: 54px;\n  text-transform: uppercase;\n  font-weight: 800;\n  color: #ffffff;\n  border-bottom: 3px solid rgba(30, 31, 30, 0.6);\n  width: 150px;\n  padding-bottom: 10px;\n  margin: auto;\n}\n.faq-page .faq-header p {\n  font-size: 16px;\n  text-transform: capitalize;\n  font-weight: 400;\n  color: #ffffff;\n  padding-top: 20px;\n}\n.faq-page .faq-content {\n  margin: 50px 0px;\n}\n.faq-page .faq-content .faq-item {\n  padding: 30px 20px 20px 70px;\n  background: #ffffff;\n  border-radius: 10px;\n  margin-bottom: 20px;\n}\n.faq-page .faq-content .faq-item .qus {\n  font-size: 16px;\n  font-weight: 500;\n  padding-bottom: 35px;\n  text-transform: capitalize;\n  position: relative;\n}\n.faq-page .faq-content .faq-item .qus::before {\n  content: \"Q.\";\n  position: absolute;\n  top: -8px;\n  left: -50px;\n  font-size: 30px;\n  color: #4c8000;\n}\n.faq-page .faq-content .faq-item .ans {\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n  text-transform: capitalize;\n  position: relative;\n}\n.faq-page .faq-content .faq-item .ans::before {\n  content: \"A.\";\n  position: absolute;\n  top: 0;\n  left: -50px;\n  font-size: 30px;\n  color: #000000;\n}\n\n.guideline-heading {\n  width: 300px !important;\n}\n\n.blog-page .blog-content {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n.blog-page .blog-content .blog-item {\n  display: flex;\n  flex-basis: calc(33% - 14px);\n  flex-direction: column;\n  background: #ffffff;\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 20px;\n}\n.blog-page .blog-content .blog-item .blog-body {\n  position: relative;\n}\n.blog-page .blog-content .blog-item .blog-body a img {\n  width: 100%;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n.blog-page .blog-content .blog-item .blog-body a .date-box {\n  position: absolute;\n  bottom: 0px;\n  padding: 10px;\n  background: #4c8000;\n  border: 1px solid #4c8000;\n  color: #fff;\n  text-align: center;\n  font-weight: 300;\n}\n.blog-page .blog-content .blog-item .blog-footer b {\n  font-size: 16px;\n  font-weight: 500;\n  color: #218ab6;\n  text-transform: uppercase;\n}\n.blog-page .blog-content .blog-item .blog-footer h1 {\n  padding-top: 15px;\n  font-size: 16px;\n  font-weight: 600;\n  text-transform: capitalize;\n  padding-bottom: 10px;\n}\n.blog-page .blog-content .blog-item .blog-footer h1:hover {\n  color: #218ab6;\n  font-weight: 600;\n}\n.blog-page .blog-content .blog-item .blog-footer p {\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 22px;\n  text-transform: capitalize;\n  padding-bottom: 1rem;\n}\n.blog-page .blog-content .blog-item .blog-footer .read-more-btn {\n  font-size: 12px;\n  text-transform: uppercase;\n  font-weight: 400;\n  color: #fff;\n  background: #4c8000;\n  padding: 7px 20px;\n  border: solid;\n  border: 1px solid #4c8000;\n  border-radius: 50px;\n  -webkit-transition: 0.3s ease-in;\n  -moz-transition: 0.3s ease-in;\n  -o-transition: 0.3s ease-in;\n  transition: 0.3s ease-in;\n}\n.blog-page .blog-content .blog-item .blog-footer .read-more-btn:hover {\n  background: transparent;\n  border: 1px solid #4c8000;\n  color: #4c8000;\n}\n\n.blog-details-page {\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n}\n.blog-details-page .blog-details-content {\n  width: 74%;\n  margin-right: 10px;\n}\n.blog-details-page .blog-details-content .blog-details-body {\n  border-radius: 10px;\n}\n.blog-details-page .blog-details-content .blog-details-body img {\n  width: 100%;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content {\n  border: 1px solid #e5e9f4;\n  padding: 20px 30px 30px;\n  background: #ffffff;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content h2 {\n  font-size: 28px;\n  line-height: 38px;\n  font-weight: 600;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content .post-meta {\n  margin-bottom: 20px;\n  margin-top: 12px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content .post-meta li:last-child {\n  padding-left: 10px;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content .post-meta li:first-child {\n  padding-right: 10px;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content .post-meta a {\n  font-size: 14px;\n  text-transform: uppercase;\n  color: #4c8000;\n  font-weight: 500;\n  cursor: pointer;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content div p {\n  font-size: 16px;\n  color: #333333;\n  line-height: 28px;\n  padding-bottom: 20px;\n  text-align: justify;\n}\n.blog-details-page .blog-details-content .blog-details-body .post-content div h3 {\n  font-size: 26px;\n  padding-bottom: 10px;\n}\n.blog-details-page .blog-sidebar {\n  background: #ffffff;\n  padding: 30px 15px;\n  margin-right: 10px;\n  border-radius: 10px;\n  width: 25%;\n}\n.blog-details-page .blog-sidebar .blog-sidebar-content .serch-form {\n  position: relative;\n}\n.blog-details-page .blog-sidebar .blog-sidebar-content .serch-form input {\n  width: 100%;\n  height: 50px;\n  border: 2px solid #4c8000;\n  background: #f7f8fc;\n  padding: 0px 50px 0px 20px;\n  border-radius: 30px;\n  color: #4c8000;\n}\n.blog-details-page .blog-sidebar .blog-sidebar-content .serch-form button {\n  position: absolute;\n  top: 0;\n  right: 0;\n  height: 50px;\n  width: 50px;\n  border: none;\n  background: none;\n  cursor: pointer;\n}\n.blog-details-page .blog-sidebar .blog-sidebar-content .serch-form button i {\n  color: #4c8000;\n  font-size: 16px;\n}\n.blog-details-page .blog-sidebar .title {\n  font-size: 24px;\n  line-height: 34px;\n  font-weight: 700;\n  color: #252a32;\n  display: block;\n  text-align: center;\n  padding-bottom: 17px;\n  border-bottom: 3px solid rgba(76, 128, 0, 0.8);\n}\n.blog-details-page .blog-sidebar .tags {\n  text-align: center;\n  padding-top: 50px;\n}\n.blog-details-page .blog-sidebar .tags .tags-list {\n  margin-top: 29px;\n  display: grid;\n  grid-template-columns: auto auto;\n}\n.blog-details-page .blog-sidebar .tags .tags-list li a {\n  font-size: 13px;\n  text-transform: uppercase;\n  padding: 8px 22px;\n  background: #ffffff;\n  border: 1px solid #4c8000;\n  border-radius: 50px;\n  color: #4c8000;\n  display: inline-block;\n  -webkit-transition: all 0.3s ease-in;\n  -o-transition: all 0.3s ease-in;\n  transition: all 0.3s ease-in;\n  margin-bottom: 15px;\n  margin-right: 9px;\n}\n.blog-details-page .blog-sidebar .categories {\n  padding-top: 50px;\n}\n.blog-details-page .blog-sidebar .categories .categories-list {\n  padding-top: 20px;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li {\n  line-height: 38px;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li a {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  -o-transition: all 0.3s ease-in;\n  transition: all 0.3s ease-in;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li a span {\n  font-size: 16px;\n  font-weight: 500;\n  color: #143250;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li a:hover span {\n  color: #4c8000;\n}\n.blog-details-page .blog-sidebar .categories .categories-list li span.active {\n  color: #4c8000;\n}\n.blog-details-page .blog-sidebar .recent-post-widget {\n  padding-top: 50px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list {\n  margin-top: 30px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li {\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding-bottom: 15px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-img {\n  margin-right: 20px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-img img {\n  width: 73px;\n  height: 59px;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-details {\n  -webkit-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-details a h4 {\n  font-size: 14px;\n  line-height: normal;\n  font-weight: 300;\n  color: #143250;\n}\n.blog-details-page .blog-sidebar .recent-post-widget .post-list li .post .post-details .date {\n  color: #7b8698;\n  font-size: 12px;\n  margin-bottom: 0px;\n}\n\n.buy-heading {\n  width: 800px !important;\n}\n\n.producer-heading {\n  width: 500px !important;\n}\n\n.producer-page .producer-content {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  flex-direction: row;\n}\n.producer-page .producer-content .producer-item {\n  display: flex;\n  flex-basis: calc(25% - 14px);\n  flex-direction: column;\n  background: #ffffff;\n  border-radius: 10px;\n  margin-bottom: 20px;\n  padding: 20px;\n  cursor: pointer;\n}\n.producer-page .producer-content .producer-item img {\n  width: 100%;\n  border-radius: 10px;\n}\n.producer-page .producer-content .producer-item h2 {\n  padding-top: 20px;\n  padding-bottom: 10px;\n  font-size: 16px;\n  font-weight: 500;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n.producer-page .producer-content .producer-item h2 span {\n  padding-right: 10px;\n}\n.producer-page .producer-content .producer-item h2 span i {\n  font-size: 15px;\n  color: #75c500;\n}\n.producer-page .producer-content .producer-item h5 {\n  font-size: 16px;\n  font-weight: 400;\n  display: flex;\n  justify-content: center;\n  align-content: center;\n}\n.producer-page .producer-content .producer-item h5 span {\n  padding-right: 10px;\n}\n.producer-page .producer-content .producer-item h5 span svg {\n  width: 20px;\n  height: 20px;\n}\n.producer-page .producer-content .producer-item code {\n  text-align: center;\n}\n\n.partner-page .form-control {\n  height: 47px;\n  width: 100%;\n  font-weight: 500;\n  color: #808080;\n  padding: 0 22px;\n  border-radius: 40px;\n  border: 1px solid #d8d8d8;\n}\n.partner-page .form-control option {\n  font-size: 18px;\n  font-weight: 400;\n  color: #808080;\n}\n.partner-page label {\n  font-size: 2rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  margin-top: 2rem;\n}\n.partner-page input[type=checkbox] {\n  border: 1px solid #4c8000;\n  width: 18px;\n  height: 18px;\n  margin-right: 20px;\n  border-radius: 4px;\n  position: relative;\n}\n.partner-page input:checked {\n  background-color: #4c8000;\n  color: #ffffff;\n}\n.partner-page .form-check-label {\n  font-size: 18px;\n  font-weight: 500;\n}\n.partner-page .form-check {\n  margin-top: 15px !important;\n  cursor: pointer;\n}\n.partner-page input[type=file] {\n  text-align: center;\n  padding: 16px;\n  margin-top: 15px;\n}\n\n.service-point-page .serch-form {\n  width: auto;\n  margin: auto;\n  position: relative;\n  margin-top: 30px;\n}\n.service-point-page .serch-form input {\n  height: 50px;\n  padding: 20px 38px;\n  border: 2px solid rgba(30, 31, 30, 0.6);\n  color: #000000;\n  border-radius: 4px;\n}\n.service-point-page .serch-form button {\n  position: absolute;\n  top: 0;\n  right: 38%;\n  height: 50px;\n  width: 50px;\n  border: none;\n  background: none;\n  cursor: pointer;\n  border-left: 1px solid rgba(30, 31, 30, 0.6);\n}\n.service-point-page .serch-form button i {\n  color: rgba(30, 31, 30, 0.8);\n  font-size: 16px;\n}\n\n.view-more-todays-deal-banner {\n  width: 100%;\n  height: 120px;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n.view-more-pages-banner {\n  width: 100%;\n  height: 335px;\n  max-height: 335px;\n  min-height: 100px;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  -o-object-fit: cover;\n  object-fit: cover;\n}\n\n.view-more-pages .timer-Wrap {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.view-more-pages .timer-Wrap li:first-child {\n  background: transparent !important;\n  padding: 0 !important;\n  color: #000;\n  font-size: 16px;\n  font-weight: 500;\n}\n.view-more-pages .timer-Wrap li {\n  margin-right: 10px;\n  background: #218ab6;\n  padding: 10px;\n  color: #ffffff;\n  border-radius: 4px;\n}\n.view-more-pages .view-more-pages-body {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.CampaingsPage {\n  margin: 0 !important;\n}\n.CampaingsPage .campaign-page-slider {\n  margin-bottom: 30px;\n}\n\n.CompanyOverview-item {\n  background-color: #fff;\n  border-radius: 10px;\n  padding: 20px;\n}\n.CompanyOverview-item h1 {\n  text-align: center;\n  font-size: 22px;\n  line-height: 28px;\n  padding-bottom: 10px;\n}\n.CompanyOverview-item p {\n  line-height: 28px;\n  font-size: 16px;\n  color: var(--color-text);\n  text-align: justify;\n  margin-bottom: 40px;\n}","html,\r\nbody {\r\n  overflow-x: hidden !important;\r\n}\r\n// #218ab6\r\n\r\n// imports styles\r\n@import \"./partials/variables.scss\";\r\n@import \"./partials/breakpoints.scss\";\r\n@import \"./partials/reset.css\";\r\n@import \"./partials/responsive.css\";\r\n\r\n// google fonts\r\n@import url(\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap\");\r\n\r\n@mixin placeholder {\r\n  &::-webkit-input-placeholder {\r\n    @content;\r\n  }\r\n\r\n  &:-moz-placeholder {\r\n    /* Firefox 18- */\r\n    @content;\r\n  }\r\n\r\n  &::-moz-placeholder {\r\n    /* Firefox 19+ */\r\n    @content;\r\n  }\r\n\r\n  &:-ms-input-placeholder {\r\n    @content;\r\n  }\r\n}\r\n\r\n@-webkit-keyframes watchAnimation {\r\n  from {\r\n    -webkit-transform: rotate(0deg) translateX(10px) rotate(0deg);\r\n  }\r\n  to {\r\n    -webkit-transform: rotate(360deg) translateX(10px) rotate(-360deg);\r\n  }\r\n}\r\n\r\n@-moz-keyframes watchAnimation {\r\n  from {\r\n    -moz-transform: rotate(0deg) translateX(10px) rotate(0deg);\r\n  }\r\n  to {\r\n    -moz-transform: rotate(360deg) translateX(10px) rotate(-360deg);\r\n  }\r\n}\r\n\r\n@-o-keyframes watchAnimation {\r\n  from {\r\n    -o-transform: rotate(0deg) translateX(10px) rotate(0deg);\r\n  }\r\n  to {\r\n    -o-transform: rotate(360deg) translateX(10px) rotate(-360deg);\r\n  }\r\n}\r\n\r\n@keyframes watchAnimation {\r\n  from {\r\n    transform: rotate(0deg) translateX(10px) rotate(0deg);\r\n  }\r\n  to {\r\n    transform: rotate(360deg) translateX(10px) rotate(-360deg);\r\n  }\r\n}\r\n\r\n@-webkit-keyframes opacity {\r\n  0% {\r\n    opacity: 0.2;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0.2;\r\n  }\r\n}\r\n@-moz-keyframes opacity {\r\n  0% {\r\n    opacity: 0.2;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0.2;\r\n  }\r\n}\r\n@-o-keyframes opacity {\r\n  0% {\r\n    opacity: 0.2;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0.2;\r\n  }\r\n}\r\n@keyframes opacity {\r\n  0% {\r\n    opacity: 0.2;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    opacity: 0.2;\r\n  }\r\n}\r\n\r\n*,\r\n*:after,\r\n*:before {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  box-sizing: border-box;\r\n  background-color: #f2f3f8;\r\n  font-family: var(--main-font);\r\n  color: var(--color-text);\r\n  font-size: 16px;\r\n  &.body--with-footer {\r\n    .main {\r\n      align-items: normal;\r\n    }\r\n  }\r\n}\r\n\r\nspan {\r\n  font-weight: 300;\r\n}\r\n\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  /* display: none; <- Crashes Chrome on hover */\r\n  -webkit-appearance: none;\r\n  margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\ninput[type=\"number\"] {\r\n  -moz-appearance: textfield; /* Firefox */\r\n}\r\n\r\ninput,\r\ntextarea,\r\nbutton,\r\nselect {\r\n  border: none;\r\n  background: none;\r\n  outline: none;\r\n  border-radius: 0;\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n  font-family: var(--main-font);\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5 {\r\n  color: var(--color-black);\r\n}\r\n\r\n.container {\r\n  max-width: 380px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  @include breakpoint(phone) {\r\n    max-width: 650px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n  @include breakpoint(tablet-lg) {\r\n    max-width: 980px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n  @include breakpoint(desktop-lg) {\r\n    max-width: 1280px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n}\r\n\r\n.main-page {\r\n  padding-top: 0px;\r\n  background-color: #f2f3f8;\r\n  @include breakpoint(phone) {\r\n    padding-top: 0px;\r\n  }\r\n}\r\n\r\n.block {\r\n  .block__title {\r\n    font-size: 14px;\r\n    margin-bottom: 23px;\r\n  }\r\n}\r\n\r\n.btn-hamburger {\r\n  display: block;\r\n  position: relative;\r\n  display: block;\r\n  z-index: 100;\r\n  width: 25px;\r\n  height: 25px;\r\n  margin-left: auto;\r\n  &:before,\r\n  &:after,\r\n  span {\r\n    content: \"\";\r\n    display: block;\r\n    width: 20px;\r\n    height: 2px;\r\n    top: 50%;\r\n    border-radius: 3px;\r\n    margin-top: -1px;\r\n    position: absolute;\r\n    left: 50%;\r\n    margin-left: -10px;\r\n    transition: none 0.3s ease 0.3s;\r\n    transition-property: transform, top, bottom, right, opacity;\r\n  }\r\n  &:before {\r\n    transform: translateY(-6px);\r\n  }\r\n  &:after {\r\n    transform: translateY(6px);\r\n  }\r\n  &.is-active {\r\n    &:before {\r\n      transform: rotate(45deg);\r\n    }\r\n    &:after {\r\n      transform: rotate(-45deg);\r\n    }\r\n    span {\r\n      opacity: 0;\r\n    }\r\n  }\r\n}\r\n\r\n.btn {\r\n  color: #000000;\r\n  cursor: pointer;\r\n  transition: all ease-in-out 600ms;\r\n  &.btn--rounded {\r\n    font-size: 12px;\r\n    background: #218ab6;\r\n    color: #fff;\r\n    display: inline-block;\r\n    border-radius: 50px;\r\n    padding: 11px 20px;\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    @include breakpoint(phone) {\r\n      font-size: 13px;\r\n      padding: 11px 20px;\r\n    }\r\n    &.btn--border {\r\n      border: 1px solid #218ab6;\r\n    }\r\n    &.btn--yellow {\r\n      background-color: #218ab6;\r\n    }\r\n    &:hover {\r\n      background-color: #fff;\r\n      color: #218ab6;\r\n    }\r\n  }\r\n}\r\n\r\n.logo {\r\n  max-width: 190px;\r\n}\r\n\r\n.breadcrumb {\r\n  padding: 20px 0 20px 0;\r\n  @include breakpoint(phone) {\r\n    padding: 29px 0 35px 0;\r\n  }\r\n  .breadcrumb-list {\r\n    display: flex;\r\n    li {\r\n      font-size: 13px;\r\n      color: #b2b2b2;\r\n      &:not(:first-child) {\r\n        margin-left: 10px;\r\n        &:before {\r\n          content: \"/ \";\r\n          margin-right: 3px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// end\r\n.account-content {\r\n  padding: 20px;\r\n  position: absolute;\r\n  top: 40px;\r\n  right: 20px;\r\n  display: none;\r\n  .account-content-wrap {\r\n    background-color: #ffffff;\r\n    border: 1px solid #ebeaea;\r\n    padding: 20px;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    border-radius: 4px;\r\n    div {\r\n      .reg-btn {\r\n        margin: 0 !important;\r\n        padding: 10px 20px;\r\n        background: #4c8000;\r\n        color: #ffffff;\r\n        border-radius: 4px;\r\n        transition: all ease-in-out 600ms;\r\n        &:hover {\r\n          background: #000000;\r\n        }\r\n      }\r\n      .log-btn {\r\n        margin: 0 !important;\r\n        padding: 10px 20px;\r\n        background: #000000;\r\n        color: #ffffff;\r\n        border-radius: 4px;\r\n        transition: all ease-in-out 600ms;\r\n        &:hover {\r\n          background: #4c8000;\r\n        }\r\n      }\r\n    }\r\n    div:first-child {\r\n      margin-right: 20px;\r\n    }\r\n  }\r\n}\r\n.account-wrap:hover .account-content {\r\n  display: block;\r\n}\r\n// header top\r\n.header-top {\r\n  position: relative;\r\n  z-index: 100000;\r\n  background: #4c8000;\r\n  border-bottom: 1px solid #4c8000;\r\n  color: #ffffff;\r\n  padding: 12px 30px;\r\n  .f-right {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    .nav-item {\r\n      padding-right: 10px;\r\n      padding-left: 10px;\r\n      .nav-link {\r\n        font-size: 14px;\r\n        text-transform: capitalize;\r\n        &:hover {\r\n          color: #000;\r\n          font-weight: 400;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .nav-list {\r\n    float: left;\r\n    display: flex;\r\n    .nav-item {\r\n      padding-right: 10px;\r\n      padding-left: 10px;\r\n      .nav-link {\r\n        font-size: 14px;\r\n        text-transform: capitalize;\r\n        &:hover {\r\n          color: #000;\r\n          font-weight: 400;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// end\r\n// header bottom\r\n.header-bottom {\r\n  position: relative;\r\n  background: #000000;\r\n  border-bottom: 1px solid #000000;\r\n  color: #4c8000;\r\n  padding: 15px 50px;\r\n  .f-right {\r\n    display: flex;\r\n    align-items: flex-end;\r\n    justify-content: flex-start;\r\n    padding-left: 18px;\r\n    .nav-item {\r\n      padding-left: 20px;\r\n      .nav-link {\r\n        font-size: 14px;\r\n        text-transform: capitalize;\r\n        font-weight: 500;\r\n        &:hover {\r\n          color: #ffffff;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .nav-list {\r\n    float: left;\r\n    background-color: #060606;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 47px;\r\n    position: relative;\r\n    top: -15px;\r\n    width: 245px;\r\n    border-top-left-radius: 4px;\r\n    border-top-right-radius: 4px;\r\n    .cat {\r\n      color: #ffffff;\r\n      font-size: 18px;\r\n      cursor: pointer;\r\n      text-transform: uppercase;\r\n      font-weight: 600;\r\n    }\r\n    .bar {\r\n      font-size: 26px;\r\n    }\r\n    .arrowRight {\r\n      font-size: 18px;\r\n    }\r\n    .nav-item {\r\n      padding-right: 20px;\r\n      .nav-link {\r\n        font-size: 14px;\r\n        text-transform: capitalize;\r\n      }\r\n    }\r\n  }\r\n}\r\n// end\r\n.site-header {\r\n  position: relative;\r\n  z-index: 999;\r\n  height: 65px;\r\n  color: #000;\r\n  background: #000;\r\n  box-shadow: none;\r\n  transition: ease-in-out 600ms;\r\n  @include breakpoint(phone) {\r\n    height: 85px;\r\n  }\r\n  @include breakpoint(\"<=phone-sm\") {\r\n    display: none;\r\n  }\r\n  .btn-hamburger {\r\n    &:before,\r\n    &:after,\r\n    span {\r\n      background-color: #4c8000;\r\n    }\r\n  }\r\n  svg {\r\n    stroke: #4c8000 !important;\r\n  }\r\n  .container {\r\n    display: flex;\r\n    height: 100%;\r\n    align-items: center;\r\n  }\r\n  .site-header__btn-avatar {\r\n    display: none;\r\n    @include breakpoint(tablet-lg) {\r\n      display: block;\r\n    }\r\n  }\r\n  .site-header__btn-menu {\r\n    @include breakpoint(tablet-lg) {\r\n      display: none;\r\n    }\r\n  }\r\n  .site-header__actions {\r\n    margin-left: auto;\r\n    display: flex;\r\n    align-items: center;\r\n    @include breakpoint(tablet-lg) {\r\n      margin-left: 0;\r\n    }\r\n    button {\r\n      margin-left: 15px;\r\n      @include breakpoint(tablet-lg) {\r\n        margin-left: 25px;\r\n      }\r\n    }\r\n    i {\r\n      color: #4c8000;\r\n      z-index: 10;\r\n      transition: all 0.3s ease;\r\n      position: relative;\r\n      font-size: 18px;\r\n    }\r\n  }\r\n  // search form\r\n  .Header-middle {\r\n    position: relative;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n  .new-search-form {\r\n    width: 800px;\r\n    background: #fff;\r\n    height: 46px;\r\n    padding: 11px;\r\n    border: 2px solid #4c8000;\r\n    border-radius: 4px;\r\n\r\n    input {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  // search form end\r\n  //\r\n  .seach-btn {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    padding: 9.5px 25px;\r\n    background: #4c8000;\r\n    color: #fff;\r\n    border-top-right-radius: 4px;\r\n    border-bottom-right-radius: 4px;\r\n    i {\r\n      font-size: 18px;\r\n    }\r\n    &:hover {\r\n      background: #218ab6;\r\n      color: #ffffff;\r\n    }\r\n  }\r\n  .site-nav {\r\n    top: 0;\r\n    right: -250px;\r\n    width: 250px;\r\n    z-index: 9999;\r\n    height: 100vh;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    position: fixed;\r\n    background-color: #fff;\r\n    transition: all 0.3s ease;\r\n    border-left: 1px solid #e5e5e5;\r\n    display: none;\r\n    @include breakpoint(tablet-lg) {\r\n      position: relative;\r\n      height: auto;\r\n      right: 0;\r\n      width: auto;\r\n      border: none;\r\n      background-color: transparent;\r\n    }\r\n    .site-nav__btn {\r\n      padding: 13px 18px;\r\n      width: 100%;\r\n      font-size: 15px;\r\n      font-weight: 500;\r\n      text-align: left;\r\n      @include breakpoint(tablet-lg) {\r\n        display: none;\r\n      }\r\n    }\r\n    &.site-nav--open {\r\n      right: 0;\r\n    }\r\n    a {\r\n      font-size: 15px;\r\n      font-weight: 500;\r\n      width: 100%;\r\n      color: #000;\r\n      display: block;\r\n      text-align: left;\r\n      padding: 15px 18px;\r\n      @include breakpoint(tablet-lg) {\r\n        width: auto;\r\n        padding: 0;\r\n        color: #fff;\r\n        margin-right: 76px;\r\n        display: inline-block;\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  }\r\n  // &.site-header--fixed {\r\n  //   // position: fixed;\r\n  //   width: 100%;\r\n  //   top: 0;\r\n  //   left: 0;\r\n  //   border-bottom: 1px solid #E5E5E5;\r\n  //   background-color: #FFF;\r\n  //   .new-search-form{\r\n  //     border: 2px solid #000;\r\n  //   }\r\n  //   .btn-hamburger {\r\n  //     &:before, &:after, span {\r\n  //       background-color: #000;\r\n  //     }\r\n  //   }\r\n  //   a, i {\r\n  //     color: #000;\r\n  //   }\r\n  //   button {\r\n  //     color: #000;\r\n  //     i {\r\n  //       color: #000;\r\n  //     }\r\n  //   }\r\n  //   .site-logo {\r\n  //     color: #000;\r\n  //   }\r\n  // }\r\n  .search-form-wrapper {\r\n    &.search-form--active {\r\n      .search-form {\r\n        top: 0;\r\n        @include breakpoint(tablet-lg) {\r\n          top: auto;\r\n        }\r\n        input {\r\n          @include breakpoint(tablet-lg) {\r\n            border: 1px solid #ababab;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.search-form-wrapper {\r\n  position: relative;\r\n  z-index: 5000;\r\n  display: none;\r\n  .search-form {\r\n    position: fixed;\r\n    z-index: 100;\r\n    top: -100vh;\r\n    left: 0;\r\n    height: 100vh;\r\n    right: 0;\r\n    transition: all 0.3s ease;\r\n    background-color: #fff;\r\n    @include breakpoint(phone) {\r\n      display: block;\r\n    }\r\n    @include breakpoint(tablet-lg) {\r\n      position: static;\r\n      height: auto;\r\n      top: auto;\r\n    }\r\n    .icon-cancel {\r\n      top: 18px;\r\n      right: 22px;\r\n      cursor: pointer;\r\n      position: absolute;\r\n      @include breakpoint(tablet-lg) {\r\n        display: none;\r\n      }\r\n    }\r\n    input {\r\n      padding: 0;\r\n      overflow: hidden;\r\n      height: 42px;\r\n      color: #808080;\r\n      font-size: 13px;\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      border-bottom: 1px solid black;\r\n      transition: all 0.3s ease;\r\n      background-color: transparent;\r\n      @include inputPlaceholder {\r\n        color: #808080;\r\n      }\r\n      @include breakpoint(tablet-lg) {\r\n        width: 0;\r\n        top: 50%;\r\n        left: auto;\r\n        right: -9px;\r\n        border: none;\r\n        border-radius: 50px;\r\n        margin-top: -21px;\r\n        transform: none;\r\n      }\r\n    }\r\n  }\r\n  &.search-form--active {\r\n    input {\r\n      padding: 0 8px;\r\n      width: 80%;\r\n      text-align: center;\r\n      padding-right: 40px;\r\n      background-color: #fff;\r\n      @include breakpoint(tablet-lg) {\r\n        width: 300px;\r\n        padding: 0 19px;\r\n        text-align: left;\r\n      }\r\n    }\r\n    i {\r\n      color: #000 !important;\r\n      z-index: 10;\r\n    }\r\n  }\r\n}\r\n.cat-item {\r\n  padding: 12px 0px;\r\n  border-top: 1px solid #e2e8f0;\r\n  position: relative;\r\n  .cat-link {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-size: 14px;\r\n    color: #4a5568;\r\n    text-transform: capitalize;\r\n  }\r\n  .Sub-Cat {\r\n    position: absolute;\r\n    top: 0;\r\n    right: -258px;\r\n    z-index: 100;\r\n    background: transparent;\r\n    padding: 0px 20px;\r\n    display: none;\r\n    li {\r\n      padding: 12px 20px;\r\n      border-bottom: 1px solid #e2e8f0;\r\n      background: #fff;\r\n      a {\r\n        font-size: 14px;\r\n      }\r\n    }\r\n  }\r\n  &:hover .cat-link,\r\n  span > svg {\r\n    font-weight: 600;\r\n    color: #4c8000 !important;\r\n    stroke: #4c8000 !important;\r\n  }\r\n}\r\n.Man-col {\r\n  transition: all 600ms;\r\n  &:hover .Sub-Cat {\r\n    display: block;\r\n  }\r\n}\r\n\r\n.page-intro {\r\n  display: flex;\r\n  .Category-card {\r\n    position: absolute;\r\n    left: 50px;\r\n    width: 245px;\r\n    background-color: #ffffff;\r\n    .cat-list {\r\n      padding: 10px 10px 0px 15px;\r\n      border: 1px solid #e2e8f0;\r\n    }\r\n  }\r\n  .swiper-wrapper {\r\n    margin: 6px 0px 0px 6px;\r\n    height: 330px;\r\n    width: 100%;\r\n    margin-left: -5px;\r\n    .swiper-container {\r\n      width: 965px;\r\n    }\r\n  }\r\n  .swiper-pagination {\r\n    position: absolute;\r\n    bottom: 3%;\r\n    right: 46%;\r\n    z-index: 100;\r\n    .swiper-pagination-bullet {\r\n      width: 10px;\r\n      height: 10px;\r\n      border-radius: 30px;\r\n      background: rgba(0, 0, 0, 0.6);\r\n      display: inline-block;\r\n      margin-right: 10px;\r\n    }\r\n    .swiper-pagination-bullet-active {\r\n      background: #4c8000;\r\n    }\r\n  }\r\n  .swiper-button-prev,\r\n  .swiper-button-next {\r\n    bottom: 20px;\r\n    top: 50%;\r\n    transform: translateX(50%);\r\n    right: auto;\r\n    width: 30px;\r\n    height: 30px;\r\n    z-index: 100;\r\n    font-size: 13px;\r\n    display: flex;\r\n    cursor: pointer;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    display: none;\r\n    background-color: rgba(255, 255, 255, 0.12);\r\n    border-radius: 100%;\r\n    @include breakpoint(phone) {\r\n      width: 52px;\r\n      height: 52px;\r\n      bottom: 30px;\r\n      font-size: 17px;\r\n      display: flex;\r\n    }\r\n    &:before {\r\n      color: #fff;\r\n      content: \"\\e80b\";\r\n      font-family: \"icons\";\r\n    }\r\n    &:hover {\r\n      background: #fff;\r\n      &:before {\r\n        color: #000;\r\n      }\r\n    }\r\n  }\r\n  .swiper-button-next {\r\n    right: 20px;\r\n    @include breakpoint(phone) {\r\n      right: 7%;\r\n    }\r\n    &:before {\r\n      content: \"\\e811\";\r\n    }\r\n  }\r\n  .swiper-pagination-progressbar {\r\n  }\r\n\r\n  .page-intro__slide {\r\n    height: 350px;\r\n    position: relative;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-color: #fafafa;\r\n    @include breakpoint(phone) {\r\n      height: 90vh;\r\n    }\r\n    &:before {\r\n      content: \"\";\r\n      left: 0;\r\n      z-index: 5;\r\n      width: 100%;\r\n      height: 100%;\r\n      position: absolute;\r\n      background-color: rgba(0, 0, 0, 0.2);\r\n    }\r\n    .container {\r\n      z-index: 10;\r\n      display: flex;\r\n      position: relative;\r\n      align-items: center;\r\n      height: 100%;\r\n    }\r\n    .page-intro__slide__content {\r\n      margin-top: auto;\r\n      margin-bottom: 40px;\r\n      @include breakpoint(phone) {\r\n        margin-bottom: 80px;\r\n        margin-top: 0;\r\n      }\r\n      h2 {\r\n        font-size: 36px;\r\n        color: #fff;\r\n        font-weight: 600;\r\n        line-height: 120%;\r\n        margin-bottom: 45px;\r\n        @include breakpoint(phone) {\r\n          font-size: 64px;\r\n          width: 600px;\r\n        }\r\n      }\r\n      .btn-shop {\r\n        display: flex;\r\n        color: #fff;\r\n        align-items: center;\r\n        i {\r\n          justify-content: center;\r\n          align-items: center;\r\n          display: flex;\r\n          width: 40px;\r\n          height: 40px;\r\n          color: #fff;\r\n          font-size: 15px;\r\n          margin-right: 10px;\r\n          background-color: var(--color-orange);\r\n          border-radius: 100%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// CUSTOM ORDER\r\n.customOrder {\r\n  margin: 40px 0px;\r\n  padding: 30px 20px;\r\n  background: #ffffff;\r\n  border-radius: 10px;\r\n  .heading {\r\n    margin-bottom: 45px;\r\n    border-bottom: 1px solid #e2e8f0;\r\n    h2 {\r\n      font-size: 29px;\r\n      text-transform: capitalize;\r\n      border-bottom: 2px solid #218ab6;\r\n      padding-bottom: 15px;\r\n      width: 400px;\r\n    }\r\n  }\r\n  p {\r\n    text-align: center;\r\n    font-size: 16px;\r\n    padding-bottom: 10px;\r\n    color: #218ab6;\r\n  }\r\n  .customOrder-list {\r\n    width: 60%;\r\n    margin: auto;\r\n    .customOrder-item {\r\n      border: 2px solid #e2e8f0;\r\n      border-radius: 4px;\r\n    }\r\n\r\n    .customOrder-itemOne,\r\n    .customOrder-itemTwo {\r\n      height: 40px;\r\n      width: 49%;\r\n      padding: 20px;\r\n      margin: 0px 0px 20px 0px;\r\n    }\r\n    .customOrder-itemOne {\r\n      margin-right: 14px;\r\n    }\r\n    .customOrder-itemThree {\r\n      padding: 20px;\r\n      margin: 0px 0px 20px 0px;\r\n      width: 100%;\r\n    }\r\n    .file-area {\r\n      width: 100%;\r\n      position: relative;\r\n      border: 5px dashed #e2e8f0;\r\n      margin-right: 20px;\r\n      input[type=\"file\"] {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        top: 0;\r\n        left: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        opacity: 0;\r\n        cursor: pointer;\r\n      }\r\n\r\n      .file-dummy {\r\n        width: 100%;\r\n        padding: 30px;\r\n        border-color: #e2e8f0;\r\n        background: rgba(255, 255, 255, 0.2);\r\n        text-align: center;\r\n        transition: background 0.3s ease-in-out;\r\n\r\n        .success {\r\n          display: none;\r\n        }\r\n      }\r\n\r\n      &:hover .file-dummy {\r\n        background: rgba(255, 255, 255, 0.1);\r\n      }\r\n\r\n      input[type=\"file\"]:focus + .file-dummy {\r\n        outline: 5px dashed #e2e8f0;\r\n        outline: -webkit-focus-ring-color auto 5px;\r\n      }\r\n\r\n      input[type=\"file\"]:valid + .file-dummy {\r\n        border-color: rgba(0, 255, 0, 0.4);\r\n        background-color: rgba(0, 255, 0, 0.3);\r\n\r\n        .success {\r\n          display: inline-block;\r\n        }\r\n        .default {\r\n          display: none;\r\n        }\r\n      }\r\n    }\r\n    .CO-btn {\r\n      background: #218ab6;\r\n      font-size: 16px;\r\n      padding: 15px 40px;\r\n      color: #fff;\r\n      margin-top: 40px;\r\n      border-radius: 30px;\r\n      text-transform: capitalize;\r\n    }\r\n  }\r\n}\r\n// CUSTOM ORDER end\r\n\r\n// cat grid\r\n.mt-50 {\r\n  margin-top: 50px;\r\n}\r\n.cat-grid-wrap {\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  .cat-grid-item {\r\n    display: flex;\r\n    flex-basis: calc(20% - 14px);\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin: 20px 0 10px 10px;\r\n    .cat-grid-link {\r\n      text-align: center;\r\n      img {\r\n        width: 170px;\r\n        height: 170px;\r\n        border-radius: 100%;\r\n        border: 2px solid #e2e8f0;\r\n      }\r\n      h1 {\r\n        font-size: 16px;\r\n        text-transform: capitalize;\r\n        font-weight: 600;\r\n        padding-top: 20px;\r\n      }\r\n    }\r\n  }\r\n}\r\n// Timer\r\n.todays-Sale {\r\n  display: flex;\r\n  .sale-now-txt{\r\n    color: #218ab6;\r\n    font-weight: 500;\r\n  }\r\n  span {\r\n    padding-left: 20px;\r\n    .timer-Wrap {\r\n      display: flex;\r\n      justify-content: space-evenly;\r\n      align-items: center;\r\n      li {\r\n        margin-right: 10px;\r\n        width: 30px;\r\n        height: 30px;\r\n        background: #218ab6;\r\n        text-align: center;\r\n        line-height: 30px;\r\n        color: #ffffff;\r\n        border-radius: 4px;\r\n        font-size: 18px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// cat grid end\r\n.sc-mt {\r\n  margin-top: 100px;\r\n}\r\n.Cbo-item {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n}\r\n\r\n.react-rater-star.is-active {\r\n  color: #ffaf36;\r\n}\r\n.product-item {\r\n  margin-bottom: 10px;\r\n  transition: all ease-in-out 600ms;\r\n  position: relative;\r\n  &:hover {\r\n    box-shadow: 0 10px 20px 0 rgb(0 0 0 / 8%);\r\n    -webkit-box-shadow: 0 10px 20px 0 rgb(0 0 0 / 8%);\r\n  }\r\n  &:hover .view-details {\r\n    display: block;\r\n  }\r\n  .react-rater-star {\r\n    font-size: 22px;\r\n  }\r\n  .product__description {\r\n    padding: 10px 1px 10px 15px;\r\n    h5 {\r\n      padding-bottom: 10px;\r\n      font-size: 14px;\r\n      color: #218ab6;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  &.product-item--loading {\r\n    .product__image,\r\n    .product__description h3,\r\n    .product__price h4 {\r\n      &:before {\r\n        content: \"\";\r\n        background-color: #eee;\r\n        background-image: linear-gradient(90deg, #eee, #f5f5f5, #eee);\r\n        animation-name: skeleton;\r\n        animation-duration: 1.2s;\r\n        animation-timing-function: ease-in-out;\r\n        animation-iteration-count: infinite;\r\n        background-size: 200px 100%;\r\n        background-repeat: no-repeat;\r\n        border-radius: 4px;\r\n        display: inline-block;\r\n        line-height: 1;\r\n        width: 100%;\r\n      }\r\n    }\r\n    .product__image {\r\n      position: relative;\r\n      &:before {\r\n        top: 0;\r\n        left: 0;\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 250px;\r\n      }\r\n    }\r\n    .product__description {\r\n      h3 {\r\n        &:before {\r\n          height: 20px;\r\n          width: 80%;\r\n        }\r\n      }\r\n    }\r\n    .product__price {\r\n      h4 {\r\n        width: 40%;\r\n        &:before {\r\n          height: 18px;\r\n          width: 100%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .product__image {\r\n    height: 165px;\r\n    background-color: #fafafa;\r\n    margin-bottom: 20px;\r\n    position: relative;\r\n    border-top-left-radius: 8px;\r\n    border-top-right-radius: 8px;\r\n    @include breakpoint(phone) {\r\n      margin-bottom: 5px;\r\n    }\r\n    > a {\r\n      height: 165px;\r\n      width: 100%;\r\n      display: block;\r\n      padding: 18px;\r\n      @include breakpoint(phone) {\r\n        padding: 24px;\r\n      }\r\n    }\r\n    .btn-heart {\r\n      top: 10px;\r\n      right: 12px;\r\n      z-index: 10;\r\n      width: 32px;\r\n      font-size: 12px;\r\n      border: none;\r\n      height: 32px;\r\n      background-color: #fff;\r\n      position: absolute;\r\n      box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.16);\r\n      @include breakpoint(phone) {\r\n        height: 38px;\r\n        width: 38px;\r\n        top: 6px;\r\n        right: 10px;\r\n        font-size: 14px;\r\n      }\r\n      &:hover,\r\n      &.btn-heart--active {\r\n        color: #ffffff;\r\n        background-color: #218ab6;\r\n      }\r\n    }\r\n    img {\r\n      top: 0;\r\n      left: 0;\r\n      z-index: 5;\r\n      width: 100%;\r\n      height: 165px;\r\n      object-position: top center;\r\n      object-fit: cover;\r\n      position: absolute;\r\n      border-top-left-radius: 8px;\r\n      border-top-right-radius: 8px;\r\n    }\r\n    .product__discount {\r\n      color: #fff;\r\n      padding: 5px 9px;\r\n      border-radius: 4px;\r\n      font-weight: 500;\r\n      font-size: 12px;\r\n      z-index: 10;\r\n      position: relative;\r\n      background-color: #218ab6;\r\n      top: -13px;\r\n      left: -13px;\r\n    }\r\n  }\r\n  .product__description {\r\n    .btn-hm-add {\r\n      padding: 8px 15px;\r\n      background-color: #218ab6;\r\n      color: #ffffff;\r\n      border-radius: 30px;\r\n    }\r\n    h3 {\r\n      margin-bottom: 9px;\r\n      font-weight: 300;\r\n      font-size: 13px;\r\n      cursor: pointer;\r\n      @include breakpoint(phone) {\r\n        font-size: 16px;\r\n      }\r\n    }\r\n    .product__price {\r\n      display: flex;\r\n      h4 {\r\n        font-weight: 400;\r\n        font-size: 15px;\r\n        @include breakpoint(phone) {\r\n          font-size: 18px;\r\n        }\r\n      }\r\n      span {\r\n        color: #cecece;\r\n        margin-left: 10px;\r\n        font-size: 15px;\r\n        @include breakpoint(phone) {\r\n          font-size: 14px;\r\n          margin-left: 10px;\r\n        }\r\n      }\r\n      &.product__price--discount {\r\n        h4 {\r\n          color: #218ab6;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// hover view details\r\n.view-details {\r\n  position: absolute;\r\n  top: 24%;\r\n  right: 25%;\r\n  z-index: 100;\r\n  padding: 12px;\r\n  background: #218ab6;\r\n  color: #fff;\r\n  border-radius: 30px;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  display: none;\r\n}\r\n// hover view details\r\n.hover-details {\r\n  position: absolute;\r\n  z-index: 100;\r\n  padding: 12px;\r\n  background: #218ab6;\r\n  color: #fff;\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  left: 20%;\r\n  top: 33%;\r\n  border-radius: 30px;\r\n  transition: all ease-in-out 600ms;\r\n  display: none;\r\n}\r\n.brandslider {\r\n  text-align: center;\r\n  .brand-list {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    li {\r\n      display: flex;\r\n      flex-basis: calc(20% - 14px);\r\n      justify-content: center;\r\n      flex-direction: column;\r\n      margin: 10px 0 10px 10px;\r\n      position: relative;\r\n      &:hover .hover-details {\r\n        display: block;\r\n      }\r\n    }\r\n  }\r\n}\r\n.brand-link {\r\n  h2 {\r\n    padding: 15px 0px;\r\n    text-transform: capitalize;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n  }\r\n  img {\r\n    width: 100%;\r\n  }\r\n}\r\n.product-item {\r\n  border: 1px solid #e2e8f0;\r\n  border-radius: 8px;\r\n}\r\n\r\n.section-products-featured {\r\n  .section-products-featured__header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    @include breakpoint(phone) {\r\n      margin-bottom: 45px;\r\n      border-bottom: 1px solid #e2e8f0;\r\n    }\r\n    h3 {\r\n      font-weight: 600;\r\n      font-size: 18px;\r\n      border-bottom: 2px solid #218ab6;\r\n      padding-bottom: 20px;\r\n      @include breakpoint(phone) {\r\n        font-size: 22px;\r\n      }\r\n    }\r\n  }\r\n  .products-carousel {\r\n    .swiper-container {\r\n      overflow: hidden;\r\n      .swiper-wrapper {\r\n        position: relative;\r\n        .swiper-slide,\r\n        .swiper-slide-active,\r\n        .swiper-slide-duplicate {\r\n          width: 240px;\r\n          background-size: cover;\r\n          background-repeat: no-repeat;\r\n          cursor: pointer !important;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n.swiper-slide {\r\n  cursor: pointer !important;\r\n}\r\n\r\n.section-products-featured {\r\n  margin: 40px 0px;\r\n  padding: 30px 20px;\r\n  background: #ffffff;\r\n  border-radius: 10px;\r\n}\r\n// Banner sart\r\n.saveTime-Wrap {\r\n  padding: 0px 0px 50px 0px;\r\n  .saveTime {\r\n    img {\r\n      width: 100%;\r\n      height: 500px;\r\n    }\r\n  }\r\n}\r\n.PromotionBanner {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 50px;\r\n  img {\r\n    transition: all 0.2s ease-in-out;\r\n    &:hover {\r\n      -webkit-transform: scale(1.07); /* Safari and Chrome */\r\n      -moz-transform: scale(1.07); /* Firefox */\r\n      -ms-transform: scale(1.07); /* IE 9 */\r\n      -o-transform: scale(1.07); /* Opera */\r\n      transform: scale(1.07);\r\n    }\r\n  }\r\n  .PromotionLeft {\r\n    margin: 0px 20px;\r\n    overflow: hidden;\r\n    cursor: pointer;\r\n    img {\r\n      height: 580px;\r\n    }\r\n  }\r\n  .Promo-Banner-List {\r\n    display: grid;\r\n    grid-template-columns: auto;\r\n    column-gap: 10px;\r\n    row-gap: 1em;\r\n    overflow: hidden;\r\n    cursor: pointer;\r\n  }\r\n}\r\n.Achive-wrap {\r\n  padding: 30px 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  margin-bottom: 50px;\r\n  .Achive-header {\r\n    margin-bottom: 45px;\r\n    border-bottom: 1px solid #ebebeb;\r\n    h2 {\r\n      border-bottom: 2px solid #218ab6;\r\n      padding-bottom: 15px;\r\n      font-size: 29px;\r\n      width: 400px;\r\n    }\r\n  }\r\n  .Achive-list {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    li {\r\n      transition: all ease-in-out 600ms;\r\n      border: 2px solid #eeeeee;\r\n      border-radius: 8px;\r\n      padding: 10px;\r\n      text-align: center;\r\n      width: 16%;\r\n      cursor: pointer;\r\n      p {\r\n        padding-bottom: 20px;\r\n        svg {\r\n          width: 50px;\r\n          height: 50px;\r\n          stroke: #218ab6;\r\n          transition: all ease-in-out 600ms;\r\n        }\r\n        i {\r\n          color: #218ab6;\r\n          transition: all ease-in-out 600ms;\r\n          font-size: 50px;\r\n        }\r\n      }\r\n      span {\r\n        transition: all ease-in-out 600ms;\r\n        font-size: 30px;\r\n        font-weight: 500;\r\n        color: #218ab6;\r\n      }\r\n      h3 {\r\n        transition: all ease-in-out 600ms;\r\n        font-size: 18px;\r\n        font-weight: 600;\r\n        padding-top: 20px;\r\n        color: #218ab6;\r\n      }\r\n      &:hover svg {\r\n        stroke: #218ab6;\r\n      }\r\n      &:hover i {\r\n        color: #218ab6;\r\n      }\r\n      &:hover span {\r\n        color: #218ab6;\r\n      }\r\n      &:hover h3 {\r\n        color: #218ab6;\r\n      }\r\n      &:hover {\r\n        border: 2px solid #218ab6;\r\n        color: #218ab6;\r\n      }\r\n    }\r\n  }\r\n}\r\n.swiper-slide {\r\n  background-size: cover !important;\r\n}\r\n.Info-list {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  .card {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 0;\r\n    word-wrap: break-word;\r\n    background-color: rgb(255, 255, 255);\r\n    background-clip: border-box;\r\n    border: 1px solid #e2e8f0;\r\n    border-radius: 0.25rem;\r\n    margin-bottom: 15px;\r\n    button {\r\n      font-size: 14px;\r\n      padding: 15px 20px;\r\n    }\r\n    .card-body {\r\n      padding: 15px 20px;\r\n    }\r\n  }\r\n}\r\n.collapse:not(.show) {\r\n  display: none;\r\n}\r\n// how works\r\n.How-works {\r\n  padding: 30px 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  margin-bottom: 50px;\r\n  .How-works-header {\r\n    border-bottom: 1px solid #ebebeb;\r\n    h2 {\r\n      border-bottom: 2px solid #218ab6;\r\n      padding-bottom: 15px;\r\n      width: 200px;\r\n      font-size: 29px;\r\n      text-transform: capitalize;\r\n      padding-bottom: 20px;\r\n    }\r\n    p {\r\n      font-size: 16px;\r\n      line-height: 28px;\r\n      padding-top: 30px;\r\n      color: #3cce8f;\r\n    }\r\n  }\r\n  .How-works-body {\r\n    padding-top: 20px;\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    p {\r\n      color: #4c8000;\r\n      line-height: 24px;\r\n      padding-bottom: 30px;\r\n    }\r\n  }\r\n}\r\n// info\r\n.InfoSections-Wrap {\r\n  padding: 30px 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  margin-bottom: 50px;\r\n}\r\n.InfoSections-Wrap {\r\n  .Info-item {\r\n    width: 33%;\r\n    img {\r\n      width: 100%;\r\n      height: 340px;\r\n    }\r\n  }\r\n  .InfoSections-header {\r\n    border-bottom: 1px solid #ebebeb;\r\n    margin-bottom: 65px;\r\n    h2 {\r\n      font-size: 29px;\r\n      border-bottom: 2px solid #218ab6;\r\n      padding-bottom: 20px;\r\n      max-width: 350px;\r\n    }\r\n  }\r\n}\r\n\r\n// Banner end\r\n// testimonial\r\n.OurCustomerSay {\r\n  padding: 30px 20px;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n  margin-bottom: 50px;\r\n  .heading {\r\n    border-bottom: 1px solid #ebebeb;\r\n    margin-bottom: 65px;\r\n    h2 {\r\n      font-size: 29px;\r\n      border-bottom: 2px solid #218ab6;\r\n      padding-bottom: 15px;\r\n      width: 600px;\r\n    }\r\n  }\r\n  .Testimonial-slide {\r\n    text-align: center;\r\n    .swiper-slide {\r\n      padding: 0px 200px;\r\n      img {\r\n        width: 150px;\r\n        height: 150px;\r\n        border: 1px solid;\r\n        border-radius: 100%;\r\n      }\r\n      h3 {\r\n        font-size: 16px;\r\n        padding: 10px 0px;\r\n      }\r\n      p {\r\n        font-size: 14px;\r\n        line-height: 22px;\r\n      }\r\n    }\r\n    .swiper-button-prev,\r\n    .swiper-button-next {\r\n      bottom: 20px;\r\n      top: 50%;\r\n      transform: translateX(50%);\r\n      right: auto;\r\n      width: 30px;\r\n      height: 30px;\r\n      z-index: 100;\r\n      font-size: 13px;\r\n      display: flex;\r\n      cursor: pointer;\r\n      justify-content: center;\r\n      align-items: center;\r\n      position: absolute;\r\n      display: none;\r\n      background-color: rgba(255, 255, 255, 0.12);\r\n      border-radius: 100%;\r\n\r\n      &:before {\r\n        color: #fff;\r\n        content: \"\\e80b\";\r\n        font-family: \"icons\";\r\n      }\r\n      &:hover {\r\n        background: #fff;\r\n        &:before {\r\n          color: #000;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// testimonial end\r\n.subscribe {\r\n  margin-bottom: 30px;\r\n  .subscribe__content {\r\n    padding: 35px 20px;\r\n    background-color: #fafafa;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    position: relative;\r\n    background-position: center;\r\n    @include breakpoint(phone) {\r\n      padding: 40px 60px 40px 60px;\r\n    }\r\n    @include breakpoint(tablet-lg) {\r\n      padding: 80px 125px 80px 105px;\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n    &:before {\r\n      content: \"\";\r\n      width: 100%;\r\n      left: 0;\r\n      top: 0;\r\n      z-index: 5;\r\n      width: 100%;\r\n      height: 100%;\r\n      position: absolute;\r\n      background-color: rgba(0, 0, 0, 0.4);\r\n    }\r\n    * {\r\n      z-index: 10;\r\n      position: relative;\r\n    }\r\n    h4 {\r\n      font-size: 18px;\r\n      color: #fff;\r\n      margin-bottom: 20px;\r\n      line-height: 130%;\r\n      margin-right: auto;\r\n      @include breakpoint(phone) {\r\n        font-size: 23px;\r\n      }\r\n      @include breakpoint(tablet-lg) {\r\n        width: 504px;\r\n        font-size: 26px;\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n    .subscribe__form {\r\n      input {\r\n        width: 100%;\r\n        height: 40px;\r\n        padding: 0 25px;\r\n        color: #ababab;\r\n        font-size: 13px;\r\n        background-color: #fff;\r\n        border-radius: 30px;\r\n        margin-right: 25px;\r\n        @include breakpoint(phone) {\r\n          width: auto;\r\n          height: 48px;\r\n          padding: 0 35px;\r\n        }\r\n      }\r\n      .btn {\r\n        margin-top: 10px;\r\n        font-size: 11px;\r\n        padding-top: 10px;\r\n        padding-bottom: 10px;\r\n        @include breakpoint(phone) {\r\n          padding: 11px 20px;\r\n          font-size: 13px;\r\n          margin-top: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.ckSection {\r\n  @include breakpoint(phone) {\r\n    // margin-bottom: 150px;\r\n  }\r\n  .section__intro {\r\n    margin-bottom: 36px;\r\n    @include breakpoint(phone) {\r\n      // margin-bottom: 93px;\r\n    }\r\n    h4 {\r\n      font-size: 23px;\r\n      font-weight: 300;\r\n      text-align: center;\r\n      @include breakpoint(phone) {\r\n        font-size: 29px;\r\n      }\r\n    }\r\n  }\r\n}\r\n// footer\r\n.mobileApp {\r\n  .androApp {\r\n    margin-top: 10px;\r\n  }\r\n  .appleApp {\r\n    padding: 15px;\r\n    border: 1px solid #ebebeb;\r\n    border-radius: 4px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    .appleApp-logo {\r\n      padding-right: 20px;\r\n      img {\r\n        width: 40px;\r\n      }\r\n    }\r\n    .appleInfo {\r\n      p {\r\n        font-size: 14px;\r\n        font-weight: 500;\r\n        padding-bottom: 15px;\r\n        color: #ffffff;\r\n        text-transform: capitalize;\r\n      }\r\n      h4 {\r\n        font-size: 16px;\r\n        font-weight: 500;\r\n        color: #ffffff;\r\n        text-transform: capitalize;\r\n      }\r\n    }\r\n  }\r\n}\r\n.footer-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  input,\r\n  textarea {\r\n    border: 1px solid #ebebeb;\r\n    padding: 8px;\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n    color: #131313;\r\n    background: #f2f3f8;\r\n    border-radius: 4px;\r\n  }\r\n  button {\r\n    border: 0;\r\n    background: #218ab6;\r\n    border-radius: 30px;\r\n    color: #fff;\r\n    padding: 12px 30px;\r\n    text-transform: uppercase;\r\n  }\r\n}\r\n.f-info {\r\n  padding-top: 15px;\r\n  display: flex;\r\n  justify-content: start;\r\n  align-items: center;\r\n  color: #f2f3f8;\r\n  li {\r\n    list-style: none;\r\n    svg {\r\n      stroke: #4c8000;\r\n    }\r\n  }\r\n  h1 {\r\n    color: #f2f3f8;\r\n    font-size: 14px;\r\n  }\r\n  a {\r\n    font-size: 14px;\r\n  }\r\n}\r\n.site-footer {\r\n  padding-top: 50px;\r\n  background: #1a202c;\r\n  @include breakpoint(phone) {\r\n    padding-top: 90px;\r\n  }\r\n  .site-footer__top {\r\n    @include breakpoint(phone) {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      padding-bottom: 60px;\r\n    }\r\n    @include breakpoint(tablet-lg) {\r\n      flex-wrap: nowrap;\r\n    }\r\n  }\r\n  .site-footer__description {\r\n    margin-right: auto;\r\n    margin-bottom: 70px;\r\n    @include breakpoint(phone) {\r\n      width: 400px;\r\n      margin-bottom: 50px;\r\n    }\r\n    @include breakpoint(tablet-lg) {\r\n      margin-bottom: 0;\r\n    }\r\n    svg {\r\n      object-fit: contain;\r\n      width: 30px;\r\n      height: 20px;\r\n      fill: rgb(255, 255, 255);\r\n      margin-right: 10px;\r\n    }\r\n    h6 {\r\n      display: flex;\r\n      color: #218ab6;\r\n      font-weight: 600;\r\n      align-items: center;\r\n      margin-bottom: 33px;\r\n      font-size: 18px;\r\n    }\r\n    p {\r\n      font-size: 13px;\r\n      line-height: 190%;\r\n    }\r\n  }\r\n  .site-footer__social-networks {\r\n    display: flex;\r\n    margin-top: 20px;\r\n    li {\r\n      font-size: 21px;\r\n      margin-right: 20px;\r\n      .footer-icon1 {\r\n        color: #3b5998;\r\n      }\r\n      .footer-icon2 {\r\n        color: #00acee;\r\n      }\r\n      .footer-icon3 {\r\n        color: #0e76a8;\r\n      }\r\n      .footer-icon4 {\r\n        color: #8a3ab9;\r\n      }\r\n      .footer-icon5 {\r\n        color: #ff0000;\r\n      }\r\n    }\r\n  }\r\n  .site-footer__links {\r\n    @include breakpoint(phone) {\r\n      display: flex;\r\n      width: 100%;\r\n    }\r\n    @include breakpoint(tablet-lg) {\r\n      width: auto;\r\n    }\r\n    ul {\r\n      @include breakpoint(phone) {\r\n        margin-right: 50px;\r\n        margin-bottom: 0;\r\n      }\r\n      @include breakpoint(tablet-lg) {\r\n        margin-right: 50px;\r\n      }\r\n      &:last-of-type {\r\n        margin-right: 0;\r\n      }\r\n      .f-heading {\r\n        font-size: 16px;\r\n        font-weight: 600;\r\n        color: #218ab6;\r\n      }\r\n      li {\r\n        a {\r\n          font-size: 14px;\r\n          color: #fff;\r\n          margin-bottom: 12px;\r\n          font-weight: 300;\r\n        }\r\n        @include breakpoint(phone) {\r\n          margin-bottom: 15px;\r\n        }\r\n        &:first-child {\r\n          font-weight: 600;\r\n          margin-bottom: 26px;\r\n          @include breakpoint(phone) {\r\n            margin-bottom: 34px;\r\n          }\r\n        }\r\n        a {\r\n          &:hover {\r\n            text-decoration: underline;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .site-footer__bottom {\r\n    padding: 20px 0;\r\n    border-top: 1px solid #ebebeb;\r\n    @include breakpoint(phone) {\r\n      padding: 33px 0;\r\n    }\r\n    .container {\r\n      font-size: 11px;\r\n      text-align: center;\r\n      @include breakpoint(phone) {\r\n        font-size: 16px;\r\n      }\r\n    }\r\n  }\r\n}\r\n.campaings-link img {\r\n  width: 100%;\r\n}\r\n.reg-log-role {\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  .cus,\r\n  .ser {\r\n    background: #000;\r\n    height: 50px;\r\n    width: 250px;\r\n    color: #ffffff;\r\n    &:hover {\r\n      background: #4c8000;\r\n    }\r\n  }\r\n  .or {\r\n    background: #000;\r\n    height: 50px;\r\n    width: 60px;\r\n    color: #ffffff;\r\n    border-left: 2px solid #4c8000;\r\n    border-right: 2px solid #4c8000;\r\n    &:hover {\r\n      background: #4c8000;\r\n    }\r\n  }\r\n}\r\n// capmpai end\r\n.shop-data {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-left: 282px;\r\n  margin-top: 10px;\r\n  margin-bottom: 50px;\r\n  cursor: pointer;\r\n  @include breakpoint(phone) {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  li {\r\n    text-align: center;\r\n    margin-bottom: 50px;\r\n    background: #fff;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    @include breakpoint(phone) {\r\n      width: 19.5%;\r\n      margin-bottom: 0;\r\n      text-align: left;\r\n    }\r\n    i {\r\n      height: 55px;\r\n      width: 55px;\r\n      font-size: 20px;\r\n      flex-shrink: 0;\r\n      display: flex;\r\n      color: #4c8000;\r\n      border-radius: 10px;\r\n      transition: all 0.3s ease;\r\n      justify-content: center;\r\n      align-items: center;\r\n      margin-bottom: 6px;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n      @include breakpoint(phone) {\r\n        margin-bottom: 5px;\r\n        margin-left: 0;\r\n        margin-right: 0;\r\n      }\r\n    }\r\n    .data-item__content {\r\n      h4 {\r\n        margin-bottom: 10px;\r\n      }\r\n      p {\r\n        font-size: 13px;\r\n        line-height: 150%;\r\n      }\r\n    }\r\n    &:hover {\r\n      i {\r\n        color: #4c8000;\r\n        background: var(--color-orange-light);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.checkbox-color-wrapper {\r\n  display: flex;\r\n  position: relative;\r\n  .checkbox-color {\r\n    width: calc(100% / 6);\r\n  }\r\n}\r\n\r\n.checkbox-color {\r\n  font-weight: 300;\r\n  font-size: 14px;\r\n  display: flex;\r\n  color: #000;\r\n  margin-bottom: 18px;\r\n  align-items: center;\r\n  .checkbox__check {\r\n    display: block;\r\n    width: 100%;\r\n    position: relative;\r\n    padding-bottom: 100%;\r\n    border-top: 1px solid #d4d4d4;\r\n    border-bottom: 1px solid #d4d4d4;\r\n    border-right: 1px solid #d4d4d4;\r\n    .checkbox__color {\r\n      position: absolute;\r\n      top: 8px;\r\n      left: 8px;\r\n      right: 8px;\r\n      bottom: 8px;\r\n    }\r\n  }\r\n  &:first-of-type {\r\n    .checkbox__check {\r\n      border-left: 1px solid #d4d4d4;\r\n    }\r\n  }\r\n  input {\r\n    height: 0;\r\n    width: 0;\r\n    display: none;\r\n    overflow: hidden;\r\n  }\r\n  input:checked + .checkbox__check {\r\n    background-color: #dbdbdb;\r\n  }\r\n}\r\n\r\n.products-page {\r\n  .container {\r\n    @include breakpoint(phone) {\r\n      display: flex;\r\n      align-items: flex-start;\r\n    }\r\n  }\r\n  .products-filter {\r\n    .btn-submit {\r\n      display: block;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n      width: 150px;\r\n      margin-top: 20px;\r\n      margin-bottom: 30px;\r\n      @include breakpoint(phone) {\r\n        display: none;\r\n      }\r\n    }\r\n    .products-filter__wrapper {\r\n      width: 300px;\r\n      left: -300px;\r\n      top: 101px;\r\n      overflow: auto;\r\n      height: calc(100% - 101px);\r\n      flex-shrink: 0;\r\n      position: fixed;\r\n      z-index: 99;\r\n      padding: 20px 20px;\r\n      background-color: #fff;\r\n      transition: all 0.4s ease;\r\n      @include breakpoint(phone) {\r\n        top: 134px;\r\n      }\r\n      @include breakpoint(tablet-lg) {\r\n        position: relative;\r\n        left: 0;\r\n        top: 0;\r\n        padding: 0;\r\n        height: auto;\r\n        margin-right: 20px;\r\n        width: 220px;\r\n      }\r\n      @include breakpoint(desktop-lg) {\r\n        width: 260px;\r\n        top: 0;\r\n        margin-right: 20px;\r\n      }\r\n      &.products-filter__wrapper--open {\r\n        left: 0;\r\n      }\r\n    }\r\n    .products-filter__menu-btn {\r\n      margin-bottom: 20px;\r\n      top: 65px;\r\n      width: 100%;\r\n      left: 0;\r\n      right: 0;\r\n      padding: 8px 16px;\r\n      z-index: 100;\r\n      font-size: 12px;\r\n      background-color: #fff;\r\n      border-bottom: 1px solid #e6e6e6;\r\n      @include breakpoint(phone) {\r\n        top: 100px;\r\n      }\r\n      @include breakpoint(tablet-lg) {\r\n        display: none;\r\n      }\r\n      i {\r\n        display: inline-block;\r\n        transition: all 0.3s ease;\r\n        transform: rotate(270deg);\r\n      }\r\n      &.products-filter__menu-btn--active {\r\n        i {\r\n          transform: rotate(90deg);\r\n        }\r\n      }\r\n    }\r\n    .products-filter__block {\r\n      padding: 20px 21px;\r\n      margin-bottom: 13px;\r\n      border: 1px solid #e6e6e6;\r\n      @include breakpoint(tablet-lg) {\r\n        padding: 24px 31px;\r\n      }\r\n      > button {\r\n        font-size: 12px;\r\n        display: flex;\r\n        align-items: center;\r\n        font-weight: 600;\r\n        width: 100%;\r\n        text-transform: uppercase;\r\n        i {\r\n          font-size: 21px;\r\n          margin-left: auto;\r\n        }\r\n      }\r\n    }\r\n    .rc-slider {\r\n      .rc-slider-handle {\r\n        height: 20px;\r\n        width: 20px;\r\n        margin-top: -7px;\r\n        border-color: #000;\r\n        &.rc-slider-handle-dragging {\r\n          box-shadow: none;\r\n        }\r\n      }\r\n      .rc-slider-track {\r\n        background: #000000;\r\n      }\r\n    }\r\n    .products-filter__block__content {\r\n      padding-top: 25px;\r\n    }\r\n  }\r\n  .products-content {\r\n    width: 100%;\r\n    .products-content__intro {\r\n      display: flex;\r\n      position: relative;\r\n      align-items: center;\r\n      margin-bottom: 35px;\r\n      flex-wrap: wrap;\r\n      background: #fff;\r\n      padding: 10px;\r\n      border-radius: 4px;\r\n      h2 {\r\n        font-size: 18px;\r\n        margin-right: auto;\r\n        font-weight: 300;\r\n        @include breakpoint(phone) {\r\n          font-size: 24px;\r\n        }\r\n        span {\r\n          color: #d8d8d8;\r\n        }\r\n      }\r\n      .products-filter-btn {\r\n        font-size: 16px;\r\n        @include breakpoint(phone) {\r\n          display: none;\r\n        }\r\n      }\r\n      .products-content__filter {\r\n        position: absolute;\r\n        width: 290px;\r\n        padding: 20px;\r\n        top: 150%;\r\n        right: 0;\r\n        display: none;\r\n        z-index: 50;\r\n        border: 1px solid #e5e5e5;\r\n        background-color: #fff;\r\n        &.products-order-open {\r\n          display: block;\r\n        }\r\n        @include breakpoint(phone) {\r\n          display: flex;\r\n          width: 100%;\r\n          padding: 0;\r\n          border: none;\r\n          position: static;\r\n          margin-top: 30px;\r\n        }\r\n        @include breakpoint(tablet-lg) {\r\n          width: auto;\r\n          margin-top: 0;\r\n        }\r\n        .products__filter__select {\r\n          display: flex;\r\n          align-items: center;\r\n          margin-bottom: 20px;\r\n          &:last-of-type {\r\n            margin-bottom: 0;\r\n          }\r\n          &:first-of-type {\r\n            margin-left: 0;\r\n          }\r\n          @include breakpoint(phone) {\r\n            margin-left: 42px;\r\n            margin-bottom: 0;\r\n          }\r\n          h4 {\r\n            font-size: 13px;\r\n            @include breakpoint(phone) {\r\n              font-size: 16px;\r\n            }\r\n          }\r\n          .select-wrapper {\r\n            margin-left: auto;\r\n            @include breakpoint(phone) {\r\n              margin-left: 15px;\r\n            }\r\n            select {\r\n              font-size: 13px;\r\n              padding: 6px 25px 6px 8px;\r\n              @include breakpoint(phone) {\r\n                padding: 9px 38px 9px 12px;\r\n                font-size: 15px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.checkbox {\r\n  font-weight: 300;\r\n  font-size: 14px;\r\n  display: flex;\r\n  color: #000;\r\n  margin-bottom: 18px;\r\n  align-items: center;\r\n  .checkbox__check {\r\n    display: block;\r\n    width: 26px;\r\n    height: 26px;\r\n    flex-shrink: 0;\r\n    position: relative;\r\n    margin-right: 18px;\r\n    border: 1px solid #d4d4d4;\r\n    &:before {\r\n      display: block;\r\n      content: \"\";\r\n      position: absolute;\r\n      top: 4px;\r\n      left: 9px;\r\n      opacity: 0;\r\n      width: 7px;\r\n      height: 12.5px;\r\n      transform: scale(1) rotate(45deg);\r\n      z-index: 100;\r\n      border: 1px solid black;\r\n      -webkit-transition: all 0.2s linear;\r\n      -o-transition: all 0.2s linear;\r\n      transition: all 0.2s linear;\r\n      border-width: 0 2px 2px 0;\r\n    }\r\n  }\r\n  input:checked + .checkbox__check {\r\n    &:before {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  &.checkbox--square {\r\n    position: relative;\r\n    width: calc(100% / 6);\r\n    input:checked + .checkbox__check {\r\n      background-color: #000;\r\n      border-color: #000;\r\n      &:before {\r\n        opacity: 0;\r\n      }\r\n    }\r\n    input:checked ~ p {\r\n      color: #fff;\r\n    }\r\n    input {\r\n      display: none;\r\n    }\r\n    p {\r\n      position: absolute;\r\n      left: 50%;\r\n      top: 50%;\r\n      transform: translate(-50%, -50%);\r\n    }\r\n    .checkbox__check {\r\n      display: block;\r\n      width: 100%;\r\n      margin-right: 0;\r\n      position: relative;\r\n      padding-bottom: 100%;\r\n      border-left: none;\r\n      border-top: 1px solid #d4d4d4;\r\n      border-bottom: 1px solid #d4d4d4;\r\n      border-right: 1px solid #d4d4d4;\r\n      .checkbox__color {\r\n        position: absolute;\r\n        top: 8px;\r\n        left: 8px;\r\n        right: 8px;\r\n        bottom: 8px;\r\n      }\r\n    }\r\n    &:first-of-type {\r\n      .checkbox__check {\r\n        border-left: 1px solid #d4d4d4;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.checkbox-square-wrapper {\r\n  display: flex;\r\n  .checkbox {\r\n  }\r\n}\r\n\r\n.checkbox-wrapper {\r\n}\r\n\r\n.products-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-right: -15px;\r\n  @include breakpoint(phone) {\r\n    margin-right: -33px;\r\n  }\r\n  @include breakpoint(tablet-lg) {\r\n    margin-right: 0;\r\n  }\r\n  .product-item {\r\n    width: calc(100% / 2 - 15px);\r\n    margin-bottom: 50px;\r\n    margin-right: 15px;\r\n    @include breakpoint(phone) {\r\n      margin-right: 25px;\r\n      margin-bottom: 40px;\r\n      width: calc(100% / 4 - 25px);\r\n    }\r\n    @include breakpoint(tablet-lg) {\r\n      margin-right: 25px;\r\n      margin-bottom: 40px;\r\n      width: calc(100% / 4 - 25px);\r\n    }\r\n  }\r\n}\r\n\r\n.select-wrapper {\r\n  position: relative;\r\n  &:before {\r\n    right: 15px;\r\n    font-family: \"icons\";\r\n    display: block;\r\n    position: absolute;\r\n    content: \"\\e801\";\r\n    top: 50%;\r\n    color: #aaaaaa;\r\n    font-size: 16px;\r\n    transform: translateY(-50%);\r\n  }\r\n  select {\r\n    font-size: 15px;\r\n    padding: 9px 38px 9px 12px;\r\n    border: 1px solid #d8d8d8;\r\n    border-radius: 50px;\r\n    option {\r\n      font-size: 15px;\r\n    }\r\n  }\r\n  &.select-form {\r\n    select {\r\n      width: 100%;\r\n    }\r\n  }\r\n}\r\n\r\n.quantity-buttons {\r\n  display: flex;\r\n  align-items: center;\r\n  .btn {\r\n    margin: 0 17px;\r\n  }\r\n}\r\n\r\n.quantity-button {\r\n  border-radius: 50px;\r\n  height: 38px;\r\n  padding: 0 20px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  border: 1px solid #d8d8d8;\r\n  @include breakpoint(phone) {\r\n    height: 49px;\r\n  }\r\n  .quantity-button__btn {\r\n    font-size: 23px;\r\n    font-weight: 400;\r\n  }\r\n  span {\r\n    font-size: 18px;\r\n    color: #000;\r\n    margin: 0 18px;\r\n    font-weight: 700;\r\n  }\r\n}\r\n\r\n.btn-heart {\r\n  border-radius: 100%;\r\n  width: 49px;\r\n  height: 49px;\r\n  display: flex;\r\n  font-size: 16px;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 1px solid #d8d8d8;\r\n  &:hover,\r\n  &.btn-heart--active {\r\n    color: #ffffff;\r\n    background-color: #4c8000;\r\n  }\r\n}\r\n\r\n.product-single-page {\r\n  .section {\r\n    margin-bottom: 90;\r\n  }\r\n}\r\n\r\n.product-single {\r\n  margin-bottom: 70px;\r\n  @include breakpoint(phone) {\r\n    margin-bottom: 170px;\r\n  }\r\n  .product-single__description {\r\n    max-width: 938px;\r\n    margin: 0 auto;\r\n    flex-wrap: wrap;\r\n    @include breakpoint(phone) {\r\n      display: flex;\r\n      justify-content: space-between;\r\n    }\r\n    .product-description-block {\r\n      text-align: center;\r\n      width: 100%;\r\n      margin-bottom: 60px;\r\n      @include breakpoint(phone) {\r\n        width: 48%;\r\n        margin-bottom: 0;\r\n      }\r\n      i {\r\n        display: block;\r\n        font-size: 30px;\r\n        margin-bottom: 30px;\r\n        @include breakpoint(phone) {\r\n          font-size: 38px;\r\n          margin-bottom: 48px;\r\n        }\r\n      }\r\n      h4 {\r\n        color: #000;\r\n        font-weight: 700;\r\n        font-size: 15px;\r\n        margin-bottom: 25px;\r\n        @include breakpoint(phone) {\r\n          margin-bottom: 35px;\r\n          font-size: 16px;\r\n        }\r\n      }\r\n      p {\r\n        color: #000;\r\n        font-size: 13px;\r\n        line-height: 145%;\r\n        text-align: left;\r\n        @include breakpoint(phone) {\r\n          font-size: 14px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .product-single__content {\r\n    margin-bottom: 50px;\r\n    @include breakpoint(phone) {\r\n      display: flex;\r\n      align-items: flex-start;\r\n      margin-bottom: 100px;\r\n    }\r\n  }\r\n  .product-gallery {\r\n    @include breakpoint(phone) {\r\n      margin-right: 110px;\r\n    }\r\n    .product-gallery__thumbs {\r\n      height: 300px;\r\n      @include breakpoint(phone) {\r\n        height: 491px;\r\n      }\r\n    }\r\n    .product-gallery__thumb {\r\n      @include breakpoint(phone) {\r\n        height: calc(100% / 5 - 15px);\r\n      }\r\n    }\r\n  }\r\n  .product-content {\r\n    flex: 1;\r\n  }\r\n  .product-single__reviews {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    flex-wrap: wrap;\r\n    .reviews-list {\r\n      width: 100%;\r\n      margin-left: auto;\r\n      @include breakpoint(phone) {\r\n        width: 48%;\r\n      }\r\n    }\r\n  }\r\n  .product-single__info {\r\n    .product-single__info-btns {\r\n      display: flex;\r\n      justify-content: center;\r\n      margin-bottom: 90px;\r\n      .btn {\r\n        margin: 0 15px;\r\n        padding: 8px 22px;\r\n        @include breakpoint(phone) {\r\n          padding: 12px 28px;\r\n        }\r\n        &.btn--active {\r\n          border: 1px solid var(--color-orange);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.product-content {\r\n  position: relative;\r\n  .product-content__intro {\r\n    margin-bottom: 40px;\r\n    @include breakpoint(phone) {\r\n      margin-bottom: 60px;\r\n    }\r\n  }\r\n  .product-filter-item {\r\n    margin-bottom: 38px;\r\n    &:last-of-type {\r\n      margin-bottom: 0;\r\n    }\r\n    h5 {\r\n      font-weight: 300;\r\n      font-size: 13px;\r\n      margin-bottom: 19px;\r\n      strong {\r\n        font-weight: 700;\r\n      }\r\n    }\r\n    .checkbox-color-wrapper {\r\n      .checkbox-color {\r\n        width: 30px;\r\n        height: 30px;\r\n        margin-right: 8px;\r\n        border: none;\r\n        @include breakpoint(phone) {\r\n          width: 43px;\r\n          height: 43px;\r\n          margin-right: 13px;\r\n        }\r\n        .checkbox__check {\r\n          border: 1px solid #d4d4d4;\r\n        }\r\n        .checkbox__color {\r\n          top: 4px;\r\n          left: 4px;\r\n          right: 4px;\r\n          bottom: 4px;\r\n          @include breakpoint(phone) {\r\n            top: 8px;\r\n            left: 8px;\r\n            right: 8px;\r\n            bottom: 8px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .product__prices {\r\n    display: flex;\r\n    h4 {\r\n      font-weight: 400;\r\n      color: #ff0000;\r\n      font-size: 18px;\r\n      @include breakpoint(phone) {\r\n        font-size: 30px;\r\n      }\r\n    }\r\n    span {\r\n      margin-left: 30px;\r\n      font-weight: 400;\r\n      font-size: 18px;\r\n      color: #cecece;\r\n      @include breakpoint(phone) {\r\n        font-size: 30px;\r\n      }\r\n    }\r\n  }\r\n  .product__id {\r\n    top: -10px;\r\n    right: 0;\r\n    text-align: right;\r\n    line-height: 146%;\r\n    color: #cecece;\r\n    font-size: 12px;\r\n    position: absolute;\r\n  }\r\n  .product__name {\r\n    font-size: 20px;\r\n    font-weight: 300;\r\n    margin-bottom: 9px;\r\n    @include breakpoint(phone) {\r\n      font-size: 30px;\r\n      margin-bottom: 15px;\r\n    }\r\n  }\r\n  .product-on-sale {\r\n    background-color: #ff0000;\r\n    color: #fff;\r\n    font-size: 11px;\r\n    font-weight: 500;\r\n    padding: 5px 9px;\r\n    text-transform: uppercase;\r\n    border-radius: 40px;\r\n    margin-bottom: 15px;\r\n    display: inline-block;\r\n    @include breakpoint(phone) {\r\n      font-size: 12px;\r\n      margin-bottom: 25px;\r\n    }\r\n  }\r\n}\r\n\r\n.product-gallery {\r\n  display: flex;\r\n  margin-bottom: 40px;\r\n  @include breakpoint(phone) {\r\n    margin-bottom: 0;\r\n  }\r\n  .product-gallery__thumbs {\r\n    display: none;\r\n    @include breakpoint(phone) {\r\n      width: 97px;\r\n      display: block;\r\n      margin-right: 28px;\r\n    }\r\n  }\r\n  .product-gallery__thumb {\r\n    width: 100%;\r\n    height: 97px;\r\n    margin-bottom: 15px;\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-position: top center;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n  .product-gallery__image {\r\n    height: 300px;\r\n    width: 100%;\r\n    @include breakpoint(phone) {\r\n      width: 476px;\r\n      height: 476px;\r\n    }\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-position: top center;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n}\r\n\r\n.review-item {\r\n  display: flex;\r\n  .review__avatar {\r\n    width: 40px;\r\n    margin-right: 27px;\r\n    flex-shrink: 0;\r\n    background-color: gray;\r\n    border-radius: 100%;\r\n    height: 40px;\r\n    img {\r\n      border-radius: 100%;\r\n      object-fit: cover;\r\n      height: 100%;\r\n      width: 100%;\r\n    }\r\n  }\r\n  .review__content {\r\n    flex: 1;\r\n    h3 {\r\n      font-size: 13px;\r\n      font-weight: 700;\r\n      margin-bottom: 4px;\r\n    }\r\n    .review__comment {\r\n      font-size: 13px;\r\n      color: #000;\r\n      line-height: 155%;\r\n    }\r\n    .react-rater {\r\n      margin-bottom: 5px;\r\n      .react-rater-star {\r\n        margin-right: 4px;\r\n        font-size: 21px;\r\n        line-height: 100%;\r\n        &.is-active {\r\n          color: var(--color-orange);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.reviews-list {\r\n  .review-item {\r\n    margin-bottom: 35px;\r\n    &:last-of-type {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n}\r\n\r\n.product-punctuation {\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-bottom: 50px;\r\n  @include breakpoint(phone) {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-bottom: 0;\r\n    flex-wrap: wrap;\r\n  }\r\n  .product-punctuation__values {\r\n    text-align: center;\r\n    margin-bottom: 25px;\r\n    @include breakpoint(phone) {\r\n      margin-bottom: 0;\r\n    }\r\n    h3 {\r\n      font-size: 59px;\r\n      font-weight: 700;\r\n      margin-bottom: 6px;\r\n    }\r\n    .react-rater {\r\n      margin-bottom: 9px;\r\n      .react-rater-star {\r\n        margin-right: 4px;\r\n        font-size: 23px;\r\n        line-height: 100%;\r\n        &.is-active {\r\n          color: var(--color-orange);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .product-punctuation__rates {\r\n    @include breakpoint(phone) {\r\n      width: 200px;\r\n      margin-left: 68px;\r\n    }\r\n  }\r\n  .punctuation-btn-wrapper {\r\n    width: 100%;\r\n    margin-top: 30px;\r\n    text-align: center;\r\n    @include breakpoint(phone) {\r\n      margin-top: 50px;\r\n    }\r\n  }\r\n}\r\n\r\n.punctuations-lists {\r\n  .punctuation-item {\r\n    display: flex;\r\n    align-items: center;\r\n    .react-rater {\r\n      .react-rater-star {\r\n        &.is-active {\r\n          color: var(--color-orange);\r\n        }\r\n      }\r\n    }\r\n    > span {\r\n      font-size: 12px;\r\n      color: #000;\r\n      margin: 0 auto;\r\n    }\r\n    .punctuation-item__bar {\r\n      height: 2px;\r\n      width: 142px;\r\n      margin-left: auto;\r\n      border-radius: 40px;\r\n      position: relative;\r\n      background-color: #dbdbdb;\r\n      .punctuation-item__bar__current {\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        height: 100%;\r\n        width: 50%;\r\n        z-index: 10;\r\n        background-color: var(--color-orange);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.checkout-steps {\r\n  display: flex;\r\n  align-items: center;\r\n  li {\r\n    position: relative;\r\n    padding-right: 60px;\r\n    @include breakpoint(phone) {\r\n      padding-right: 105px;\r\n    }\r\n    &.active {\r\n      i {\r\n        color: #fff;\r\n        background: var(--color-orange);\r\n      }\r\n    }\r\n    &.done {\r\n      i {\r\n        color: var(--color-orange);\r\n        border: 1.3px solid var(--color-orange);\r\n      }\r\n    }\r\n    &:before {\r\n      top: 50%;\r\n      right: 15px;\r\n      height: 1px;\r\n      left: 45px;\r\n      content: \"\";\r\n      display: block;\r\n      background: #eeeeee;\r\n      margin-top: -1px;\r\n      position: absolute;\r\n    }\r\n    i {\r\n      display: flex;\r\n      width: 36px;\r\n      height: 36px;\r\n      border-radius: 100%;\r\n      justify-content: center;\r\n      align-items: center;\r\n      color: #d8d8d8;\r\n      font-size: 16px;\r\n      &.icon-delivery {\r\n        font-size: 12px;\r\n      }\r\n    }\r\n    &:last-of-type {\r\n      padding-right: 0;\r\n      &:before {\r\n        content: none;\r\n      }\r\n    }\r\n  }\r\n}\r\n.wish-list {\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  border: 1px solid #e2e8f0;\r\n  margin-bottom: 10px;\r\n  img {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n}\r\n// end\r\n.cart {\r\n  padding: 52px 0;\r\n  .cart__intro {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 35px;\r\n    justify-content: space-between;\r\n    @include breakpoint(phone) {\r\n      margin-bottom: 66px;\r\n    }\r\n  }\r\n  .cart__title {\r\n    font-size: 20px;\r\n    font-weight: 700;\r\n    line-height: 140%;\r\n  }\r\n  .cart-actions {\r\n    margin-top: 75px;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    .btn {\r\n      margin-left: 20px;\r\n    }\r\n    .cart-actions__items-wrapper {\r\n      display: flex;\r\n      width: 100%;\r\n      align-items: center;\r\n      @include breakpoint(phone) {\r\n        margin-top: 30px;\r\n      }\r\n      @include breakpoint(tablet-lg) {\r\n        width: auto;\r\n        margin-top: 0;\r\n      }\r\n    }\r\n    &.cart-actions--checkout {\r\n      display: flex;\r\n      flex-direction: column-reverse;\r\n      @include breakpoint(phone) {\r\n        flex-direction: row;\r\n      }\r\n      .cart-actions__items-wrapper {\r\n        margin-bottom: 30px;\r\n        justify-content: space-between;\r\n        @include breakpoint(phone) {\r\n          width: auto;\r\n          justify-content: flex-start;\r\n        }\r\n        .btn {\r\n          padding: 9px 13px;\r\n          font-size: 10px;\r\n          margin-left: 0;\r\n          @include breakpoint(phone) {\r\n            font-size: 12px;\r\n            padding: 11px 20px;\r\n          }\r\n          &:first-of-type {\r\n            margin-right: 10px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .icon-cancel {\r\n    font-size: 13px;\r\n  }\r\n  .cart__btn-back {\r\n    font-weight: 700;\r\n    font-size: 14px;\r\n    color: #000;\r\n    margin-right: auto;\r\n    margin-bottom: 40px;\r\n    @include breakpoint(phone) {\r\n      margin-bottom: 0;\r\n    }\r\n    i {\r\n      margin-right: 15px;\r\n    }\r\n  }\r\n  .cart__promo-code {\r\n    padding: 0 20px;\r\n    font-size: 13px;\r\n    height: 40px;\r\n    width: 100%;\r\n    margin-bottom: 18px;\r\n    border: 1px solid #d8d8d8;\r\n    border-radius: 30px;\r\n    @include breakpoint(phone) {\r\n      height: 49px;\r\n      width: auto;\r\n      margin-bottom: 0;\r\n      margin-right: 0;\r\n    }\r\n    @include breakpoint(tablet-lg) {\r\n      margin-right: 70px;\r\n    }\r\n    @include placeholder {\r\n      color: #ababab;\r\n    }\r\n  }\r\n  .cart-actions__total {\r\n    font-weight: 300;\r\n    margin-right: auto;\r\n    @include breakpoint(tablet-lg) {\r\n      margin-right: 60px;\r\n    }\r\n    strong {\r\n      margin-left: 15px;\r\n      color: #000;\r\n      font-weight: 700;\r\n    }\r\n  }\r\n}\r\n\r\n.cart-list {\r\n  width: 100%;\r\n  table {\r\n    width: 100%;\r\n  }\r\n  tr {\r\n    display: flex;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    position: relative;\r\n    padding-bottom: 18px;\r\n    margin-bottom: 18px;\r\n    border-bottom: 1px solid #d8d8d8;\r\n    @include breakpoint(phone) {\r\n      display: table-row;\r\n      padding: 0;\r\n      margin: 0;\r\n      border: none;\r\n    }\r\n    &:last-of-type {\r\n      border-bottom: none;\r\n    }\r\n    &:first-of-type {\r\n      display: none;\r\n      @include breakpoint(phone) {\r\n        display: table-row;\r\n      }\r\n    }\r\n    th {\r\n      text-align: center;\r\n      font-size: 16px;\r\n      color: #218ab6;\r\n      padding-bottom: 30px;\r\n    }\r\n    td {\r\n      display: block;\r\n      flex-wrap: wrap;\r\n      padding: 10px 0;\r\n      color: #000;\r\n      @include breakpointMax(phone) {\r\n        width: 100% !important;\r\n      }\r\n      @include breakpoint(phone) {\r\n        display: table-cell;\r\n        vertical-align: middle;\r\n        text-align: center;\r\n        padding: 20px 0;\r\n      }\r\n      &.cart-item-before {\r\n        &:before {\r\n          font-weight: 600;\r\n          margin-right: 15px;\r\n          content: attr(data-label) \": \";\r\n          @include breakpoint(phone) {\r\n            display: none;\r\n          }\r\n        }\r\n      }\r\n      &:nth-of-type(1) {\r\n        width: 30%;\r\n      }\r\n      &:nth-of-type(2) {\r\n        width: 12%;\r\n      }\r\n      &:nth-of-type(3) {\r\n        width: 12%;\r\n      }\r\n      &:nth-of-type(4) {\r\n        width: 50% !important;\r\n        text-align: right;\r\n        @include breakpoint(phone) {\r\n          text-align: center;\r\n          width: 23% !important;\r\n        }\r\n      }\r\n      &:nth-of-type(5) {\r\n        text-align: left;\r\n        padding-left: 15px;\r\n        width: 50% !important;\r\n        @include breakpoint(phone) {\r\n          text-align: center;\r\n          width: 23% !important;\r\n        }\r\n      }\r\n      &.cart-item-cancel {\r\n        top: 5px;\r\n        right: 0;\r\n        width: auto !important;\r\n        position: absolute;\r\n        @include breakpoint(phone) {\r\n          position: static;\r\n        }\r\n        i {\r\n          cursor: pointer;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n.pop-cart-wrap {\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n}\r\n.pop-cart-product {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  .pop-cart-product__img {\r\n    img {\r\n      width: 70px;\r\n      height: 70px;\r\n    }\r\n  }\r\n  .pop-cart-product__content {\r\n    width: 200px !important;\r\n    div {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      padding-top: 10px;\r\n    }\r\n  }\r\n}\r\n// end\r\n\r\n.cart-product {\r\n  display: flex;\r\n  align-items: center;\r\n  .cart-product__img {\r\n    height: 70px;\r\n    width: 70px;\r\n    background: #fafafa;\r\n    border-radius: 100%;\r\n    margin-right: 25px;\r\n    @include breakpoint(phone) {\r\n      margin-right: 48px;\r\n    }\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n      border-radius: 100%;\r\n      object-position: top center;\r\n    }\r\n  }\r\n  .cart-product__content {\r\n    padding-right: 25px;\r\n    text-align: left;\r\n    @include breakpoint(phone) {\r\n      padding: 0;\r\n    }\r\n    h3 {\r\n      font-size: 16px;\r\n      font-weight: 700;\r\n      margin-bottom: 10px;\r\n    }\r\n    p {\r\n      font-size: 13px;\r\n      font-weight: 300;\r\n      color: #c4c4c4;\r\n    }\r\n  }\r\n}\r\n\r\n.btn-cart {\r\n  position: relative;\r\n  transition: all 600ms;\r\n  svg {\r\n    stroke: #4c8000;\r\n  }\r\n  .btn-cart__count {\r\n    bottom: 0;\r\n    right: 0;\r\n    font-size: 10px;\r\n    width: 13px;\r\n    height: 13px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: #fff;\r\n    background-color: #4c8000;\r\n    border-radius: 100%;\r\n    position: absolute;\r\n    z-index: 100;\r\n  }\r\n}\r\nli {\r\n  list-style: none;\r\n}\r\n.cart-btn-hv {\r\n  &:hover .Cart-popup-outer {\r\n    display: block;\r\n  }\r\n}\r\n\r\n.Cart-popup-outer {\r\n  position: absolute;\r\n  top: 47px;\r\n  right: 45px;\r\n  background: transparent;\r\n  padding: 20px;\r\n  transition: all 600ms;\r\n  display: none;\r\n  .Cart-popup {\r\n    background: #fff;\r\n    padding: 20px;\r\n    border: 1px solid #e2e8f0;\r\n    width: auto;\r\n  }\r\n  .cart-list {\r\n    padding-bottom: 20px;\r\n    .cart-item {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      img {\r\n        width: 60px;\r\n        height: 60px;\r\n        padding-right: 10px;\r\n      }\r\n      .Pop-product-name {\r\n        font-size: 14px;\r\n        font-weight: 500;\r\n      }\r\n      .Pop-delete {\r\n        padding-left: 10px;\r\n        i {\r\n          font-size: 14px;\r\n        }\r\n      }\r\n      h4 {\r\n        padding-top: 10px;\r\n        font-size: 14px;\r\n        font-weight: 500;\r\n      }\r\n    }\r\n  }\r\n  .cart-popup-footer-wrap {\r\n    border-top: 1px solid #e2e8f0;\r\n    .cart-popup-footer {\r\n      padding-top: 20px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      li:first-child {\r\n        margin-right: 20px;\r\n      }\r\n      a {\r\n        padding: 8px 15px;\r\n        font-size: 13px;\r\n        background: #4c8000;\r\n        color: #fff;\r\n        border-radius: 4px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// popup end\r\n// Add to cart popup\r\n.modal {\r\n  position: fixed;\r\n  top: 40%;\r\n  left: 0;\r\n  z-index: 1050;\r\n  display: none;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  outline: 0;\r\n}\r\n.modal-open .modal {\r\n  overflow-x: hidden;\r\n}\r\n.fade {\r\n  -webkit-transition: opacity 0.15s linear;\r\n  transition: opacity 0.15s linear;\r\n}\r\n.modal.fade .modal-dialog {\r\n  transition: -webkit-transform 0.3s ease-out;\r\n  -webkit-transition: -webkit-transform 0.3s ease-out;\r\n  transition: transform 0.3s ease-out;\r\n  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\r\n  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\r\n  -webkit-transform: translate(0, -50px);\r\n  transform: translate(0, -50px);\r\n}\r\n.modal.show .modal-dialog {\r\n  -webkit-transform: none;\r\n  transform: none;\r\n}\r\n.modal-dialog {\r\n  position: relative;\r\n  width: 100%;\r\n  pointer-events: none;\r\n}\r\n.modal-content {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  pointer-events: auto;\r\n  background-color: #fff;\r\n  background-clip: padding-box;\r\n  border: 1px solid rgba(0, 0, 0, 0.2);\r\n  border-radius: 0.3rem;\r\n  outline: 0;\r\n  .modal-header {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n    padding: 1rem 1rem;\r\n    border-top-left-radius: calc(0.3rem - 1px);\r\n    border-top-right-radius: calc(0.3rem - 1px);\r\n    button.close {\r\n      padding: 0;\r\n      background-color: transparent;\r\n      border: 0;\r\n    }\r\n  }\r\n  .modal-body {\r\n    position: relative;\r\n    flex: 1 1 auto;\r\n    padding: 1rem;\r\n  }\r\n}\r\n\r\n// end\r\n.back-button-section {\r\n  padding: 30px 0;\r\n  @include breakpoint(phone) {\r\n    padding: 50px 0;\r\n  }\r\n  a {\r\n    color: black;\r\n    font-size: 13px;\r\n    font-weight: 600;\r\n    @include breakpoint(phone) {\r\n      font-size: 14px;\r\n    }\r\n    i {\r\n      margin-right: 24px;\r\n    }\r\n  }\r\n}\r\n\r\n.form-page {\r\n  padding-bottom: 100px;\r\n}\r\n\r\n.form-block {\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  .form-logo{\r\n    text-align: center;\r\n    .rs-l {\r\n      width: 200px;\r\n      padding-bottom: 20px;\r\n      text-align: center;\r\n    }\r\n  }\r\n  @include breakpoint(phone) {\r\n    width: 600px;\r\n    background: #fff;\r\n    padding: 10px 30px;\r\n    border-radius: 4px;\r\n  }\r\n  .form-block__title {\r\n    font-size: 22px;\r\n    font-weight: 600;\r\n    padding: 0 50px;\r\n    line-height: 150%;\r\n    margin-bottom: 24px;\r\n    text-align: center;\r\n  }\r\n  .form-block__description {\r\n    font-size: 14px;\r\n    line-height: 165%;\r\n    text-align: center;\r\n  }\r\n  .form {\r\n    margin-top: 40px;\r\n  }\r\n}\r\n\r\n.form {\r\n  .form__input-row {\r\n    margin-bottom: 15px;\r\n    margin-top: 30px;\r\n    &.form__input-row--two {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      flex-wrap: wrap;\r\n      .form__col {\r\n        width: 49%;\r\n      }\r\n    }\r\n  }\r\n  .form__input {\r\n    height: 47px;\r\n    width: 100%;\r\n    font-weight: 500;\r\n    color: #808080;\r\n    padding: 0 22px;\r\n    border-radius: 40px;\r\n    border: 1px solid #d8d8d8;\r\n    @include breakpoint(phone) {\r\n      height: 56px;\r\n      padding: 0 40px;\r\n    }\r\n    &.form__input--sm {\r\n      height: 49px;\r\n      padding: 0 28px;\r\n    }\r\n  }\r\n\r\n  select {\r\n    color: #808080;\r\n    option {\r\n      color: #808080;\r\n      font-size: 15px;\r\n      &:first-of-type {\r\n        opacity: 0.8;\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n  .form__btns {\r\n    justify-content: space-between;\r\n    display: flex;\r\n    .btn-social {\r\n      width: 48%;\r\n    }\r\n  }\r\n  .btn-submit {\r\n    margin-top: 20px;\r\n    width: 100%;\r\n    padding-top: 14px;\r\n    padding-bottom: 14px;\r\n    font-weight: 600;\r\n    text-transform: none;\r\n    @include breakpoint(phone) {\r\n      padding-top: 19px;\r\n      padding-bottom: 19px;\r\n    }\r\n  }\r\n  .form__signup-link {\r\n    margin-top: 22px;\r\n    font-size: 14px;\r\n    color: #000;\r\n    padding-bottom: 2px;\r\n    text-align: center;\r\n    a {\r\n      margin-left: 30px;\r\n      font-weight: 600;\r\n      &:hover {\r\n        text-decoration: underline;\r\n      }\r\n    }\r\n  }\r\n  .form__info {\r\n    margin-bottom: 22px;\r\n    @include breakpoint(phone) {\r\n      display: flex;\r\n      margin-bottom: 32px;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n    }\r\n    .form__info__forgot-password {\r\n      margin-top: 24px;\r\n      text-align: center;\r\n      display: block;\r\n      @include breakpoint(phone) {\r\n        margin-top: 0px;\r\n        color: #00acee;\r\n      }\r\n      &:hover {\r\n        color: #00acee;\r\n        text-decoration: underline;\r\n      }\r\n    }\r\n    .checkbox {\r\n      margin-bottom: 0;\r\n      .checkbox__check {\r\n        height: 20px;\r\n        width: 20px;\r\n        &:before {\r\n          top: 2px;\r\n          left: 6px;\r\n          width: 6px;\r\n          height: 10.5px;\r\n        }\r\n      }\r\n      p {\r\n        font-size: 13px;\r\n        line-height: 130%;\r\n      }\r\n    }\r\n    a {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n}\r\n\r\n.fb-btn {\r\n  color: #fff;\r\n  font-weight: 600;\r\n  border-radius: 40px;\r\n  padding: 12px 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: #3b5998;\r\n  @include breakpoint(phone) {\r\n    padding: 14px 58px;\r\n  }\r\n  i {\r\n    font-size: 18px;\r\n    margin-right: 8px;\r\n  }\r\n}\r\n\r\n.google-btn {\r\n  color: #000;\r\n  display: flex;\r\n  align-items: center;\r\n  font-weight: 600;\r\n  border-radius: 40px;\r\n  border: 1px solid #f1584d;\r\n  padding: 12px 30px;\r\n  @include breakpoint(phone) {\r\n    padding: 14px 58px;\r\n  }\r\n  img {\r\n    margin-right: 10px;\r\n  }\r\n}\r\n\r\n.tooltip {\r\n  z-index: 10;\r\n  width: auto;\r\n  background: #ff0000;\r\n  color: white;\r\n  border-radius: 6px;\r\n  padding: 10px 15px;\r\n  position: fixed;\r\n  &:before {\r\n    width: 0;\r\n    height: 0;\r\n    content: \"\";\r\n    position: absolute;\r\n    left: 50%;\r\n    margin-left: -3px;\r\n    bottom: -6px;\r\n    border-style: solid;\r\n    border-width: 7px 3px 0 3px;\r\n    border-color: #ff0000 transparent transparent transparent;\r\n  }\r\n}\r\n\r\n.error-page {\r\n  align-items: center;\r\n  text-align: center;\r\n  padding: 60px 0;\r\n  min-height: calc(100vh - 200px);\r\n  h1 {\r\n    font-size: 44px;\r\n    margin: 0 auto 20px auto;\r\n    text-align: center;\r\n    @include breakpoint(phone) {\r\n      font-size: 92px;\r\n    }\r\n  }\r\n  p {\r\n    line-height: 160%;\r\n    font-size: 15px;\r\n    margin-bottom: 40px;\r\n    @include breakpoint(phone) {\r\n      font-size: 17px;\r\n      margin-bottom: 50px;\r\n    }\r\n  }\r\n  .btn {\r\n    margin: 0 auto;\r\n  }\r\n}\r\n\r\n.checkout-content {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  .block {\r\n    margin-bottom: 48px;\r\n    &:last-of-type {\r\n      margin-bottom: 0;\r\n    }\r\n  }\r\n  .checkout__btns {\r\n    margin-bottom: 38px;\r\n    .btn {\r\n      width: 125px;\r\n      margin-right: 11px;\r\n    }\r\n  }\r\n  .checkout__col-6 {\r\n    width: 100%;\r\n    @include breakpoint(tablet-lg) {\r\n      width: 53%;\r\n    }\r\n    @include breakpoint(desktop-lg) {\r\n      width: 41%;\r\n    }\r\n  }\r\n  .checkout__col-4 {\r\n    width: 100%;\r\n    margin-top: 30px;\r\n    @include breakpoint(tablet-lg) {\r\n      width: 41%;\r\n      margin-top: 0;\r\n    }\r\n    @include breakpoint(desktop-lg) {\r\n      width: 25%;\r\n    }\r\n  }\r\n  .checkout__col-2 {\r\n    width: 100%;\r\n    margin-top: 30px;\r\n    @include breakpoint(tablet-lg) {\r\n      width: 300px;\r\n    }\r\n    @include breakpoint(desktop-lg) {\r\n      width: 22%;\r\n      margin-top: 0;\r\n    }\r\n  }\r\n}\r\n\r\n.round-options {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  &.round-options--three {\r\n    margin-right: -6px;\r\n    .round-item {\r\n      margin-right: 6px;\r\n      width: calc(100% / 3 - 6px);\r\n    }\r\n  }\r\n  &.round-options--two {\r\n    margin-right: -6px;\r\n    .round-item {\r\n      margin-right: 6px;\r\n      width: calc(100% / 2 - 6px);\r\n    }\r\n  }\r\n  .round-item {\r\n    display: flex;\r\n    height: 44px;\r\n    margin-bottom: 8px;\r\n    align-items: center;\r\n    border: 1px solid #d8d8d8;\r\n    border-radius: 20px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    img {\r\n      max-height: 80%;\r\n      max-width: 80%;\r\n    }\r\n    p {\r\n      font-weight: bold;\r\n      color: black;\r\n      font-size: 14px;\r\n    }\r\n    &.round-item--bg {\r\n      height: 51px;\r\n      align-items: center;\r\n      padding: 0 26px 0 21px;\r\n      justify-content: space-between;\r\n    }\r\n  }\r\n}\r\n\r\n.checkout-items {\r\n  .checkout-item {\r\n    display: flex;\r\n    align-items: center;\r\n    margin-bottom: 23px;\r\n    justify-content: space-between;\r\n    .checkout-item__content {\r\n      display: flex;\r\n      align-items: center;\r\n      .checkout-item__data {\r\n        width: 110px;\r\n        h3 {\r\n          font-weight: 600;\r\n          font-size: 14px;\r\n          line-height: 140%;\r\n          margin-bottom: 7px;\r\n        }\r\n        span {\r\n          color: #c4c4c4;\r\n          font-size: 12px;\r\n        }\r\n      }\r\n      .checkout-item__img {\r\n        width: 51px;\r\n        height: 51px;\r\n        flex-shrink: 0;\r\n        margin-right: 16px;\r\n        border-radius: 100%;\r\n        img {\r\n          border-radius: 100%;\r\n          object-fit: cover;\r\n          width: 100%;\r\n          height: 100%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.checkout-total {\r\n  width: 244px;\r\n  background: #f1f1f1;\r\n  align-items: center;\r\n  height: 49px;\r\n  display: flex;\r\n  padding: 0 36px;\r\n  margin: 34px auto 0 auto;\r\n  justify-content: space-between;\r\n  p {\r\n    font-weight: 300;\r\n  }\r\n}\r\n\r\n.message {\r\n  font-size: 13px;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n  margin-left: 20px;\r\n  &:before {\r\n    content: \"\";\r\n    height: 4px;\r\n    width: 4px;\r\n    border-radius: 100%;\r\n    display: block;\r\n    margin-right: 5px;\r\n  }\r\n  &.message--error {\r\n    color: red;\r\n    &:before {\r\n      background-color: red;\r\n    }\r\n  }\r\n}\r\n\r\n// payment page scss  Start\r\n.payment-body {\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  margin: 50px 0px;\r\n  .payment-item {\r\n    padding: 30px 80px;\r\n    background: #fff;\r\n    text-align: center;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    transition: all ease-in-out 600ms;\r\n    img {\r\n      width: 80px;\r\n    }\r\n    h2 {\r\n      padding: 15px 0px 0px 0px;\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n    }\r\n    &:hover {\r\n      opacity: 0.6;\r\n    }\r\n  }\r\n}\r\n.br-bm {\r\n  border-bottom: 1px solid;\r\n}\r\n.show-content {\r\n  text-align: center;\r\n  width: 700px;\r\n  margin: auto;\r\n  padding: 50px 20px;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  form {\r\n    h3:first-child {\r\n      padding-bottom: 20px;\r\n    }\r\n    h3 {\r\n      font-size: 28px;\r\n      font-weight: 500;\r\n    }\r\n    p {\r\n      font-size: 16px;\r\n      font-weight: 400;\r\n      padding-top: 10px;\r\n    }\r\n    .form-group {\r\n      padding-top: 40px;\r\n      .form-control {\r\n        border: 1px solid #e2e8f0;\r\n        border-radius: 30px;\r\n        width: 100%;\r\n        padding: 12px 20px;\r\n        font-size: 16px;\r\n      }\r\n    }\r\n    .checkout_confirm {\r\n      margin-top: 20px;\r\n      padding: 15px 30px;\r\n      background: #218ab6;\r\n      border: 1px solid #218ab6;\r\n      border-radius: 30px;\r\n      color: #fff;\r\n      transition: all ease-in-out 600ms;\r\n      &:hover {\r\n        background: transparent;\r\n        border: 1px solid #218ab6;\r\n        color: #218ab6;\r\n      }\r\n    }\r\n  }\r\n}\r\n// payment page scss  end\r\n// product market page scss  Start\r\n.product-market-banner {\r\n  width: 100%;\r\n  height: 330px;\r\n  max-height: 330px;\r\n  min-height: 100px;\r\n  background-position: 50%;\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n}\r\n.product-market-page {\r\n  background-color: #ffffff;\r\n  margin: 30px 0px;\r\n  .heading {\r\n    padding: 20px;\r\n    background: #fff;\r\n    border-radius: 10px;\r\n    text-align: center;\r\n    h2 {\r\n      font-size: 32px;\r\n      font-weight: 500;\r\n      text-transform: capitalize;\r\n      padding-bottom: 10px;\r\n    }\r\n    h5 {\r\n      font-size: 18px;\r\n      font-weight: 400;\r\n      text-transform: capitalize;\r\n      color: rgb(65, 65, 65);\r\n    }\r\n  }\r\n  .product-market-body {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    .product-market-item {\r\n      background: #ffffff;\r\n      border-radius: 10px;\r\n      display: flex;\r\n      flex-basis: calc(20% - 14px);\r\n      justify-content: center;\r\n      flex-direction: column;\r\n      margin: 20px 0 10px 10px;\r\n      position: relative;\r\n      transition: all ease-in-out 600ms;\r\n      border: 1px solid #e2e8f0;\r\n      .product-market-image {\r\n        img {\r\n          width: 100%;\r\n          height: 100%;\r\n          border-top-left-radius: 10px;\r\n          border-top-right-radius: 10px;\r\n        }\r\n      }\r\n      h2 {\r\n        font-size: 16px;\r\n        text-align: center;\r\n        color: var(--color-text);\r\n        padding: 15px 0px;\r\n      }\r\n      &:hover .view-pro {\r\n        display: block;\r\n      }\r\n    }\r\n    .view-pro {\r\n      padding: 10px 20px;\r\n      background: #4c8000;\r\n      color: #ffffff;\r\n      position: absolute;\r\n      top: 35%;\r\n      left: 16%;\r\n      border-radius: 30px;\r\n      font-size: 14px;\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n\r\n// product market page scss  end\r\n// FAQ page scss  Start\r\n.faq-page {\r\n  .faq-header {\r\n    width: 100%;\r\n    background: #4c8000;\r\n    padding: 100px 0px;\r\n    text-align: center;\r\n    color: #ffffff;\r\n    h2 {\r\n      font-size: 54px;\r\n      text-transform: uppercase;\r\n      font-weight: 800;\r\n      color: #ffffff;\r\n      border-bottom: 3px solid rgba(30, 31, 30, 0.6);\r\n      width: 150px;\r\n      padding-bottom: 10px;\r\n      margin: auto;\r\n    }\r\n    p {\r\n      font-size: 16px;\r\n      text-transform: capitalize;\r\n      font-weight: 400;\r\n      color: #ffffff;\r\n      padding-top: 20px;\r\n    }\r\n  }\r\n  .faq-content {\r\n    margin: 50px 0px;\r\n    .faq-item {\r\n      padding: 30px 20px 20px 70px;\r\n      background: #ffffff;\r\n      border-radius: 10px;\r\n      margin-bottom: 20px;\r\n      .qus {\r\n        font-size: 16px;\r\n        font-weight: 500;\r\n        padding-bottom: 35px;\r\n        text-transform: capitalize;\r\n        position: relative;\r\n        &::before {\r\n          content: \"Q.\";\r\n          position: absolute;\r\n          top: -8px;\r\n          left: -50px;\r\n          font-size: 30px;\r\n          color: #4c8000;\r\n        }\r\n      }\r\n      .ans {\r\n        font-size: 14px;\r\n        font-weight: 400;\r\n        line-height: 22px;\r\n        text-transform: capitalize;\r\n        position: relative;\r\n        &::before {\r\n          content: \"A.\";\r\n          position: absolute;\r\n          top: 0;\r\n          left: -50px;\r\n          font-size: 30px;\r\n          color: #000000;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// FAQ page scss  end\r\n// guideLine page scss  Start\r\n\r\n.guideline-heading {\r\n  width: 300px !important;\r\n}\r\n\r\n// guideLine page scss  end\r\n// blog page scss  start\r\n.blog-page {\r\n  .blog-content {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    .blog-item {\r\n      display: flex;\r\n      flex-basis: calc(33% - 14px);\r\n      flex-direction: column;\r\n      background: #ffffff;\r\n      border-radius: 10px;\r\n      margin-bottom: 20px;\r\n      padding: 20px;\r\n      .blog-body {\r\n        position: relative;\r\n        a {\r\n          img {\r\n            width: 100%;\r\n            border-top-left-radius: 10px;\r\n            border-top-right-radius: 10px;\r\n          }\r\n          .date-box {\r\n            position: absolute;\r\n            bottom: 0px;\r\n            padding: 10px;\r\n            background: #4c8000;\r\n            border: 1px solid #4c8000;\r\n            color: #fff;\r\n            text-align: center;\r\n            font-weight: 300;\r\n          }\r\n        }\r\n      }\r\n      .blog-footer {\r\n        b {\r\n          font-size: 16px;\r\n          font-weight: 500;\r\n          color: #218ab6;\r\n          text-transform: uppercase;\r\n        }\r\n        h1 {\r\n          padding-top: 15px;\r\n          font-size: 16px;\r\n          font-weight: 600;\r\n          text-transform: capitalize;\r\n          padding-bottom: 10px;\r\n          &:hover {\r\n            color: #218ab6;\r\n            font-weight: 600;\r\n          }\r\n        }\r\n        p {\r\n          font-size: 14px;\r\n          font-weight: 400;\r\n          line-height: 22px;\r\n          text-transform: capitalize;\r\n          padding-bottom: 1rem;\r\n        }\r\n        .read-more-btn {\r\n          font-size: 12px;\r\n          text-transform: uppercase;\r\n          font-weight: 400;\r\n          color: #fff;\r\n          background: #4c8000;\r\n          padding: 7px 20px;\r\n          border: solid;\r\n          border: 1px solid #4c8000;\r\n          border-radius: 50px;\r\n          -webkit-transition: 0.3s ease-in;\r\n          -moz-transition: 0.3s ease-in;\r\n          -o-transition: 0.3s ease-in;\r\n          transition: 0.3s ease-in;\r\n          &:hover {\r\n            background: transparent;\r\n            border: 1px solid #4c8000;\r\n            color: #4c8000;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// end\r\n// start\r\n.blog-details-page {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  .blog-details-content{\r\n    width: 74%;\r\n    margin-right: 10px;\r\n    .blog-details-body {\r\n      border-radius: 10px;\r\n      img {\r\n        width: 100%;\r\n      }\r\n      .post-content {\r\n        border: 1px solid #e5e9f4;\r\n        padding: 20px 30px 30px;\r\n        background: #ffffff;\r\n        h2 {\r\n          font-size: 28px;\r\n          line-height: 38px;\r\n          font-weight: 600;\r\n        }\r\n        .post-meta {\r\n          margin-bottom: 20px;\r\n          margin-top: 12px;\r\n          display: flex;\r\n          justify-content: flex-start;\r\n          align-items: center;\r\n          li:last-child {\r\n            padding-left: 10px;\r\n          }\r\n          li:first-child {\r\n            padding-right: 10px;\r\n          }\r\n          a {\r\n            font-size: 14px;\r\n            text-transform: uppercase;\r\n            color: #4c8000;\r\n            font-weight: 500;\r\n            cursor: pointer;\r\n          }\r\n        }\r\n        div {\r\n          p {\r\n            font-size: 16px;\r\n            color: #333333;\r\n            line-height: 28px;\r\n            padding-bottom: 20px;\r\n            text-align: justify;\r\n          }\r\n          h3 {\r\n            font-size: 26px;\r\n            padding-bottom: 10px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .blog-sidebar {\r\n    background: #ffffff;\r\n    padding: 30px 15px;\r\n    margin-right: 10px;\r\n    border-radius: 10px;\r\n    width: 25%;\r\n    .blog-sidebar-content {\r\n      .serch-form {\r\n        position: relative;\r\n        input {\r\n          width: 100%;\r\n          height: 50px;\r\n          border: 2px solid #4c8000;\r\n          background: #f7f8fc;\r\n          padding: 0px 50px 0px 20px;\r\n          border-radius: 30px;\r\n          color: #4c8000;\r\n        }\r\n        button{\r\n          position: absolute;\r\n          top: 0;\r\n          right: 0;\r\n          height: 50px;\r\n          width: 50px;\r\n          border: none;\r\n          background: none;\r\n          cursor: pointer;\r\n          i{\r\n            color: #4c8000;\r\n            font-size: 16px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .title{\r\n      font-size: 24px;\r\n      line-height: 34px;\r\n      font-weight: 700;\r\n      color: #252a32;\r\n      display: block;\r\n      text-align: center;\r\n      padding-bottom: 17px;\r\n      border-bottom: 3px solid rgba(76, 128, 0, 0.8);\r\n    }\r\n    .tags{\r\n      text-align: center;\r\n      padding-top: 50px;\r\n      .tags-list {\r\n        margin-top: 29px;\r\n        display: grid;\r\n        grid-template-columns: auto auto;\r\n        li{\r\n          a {\r\n            font-size: 13px;\r\n            text-transform: uppercase;\r\n            padding: 8px 22px;\r\n            background: #ffffff;\r\n            border: 1px solid #4c8000;\r\n            border-radius: 50px;\r\n            color: #4c8000;\r\n            display: inline-block;\r\n            -webkit-transition: all 0.3s ease-in;\r\n            -o-transition: all 0.3s ease-in;\r\n            transition: all 0.3s ease-in;\r\n            margin-bottom: 15px;\r\n            margin-right: 9px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .categories{\r\n      padding-top: 50px;\r\n      .categories-list{\r\n        padding-top: 20px;\r\n        li{\r\n          line-height: 38px;\r\n          a{\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            -o-transition: all 0.3s ease-in;\r\n            transition: all 0.3s ease-in;\r\n            span{\r\n              font-size: 16px;\r\n              font-weight: 500;\r\n              color: #143250;\r\n            }\r\n            &:hover span{\r\n              color: #4c8000;\r\n            }\r\n          }\r\n          span.active {\r\n            color: #4c8000;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .recent-post-widget{\r\n      padding-top: 50px;\r\n      .post-list{\r\n        margin-top: 30px;\r\n        li{\r\n          border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n          margin-bottom: 15px;\r\n          padding-bottom: 15px;\r\n          .post{\r\n            display: -webkit-box;\r\n            display: -ms-flexbox;\r\n            display: flex;\r\n            .post-img{\r\n              margin-right: 20px;\r\n              img{\r\n                width: 73px;\r\n                height: 59px;\r\n              }\r\n            }\r\n            .post-details{\r\n              -webkit-box-flex: 1;\r\n              -ms-flex: 1;\r\n              flex: 1;\r\n              a{\r\n                h4{\r\n                  font-size: 14px;\r\n                  line-height: normal;\r\n                  font-weight: 300;\r\n                  color: #143250;\r\n                }\r\n              }\r\n              .date{\r\n                color: #7b8698;\r\n                font-size: 12px;\r\n                margin-bottom: 0px;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// blog Details scss  end\r\n// blog page scss  end\r\n// BuyEarn page scss  start\r\n.buy-heading {\r\n  width: 800px !important;\r\n}\r\n// BuyEarn page scss  end\r\n// Producer page scss  end\r\n.producer-heading {\r\n  width: 500px !important;\r\n}\r\n.producer-page {\r\n  .producer-content {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    .producer-item {\r\n      display: flex;\r\n      flex-basis: calc(25% - 14px);\r\n      flex-direction: column;\r\n      background: #ffffff;\r\n      border-radius: 10px;\r\n      margin-bottom: 20px;\r\n      padding: 20px;\r\n      cursor: pointer;\r\n      img {\r\n        width: 100%;\r\n        border-radius: 10px;\r\n      }\r\n      h2 {\r\n        padding-top: 20px;\r\n        padding-bottom: 10px;\r\n        font-size: 16px;\r\n        font-weight: 500;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-content: center;\r\n        span {\r\n          padding-right: 10px;\r\n          i {\r\n            font-size: 15px;\r\n            color: #75c500;\r\n          }\r\n        }\r\n      }\r\n      h5 {\r\n        font-size: 16px;\r\n        font-weight: 400;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-content: center;\r\n        span {\r\n          padding-right: 10px;\r\n          svg {\r\n            width: 20px;\r\n            height: 20px;\r\n          }\r\n        }\r\n      }\r\n      code{\r\n        text-align: center;\r\n      }\r\n    }\r\n  }\r\n}\r\n// Producer page scss  end\r\n// Producer page scss  start\r\n.partner-page {\r\n  .form-control {\r\n    height: 47px;\r\n    width: 100%;\r\n    font-weight: 500;\r\n    color: #808080;\r\n    padding: 0 22px;\r\n    border-radius: 40px;\r\n    border: 1px solid #d8d8d8;\r\n    option {\r\n      font-size: 18px;\r\n      font-weight: 400;\r\n      color: #808080;\r\n    }\r\n  }\r\n  label {\r\n    font-size: 2rem;\r\n    font-weight: bold;\r\n    margin-bottom: 1rem;\r\n    margin-top: 2rem;\r\n  }\r\n  input[type=\"checkbox\"]{\r\n    border: 1px solid #4c8000;\r\n    width: 18px;\r\n    height: 18px;\r\n    margin-right: 20px;\r\n    border-radius: 4px;\r\n    position: relative;\r\n  }\r\n  input:checked{\r\n    background-color: #4c8000;\r\n    color: #ffffff;\r\n  }\r\n\r\n  .form-check-label{\r\n    font-size: 18px;\r\n    font-weight: 500;\r\n  }\r\n  .form-check{\r\n    margin-top: 15px !important;\r\n    cursor: pointer;\r\n  }\r\n  input[type=\"file\"]{\r\n    text-align: center;\r\n    padding: 16px;\r\n    margin-top: 15px;\r\n  }\r\n}\r\n// Producer page scss  end\r\n// Service point page scss  start\r\n.service-point-page{\r\n  .serch-form{\r\n    width: auto;\r\n    margin: auto;\r\n    position: relative;\r\n    margin-top: 30px;\r\n    input{\r\n      height: 50px;\r\n      padding: 20px 38px;\r\n      border: 2px solid rgba(30, 31, 30, 0.6);\r\n      color: #000000;\r\n      border-radius: 4px;\r\n    }\r\n    button{\r\n      position: absolute;\r\n      top: 0;\r\n      right: 38%;\r\n      height: 50px;\r\n      width: 50px;\r\n      border: none;\r\n      background: none;\r\n      cursor: pointer;\r\n      border-left: 1px solid rgba(30, 31, 30, 0.6);\r\n      i{\r\n        color:  rgba(30, 31, 30, 0.8);\r\n        font-size: 16px;\r\n      }\r\n    }\r\n  }\r\n}\r\n// Producer page scss  end\r\n// Producer page scss  start\r\n.view-more-todays-deal-banner{\r\n  width: 100%;\r\n  height: 120px;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n}\r\n.view-more-pages-banner{\r\n  width: 100%;\r\n  height: 335px;\r\n  max-height: 335px;\r\n  min-height: 100px;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  -o-object-fit: cover;\r\n  object-fit: cover;\r\n}\r\n.view-more-pages{\r\n  .timer-Wrap{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    li:first-child{\r\n      background: transparent !important;\r\n      padding: 0 !important;\r\n      color: #000;\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n    }\r\n    li{\r\n      margin-right: 10px;\r\n      background: #218ab6;\r\n      padding: 10px;\r\n      color: #ffffff;\r\n      border-radius: 4px;\r\n    }\r\n  }\r\n  .view-more-pages-body{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n}\r\n// Producer page scss  end\r\n.CampaingsPage{\r\n  margin: 0 !important;\r\n  .campaign-page-slider{\r\n    margin-bottom: 30px;\r\n  }\r\n}\r\n.CompanyOverview-item{\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  h1{\r\n    text-align: center;\r\n    font-size: 22px;\r\n    line-height: 28px;\r\n    padding-bottom: 10px;\r\n  }\r\n  p{\r\n    line-height: 28px;\r\n    font-size: 16px;\r\n    color: var(--color-text);\r\n    text-align: justify;\r\n    margin-bottom: 40px;\r\n  }\r\n}",":root {\r\n  // fonts\r\n  --main-font: 'Poppins';\r\n  --font-title: 'Archivo';\r\n\r\n  // colors\r\n  --color-orange: #218ab6;\r\n  --color-orange-light: #FFF3DF;\r\n  --color-black: #333333;\r\n  --color-text: #868686;\r\n  --color-white: #FFFFFF;\r\n  --color-gray: #706c61;\r\n  --color-red: #FF0000;\r\n}\r\n\r\n@mixin inputPlaceholder() {\r\n  $selector: '';\r\n  $prefixes: (\r\n      moz: \"::-moz\",\r\n      webkit: \"::-webkit\",\r\n      ie: \":-ms\"\r\n  );\r\n  @each $prop, $value in $prefixes {\r\n      @if $prop != \"moz\" {\r\n          $selector: #{$value}-input-placeholder;\r\n      } @else {\r\n          $selector: #{$value}-placeholder;\r\n      }\r\n      @if & {\r\n          &#{$selector} {\r\n              @content;\r\n          }\r\n      } @else {\r\n          #{$selector} {\r\n              @content;\r\n          }\r\n      }\r\n  }\r\n  &::placeholder {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n@keyframes skeleton {\r\n  0% {\r\n    background-position: -200px 0;\r\n  }\r\n  100% {\r\n    background-position: calc(200px + 100%) 0;\r\n  }\r\n}","// A map of breakpoints.\r\n$breakpoints: (\r\n  phone-sm: 420px,\r\n  phone: 767px,\r\n  tablet-lg: 1024px,\r\n  desktop-lg: 1202px\r\n);\r\n\r\n@mixin breakpoint($breakpoint) {\r\n\r\n    // If the breakpoint exists in the map.\r\n\t@if map-has-key($breakpoints, $breakpoint) {\r\n\t\r\n\t// Get the breakpoint value.\r\n\t$breakpoint-value: map-get($breakpoints, $breakpoint);\r\n\t\r\n\t//Build the media query\r\n\t\t@media (min-width: $breakpoint-value) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t} \r\n}\r\n\r\n@mixin breakpointMax($breakpoint) {\r\n\r\n    // If the breakpoint exists in the map.\r\n\t@if map-has-key($breakpoints, $breakpoint) {\r\n\t\r\n\t// Get the breakpoint value.\r\n\t$breakpoint-value: map-get($breakpoints, $breakpoint);\r\n\t\r\n\t//Build the media query\r\n\t\t@media (max-width: $breakpoint-value) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t} \r\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./node_modules/swiper/swiper.scss":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[1]!./node_modules/next/dist/compiled/postcss-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[2]!./node_modules/next/dist/compiled/resolve-url-loader/index.js??ruleSet[1].rules[2].oneOf[7].use[3]!./node_modules/next/dist/compiled/sass-loader/cjs.js??ruleSet[1].rules[2].oneOf[7].use[4]!./node_modules/swiper/swiper.scss ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@font-face {\n  font-family: \"swiper-icons\";\n  src: url(\"data:application/font-woff;charset=utf-8;base64, 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\") format(\"woff\");\n  font-weight: 400;\n  font-style: normal;\n}\n:root {\n  --swiper-theme-color: #007aff;\n}\n\n.swiper-container {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n}\n\n.swiper-container-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  box-sizing: content-box;\n}\n\n.swiper-container-android .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n\n.swiper-container-multirow > .swiper-wrapper {\n  flex-wrap: wrap;\n}\n\n.swiper-container-multirow-column > .swiper-wrapper {\n  flex-wrap: wrap;\n  flex-direction: column;\n}\n\n.swiper-container-free-mode > .swiper-wrapper {\n  transition-timing-function: ease-out;\n  margin: 0 auto;\n}\n\n.swiper-container-pointer-events {\n  touch-action: pan-y;\n}\n.swiper-container-pointer-events.swiper-container-vertical {\n  touch-action: pan-x;\n}\n\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n}\n\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n\n/* Auto Height */\n.swiper-container-autoheight,\n.swiper-container-autoheight .swiper-slide {\n  height: auto;\n}\n.swiper-container-autoheight .swiper-wrapper {\n  align-items: flex-start;\n  transition-property: transform, height;\n}\n\n/* 3D Effects */\n.swiper-container-3d {\n  perspective: 1200px;\n}\n.swiper-container-3d .swiper-wrapper,\n.swiper-container-3d .swiper-slide,\n.swiper-container-3d .swiper-slide-shadow-left,\n.swiper-container-3d .swiper-slide-shadow-right,\n.swiper-container-3d .swiper-slide-shadow-top,\n.swiper-container-3d .swiper-slide-shadow-bottom,\n.swiper-container-3d .swiper-cube-shadow {\n  transform-style: preserve-3d;\n}\n.swiper-container-3d .swiper-slide-shadow-left,\n.swiper-container-3d .swiper-slide-shadow-right,\n.swiper-container-3d .swiper-slide-shadow-top,\n.swiper-container-3d .swiper-slide-shadow-bottom {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: 10;\n}\n.swiper-container-3d .swiper-slide-shadow-left {\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-container-3d .swiper-slide-shadow-right {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-container-3d .swiper-slide-shadow-top {\n  background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n.swiper-container-3d .swiper-slide-shadow-bottom {\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n}\n\n/* CSS Mode */\n.swiper-container-css-mode > .swiper-wrapper {\n  overflow: auto;\n  scrollbar-width: none;\n  /* For Firefox */\n  -ms-overflow-style: none;\n  /* For Internet Explorer and Edge */\n}\n.swiper-container-css-mode > .swiper-wrapper::-webkit-scrollbar {\n  display: none;\n}\n.swiper-container-css-mode > .swiper-wrapper > .swiper-slide {\n  scroll-snap-align: start start;\n}\n\n.swiper-container-horizontal.swiper-container-css-mode > .swiper-wrapper {\n  -ms-scroll-snap-type: x mandatory;\n      scroll-snap-type: x mandatory;\n}\n\n.swiper-container-vertical.swiper-container-css-mode > .swiper-wrapper {\n  -ms-scroll-snap-type: y mandatory;\n      scroll-snap-type: y mandatory;\n}", "",{"version":3,"sources":["webpack://swiper.scss"],"names":[],"mappings":"AAEA;EACE,2BAAA;EACA,4sEAAA;EAEA,gBAAA;EACA,kBAAA;AAFF;AAKA;EACE,6BAAA;AAHF;;AAKA;EACE,iBAAA;EACA,kBAAA;EACA,kBAAA;EACA,gBAAA;EACA,gBAAA;EACA,UAAA;EACA,6BAAA;EACA,UAAA;AAFF;;AAIA;EACE,sBAAA;AADF;;AAGA;EACE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,UAAA;EACA,aAAA;EACA,8BAAA;EACA,uBAAA;AAAF;;AAEA;;EAEE,iCAAA;AACF;;AACA;EACE,eAAA;AAEF;;AAAA;EACE,eAAA;EACA,sBAAA;AAGF;;AADA;EACE,oCAAA;EACA,cAAA;AAIF;;AAFA;EACE,mBAAA;AAKF;AAJE;EACE,mBAAA;AAMJ;;AAHA;EACE,cAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,8BAAA;AAMF;;AAJA;EACE,kBAAA;AAOF;;AALA,gBAAA;AAEE;;EAEE,YAAA;AAOJ;AAJE;EACE,uBAAA;EACA,sCAAA;AAMJ;;AAFA,eAAA;AACA;EACE,mBAAA;AAKF;AAJE;;;;;;;EAOE,4BAAA;AAMJ;AAJE;;;;EAIE,kBAAA;EACA,OAAA;EACA,MAAA;EACA,WAAA;EACA,YAAA;EACA,oBAAA;EACA,WAAA;AAMJ;AAJE;EACE,gFAAA;AAMJ;AAJE;EACE,iFAAA;AAMJ;AAJE;EACE,+EAAA;AAMJ;AAJE;EACE,kFAAA;AAMJ;;AAFA,aAAA;AAEE;EACE,cAAA;EACA,qBAAA;EAAuB,gBAAA;EACvB,wBAAA;EAA0B,mCAAA;AAM9B;AALI;EACE,aAAA;AAON;AAJE;EACE,8BAAA;AAMJ;;AAFE;EACE,iCAAA;MAAA,6BAAA;AAKJ;;AADE;EACE,iCAAA;MAAA,6BAAA;AAIJ","sourcesContent":["@import 'swiper-vars.scss';\n\n@font-face {\n  font-family: 'swiper-icons';\n  src: url('data:application/font-woff;charset=utf-8;base64, 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')\n    format('woff');\n  font-weight: 400;\n  font-style: normal;\n}\n\n:root {\n  --swiper-theme-color: #{$themeColor};\n}\n.swiper-container {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index: 1;\n}\n.swiper-container-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property: transform;\n  box-sizing: content-box;\n}\n.swiper-container-android .swiper-slide,\n.swiper-wrapper {\n  transform: translate3d(0px, 0, 0);\n}\n.swiper-container-multirow > .swiper-wrapper {\n  flex-wrap: wrap;\n}\n.swiper-container-multirow-column > .swiper-wrapper {\n  flex-wrap: wrap;\n  flex-direction: column;\n}\n.swiper-container-free-mode > .swiper-wrapper {\n  transition-timing-function: ease-out;\n  margin: 0 auto;\n}\n.swiper-container-pointer-events {\n  touch-action: pan-y;\n  &.swiper-container-vertical {\n    touch-action: pan-x;\n  }\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-container-autoheight {\n  &,\n  .swiper-slide {\n    height: auto;\n  }\n\n  .swiper-wrapper {\n    align-items: flex-start;\n    transition-property: transform, height;\n  }\n}\n\n/* 3D Effects */\n.swiper-container-3d {\n  perspective: 1200px;\n  .swiper-wrapper,\n  .swiper-slide,\n  .swiper-slide-shadow-left,\n  .swiper-slide-shadow-right,\n  .swiper-slide-shadow-top,\n  .swiper-slide-shadow-bottom,\n  .swiper-cube-shadow {\n    transform-style: preserve-3d;\n  }\n  .swiper-slide-shadow-left,\n  .swiper-slide-shadow-right,\n  .swiper-slide-shadow-top,\n  .swiper-slide-shadow-bottom {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 10;\n  }\n  .swiper-slide-shadow-left {\n    background-image: linear-gradient(to left, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n  }\n  .swiper-slide-shadow-right {\n    background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n  }\n  .swiper-slide-shadow-top {\n    background-image: linear-gradient(to top, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n  }\n  .swiper-slide-shadow-bottom {\n    background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0));\n  }\n}\n\n/* CSS Mode */\n.swiper-container-css-mode {\n  > .swiper-wrapper {\n    overflow: auto;\n    scrollbar-width: none; /* For Firefox */\n    -ms-overflow-style: none; /* For Internet Explorer and Edge */\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n  > .swiper-wrapper > .swiper-slide {\n    scroll-snap-align: start start;\n  }\n}\n.swiper-container-horizontal.swiper-container-css-mode {\n  > .swiper-wrapper {\n    scroll-snap-type: x mandatory;\n  }\n}\n.swiper-container-vertical.swiper-container-css-mode {\n  > .swiper-wrapper {\n    scroll-snap-type: y mandatory;\n  }\n}\n\n\n\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/getUrl.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/compiled/css-loader/getUrl.js ***!
  \**************************************************************/
/***/ (function(module) {

var __dirname = "/";
module.exports=function(){"use strict";var e={91:function(e){e.exports=function(e,r){if(!r){r={}}e=e&&e.__esModule?e.default:e;if(typeof e!=="string"){return e}if(/^['"].*['"]$/.test(e)){e=e.slice(1,-1)}if(r.hash){e+=r.hash}if(/["'() \t\n]/.test(e)||r.needQuotes){return'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"')}return e}}};var r={};function __nccwpck_require__(t){if(r[t]){return r[t].exports}var _=r[t]={exports:{}};var n=true;try{e[t](_,_.exports,__nccwpck_require__);n=false}finally{if(n)delete r[t]}return _.exports}__nccwpck_require__.ab=__dirname+"/";return __nccwpck_require__(91)}();

/***/ }),

/***/ "./assets/css/fonts/icons/icons.eot":
/*!******************************************!*\
  !*** ./assets/css/fonts/icons/icons.eot ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "static/media/icons.b37b568ac83bca7e65b5a8051b22e259.eot");

/***/ }),

/***/ "./assets/css/fonts/icons/icons.svg":
/*!******************************************!*\
  !*** ./assets/css/fonts/icons/icons.svg ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "static/media/icons.5fce38bd24773731df2c26395375aef7.svg");

/***/ }),

/***/ "./assets/css/fonts/icons/icons.ttf":
/*!******************************************!*\
  !*** ./assets/css/fonts/icons/icons.ttf ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "static/media/icons.461073e8d6595ce437e74dfe32535f86.ttf");

/***/ }),

/***/ "./assets/css/fonts/icons/icons.woff":
/*!*******************************************!*\
  !*** ./assets/css/fonts/icons/icons.woff ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "static/media/icons.15bf095346eb71e161c01e0666e89864.woff");

/***/ }),

/***/ "./assets/css/fonts/icons/icons.woff2":
/*!********************************************!*\
  !*** ./assets/css/fonts/icons/icons.woff2 ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "static/media/icons.4ec10457dc6e933fa67dc6056632c8d1.woff2");

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _arrayLikeToArray; }
/* harmony export */ });
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _arrayWithoutHoles; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_arrayLikeToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/arrayLikeToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return (0,_babel_runtime_helpers_esm_arrayLikeToArray__WEBPACK_IMPORTED_MODULE_0__.default)(arr);
}

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _defineProperty; }
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/iterableToArray.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _iterableToArray; }
/* harmony export */ });
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _nonIterableSpread; }
/* harmony export */ });
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _toConsumableArray; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_arrayWithoutHoles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/arrayWithoutHoles */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js");
/* harmony import */ var _babel_runtime_helpers_esm_iterableToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/iterableToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/iterableToArray.js");
/* harmony import */ var _babel_runtime_helpers_esm_unsupportedIterableToArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/unsupportedIterableToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");
/* harmony import */ var _babel_runtime_helpers_esm_nonIterableSpread__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/nonIterableSpread */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js");




function _toConsumableArray(arr) {
  return (0,_babel_runtime_helpers_esm_arrayWithoutHoles__WEBPACK_IMPORTED_MODULE_0__.default)(arr) || (0,_babel_runtime_helpers_esm_iterableToArray__WEBPACK_IMPORTED_MODULE_1__.default)(arr) || (0,_babel_runtime_helpers_esm_unsupportedIterableToArray__WEBPACK_IMPORTED_MODULE_2__.default)(arr) || (0,_babel_runtime_helpers_esm_nonIterableSpread__WEBPACK_IMPORTED_MODULE_3__.default)();
}

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ _unsupportedIterableToArray; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_arrayLikeToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/arrayLikeToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return (0,_babel_runtime_helpers_esm_arrayLikeToArray__WEBPACK_IMPORTED_MODULE_0__.default)(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_babel_runtime_helpers_esm_arrayLikeToArray__WEBPACK_IMPORTED_MODULE_0__.default)(o, minLen);
}

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
var assign = __webpack_require__(/*! object-assign */ "./node_modules/next/dist/build/polyfills/object-assign.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var has = Function.call.bind(Object.prototype.hasOwnProperty);
var printWarning = function() {};

if (true) {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (true) {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
} else {}


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/***/ (function(module) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./node_modules/react-redux/es/components/Context.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/components/Context.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReactReduxContext": function() { return /* binding */ ReactReduxContext; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

var ReactReduxContext =
/*#__PURE__*/
react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);

if (true) {
  ReactReduxContext.displayName = 'ReactRedux';
}

/* harmony default export */ __webpack_exports__["default"] = (ReactReduxContext);

/***/ }),

/***/ "./node_modules/react-redux/es/components/Provider.js":
/*!************************************************************!*\
  !*** ./node_modules/react-redux/es/components/Provider.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Context */ "./node_modules/react-redux/es/components/Context.js");
/* harmony import */ var _utils_Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Subscription */ "./node_modules/react-redux/es/utils/Subscription.js");





function Provider(_ref) {
  var store = _ref.store,
      context = _ref.context,
      children = _ref.children;
  var contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
    var subscription = new _utils_Subscription__WEBPACK_IMPORTED_MODULE_3__.default(store);
    subscription.onStateChange = subscription.notifyNestedSubs;
    return {
      store: store,
      subscription: subscription
    };
  }, [store]);
  var previousState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
    return store.getState();
  }, [store]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    var subscription = contextValue.subscription;
    subscription.trySubscribe();

    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }

    return function () {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || _Context__WEBPACK_IMPORTED_MODULE_2__.ReactReduxContext;
  return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Provider, {
    value: contextValue
  }, children);
}

if (true) {
  Provider.propTypes = {
    store: prop_types__WEBPACK_IMPORTED_MODULE_1___default().shape({
      subscribe: (prop_types__WEBPACK_IMPORTED_MODULE_1___default().func.isRequired),
      dispatch: (prop_types__WEBPACK_IMPORTED_MODULE_1___default().func.isRequired),
      getState: (prop_types__WEBPACK_IMPORTED_MODULE_1___default().func.isRequired)
    }),
    context: (prop_types__WEBPACK_IMPORTED_MODULE_1___default().object),
    children: (prop_types__WEBPACK_IMPORTED_MODULE_1___default().any)
  };
}

/* harmony default export */ __webpack_exports__["default"] = (Provider);

/***/ }),

/***/ "./node_modules/react-redux/es/components/connectAdvanced.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/components/connectAdvanced.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ connectAdvanced; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _utils_Subscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Subscription */ "./node_modules/react-redux/es/utils/Subscription.js");
/* harmony import */ var _utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/useIsomorphicLayoutEffect */ "./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js");
/* harmony import */ var _Context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Context */ "./node_modules/react-redux/es/components/Context.js");







 // Define some constant arrays just to avoid re-creating these

var EMPTY_ARRAY = [];
var NO_SUBSCRIPTION_ARRAY = [null, null];

var stringifyComponent = function stringifyComponent(Comp) {
  try {
    return JSON.stringify(Comp);
  } catch (err) {
    return String(Comp);
  }
};

function storeStateUpdatesReducer(state, action) {
  var updateCount = state[1];
  return [action.payload, updateCount + 1];
}

function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
  (0,_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_6__.useIsomorphicLayoutEffect)(function () {
    return effectFunc.apply(void 0, effectArgs);
  }, dependencies);
}

function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
  // We want to capture the wrapper props and child props we used for later comparisons
  lastWrapperProps.current = wrapperProps;
  lastChildProps.current = actualChildProps;
  renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update

  if (childPropsFromStoreUpdate.current) {
    childPropsFromStoreUpdate.current = null;
    notifyNestedSubs();
  }
}

function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
  // If we're not subscribed to the store, nothing to do here
  if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts

  var didUnsubscribe = false;
  var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component

  var checkForUpdates = function checkForUpdates() {
    if (didUnsubscribe) {
      // Don't run stale listeners.
      // Redux doesn't guarantee unsubscriptions happen until next dispatch.
      return;
    }

    var latestStoreState = store.getState();
    var newChildProps, error;

    try {
      // Actually run the selector with the most recent store state and wrapper props
      // to determine what the child props should be
      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
    } catch (e) {
      error = e;
      lastThrownError = e;
    }

    if (!error) {
      lastThrownError = null;
    } // If the child props haven't changed, nothing to do here - cascade the subscription update


    if (newChildProps === lastChildProps.current) {
      if (!renderIsScheduled.current) {
        notifyNestedSubs();
      }
    } else {
      // Save references to the new child props.  Note that we track the "child props from store update"
      // as a ref instead of a useState/useReducer because we need a way to determine if that value has
      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without
      // forcing another re-render, which we don't want.
      lastChildProps.current = newChildProps;
      childPropsFromStoreUpdate.current = newChildProps;
      renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

      forceComponentUpdateDispatch({
        type: 'STORE_UPDATED',
        payload: {
          error: error
        }
      });
    }
  }; // Actually subscribe to the nearest connected ancestor (or store)


  subscription.onStateChange = checkForUpdates;
  subscription.trySubscribe(); // Pull data from the store after first render in case the store has
  // changed since we began.

  checkForUpdates();

  var unsubscribeWrapper = function unsubscribeWrapper() {
    didUnsubscribe = true;
    subscription.tryUnsubscribe();
    subscription.onStateChange = null;

    if (lastThrownError) {
      // It's possible that we caught an error due to a bad mapState function, but the
      // parent re-rendered without this component and we're about to unmount.
      // This shouldn't happen as long as we do top-down subscriptions correctly, but
      // if we ever do those wrong, this throw will surface the error in our tests.
      // In that case, throw the error from here so it doesn't get lost.
      throw lastThrownError;
    }
  };

  return unsubscribeWrapper;
}

var initStateUpdates = function initStateUpdates() {
  return [null, 0];
};

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
      export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory, // options object:
_ref) {
  if (_ref === void 0) {
    _ref = {};
  }

  var _ref2 = _ref,
      _ref2$getDisplayName = _ref2.getDisplayName,
      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref2$getDisplayName,
      _ref2$methodName = _ref2.methodName,
      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
      _ref2$renderCountProp = _ref2.renderCountProp,
      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
      _ref2$storeKey = _ref2.storeKey,
      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
      _ref2$withRef = _ref2.withRef,
      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
      _ref2$forwardRef = _ref2.forwardRef,
      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,
      _ref2$context = _ref2.context,
      context = _ref2$context === void 0 ? _Context__WEBPACK_IMPORTED_MODULE_7__.ReactReduxContext : _ref2$context,
      connectOptions = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__.default)(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);

  if (true) {
    if (renderCountProp !== undefined) {
      throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
    }

    if (withRef) {
      throw new Error('withRef is removed. To access the wrapped instance, use a ref on the connected component');
    }

    var customStoreWarningMessage = 'To use a custom Redux store for specific components, create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';

    if (storeKey !== 'store') {
      throw new Error('storeKey has been removed and does not do anything. ' + customStoreWarningMessage);
    }
  }

  var Context = context;
  return function wrapWithConnect(WrappedComponent) {
    if ( true && !(0,react_is__WEBPACK_IMPORTED_MODULE_4__.isValidElementType)(WrappedComponent)) {
      throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
    }

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });

    var pure = connectOptions.pure;

    function createChildSelector(store) {
      return selectorFactory(store.dispatch, selectorFactoryOptions);
    } // If we aren't running in "pure" mode, we don't want to memoize values.
    // To avoid conditionally calling hooks, we fall back to a tiny wrapper
    // that just executes the given callback immediately.


    var usePureOnlyMemo = pure ? react__WEBPACK_IMPORTED_MODULE_3__.useMemo : function (callback) {
      return callback();
    };

    function ConnectFunction(props) {
      var _useMemo = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function () {
        // Distinguish between actual "data" props that were passed to the wrapper component,
        // and values needed to control behavior (forwarded refs, alternate context instances).
        // To maintain the wrapperProps object reference, memoize this destructuring.
        var reactReduxForwardedRef = props.reactReduxForwardedRef,
            wrapperProps = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__.default)(props, ["reactReduxForwardedRef"]);

        return [props.context, reactReduxForwardedRef, wrapperProps];
      }, [props]),
          propsContext = _useMemo[0],
          reactReduxForwardedRef = _useMemo[1],
          wrapperProps = _useMemo[2];

      var ContextToUse = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function () {
        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.
        // Memoize the check that determines which context instance we should use.
        return propsContext && propsContext.Consumer && (0,react_is__WEBPACK_IMPORTED_MODULE_4__.isContextConsumer)(react__WEBPACK_IMPORTED_MODULE_3___default().createElement(propsContext.Consumer, null)) ? propsContext : Context;
      }, [propsContext, Context]); // Retrieve the store and ancestor subscription via context, if available

      var contextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ContextToUse); // The store _must_ exist as either a prop or in context.
      // We'll check to see if it _looks_ like a Redux store first.
      // This allows us to pass through a `store` prop that is just a plain value.

      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);

      if ( true && !didStoreComeFromProps && !didStoreComeFromContext) {
        throw new Error("Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
      } // Based on the previous check, one of these must be true


      var store = didStoreComeFromProps ? props.store : contextValue.store;
      var childPropsSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function () {
        // The child props selector needs the store reference as an input.
        // Re-create this selector whenever the store changes.
        return createChildSelector(store);
      }, [store]);

      var _useMemo2 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function () {
        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component
        // connected to the store via props shouldn't use subscription from context, or vice versa.

        var subscription = new _utils_Subscription__WEBPACK_IMPORTED_MODULE_5__.default(store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
        // the middle of the notification loop, where `subscription` will then be null. This can
        // probably be avoided if Subscription's listeners logic is changed to not call listeners
        // that have been unsubscribed in the  middle of the notification loop.

        var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);
        return [subscription, notifyNestedSubs];
      }, [store, didStoreComeFromProps, contextValue]),
          subscription = _useMemo2[0],
          notifyNestedSubs = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,
      // and memoize that value to avoid unnecessary context updates.


      var overriddenContextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function () {
        if (didStoreComeFromProps) {
          // This component is directly subscribed to a store from props.
          // We don't want descendants reading from this store - pass down whatever
          // the existing context value is from the nearest connected ancestor.
          return contextValue;
        } // Otherwise, put this component's subscription instance into context, so that
        // connected descendants won't update until after this component is done


        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, contextValue, {
          subscription: subscription
        });
      }, [didStoreComeFromProps, contextValue, subscription]); // We need to force this wrapper component to re-render whenever a Redux store update
      // causes a change to the calculated child component props (or we caught an error in mapState)

      var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates),
          _useReducer$ = _useReducer[0],
          previousStateUpdateResult = _useReducer$[0],
          forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards


      if (previousStateUpdateResult && previousStateUpdateResult.error) {
        throw previousStateUpdateResult.error;
      } // Set up refs to coordinate values between the subscription effect and the render logic


      var lastChildProps = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
      var lastWrapperProps = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(wrapperProps);
      var childPropsFromStoreUpdate = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();
      var renderIsScheduled = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);
      var actualChildProps = usePureOnlyMemo(function () {
        // Tricky logic here:
        // - This render may have been triggered by a Redux store update that produced new child props
        // - However, we may have gotten new wrapper props after that
        // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.
        // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.
        // So, we'll use the child props from store update only if the wrapper props are the same as last time.
        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
          return childPropsFromStoreUpdate.current;
        } // TODO We're reading the store directly in render() here. Bad idea?
        // This will likely cause Bad Things (TM) to happen in Concurrent Mode.
        // Note that we do this because on renders _not_ caused by store updates, we need the latest store state
        // to determine what the child props should be.


        return childPropsSelector(store.getState(), wrapperProps);
      }, [store, previousStateUpdateResult, wrapperProps]); // We need this to execute synchronously every time we re-render. However, React warns
      // about useLayoutEffect in SSR, so we try to detect environment and fall back to
      // just useEffect instead to avoid the warning, since neither will run anyway.

      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]); // Our re-subscribe logic only runs when the store/subscription setup changes

      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]); // Now that all that's done, we can finally try to actually render the child component.
      // We memoize the elements for the rendered child component as an optimization.

      var renderedWrappedComponent = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function () {
        return react__WEBPACK_IMPORTED_MODULE_3___default().createElement(WrappedComponent, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, actualChildProps, {
          ref: reactReduxForwardedRef
        }));
      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]); // If React sees the exact same element reference as last time, it bails out of re-rendering
      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

      var renderedChild = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function () {
        if (shouldHandleStateChanges) {
          // If this component is subscribed to store updates, we need to pass its own
          // subscription instance down to our descendants. That means rendering the same
          // Context instance, and putting a different value into the context.
          return react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ContextToUse.Provider, {
            value: overriddenContextValue
          }, renderedWrappedComponent);
        }

        return renderedWrappedComponent;
      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
      return renderedChild;
    } // If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.


    var Connect = pure ? react__WEBPACK_IMPORTED_MODULE_3___default().memo(ConnectFunction) : ConnectFunction;
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;

    if (forwardRef) {
      var forwarded = react__WEBPACK_IMPORTED_MODULE_3___default().forwardRef(function forwardConnectRef(props, ref) {
        return react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Connect, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, props, {
          reactReduxForwardedRef: ref
        }));
      });
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default()(forwarded, WrappedComponent);
    }

    return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default()(Connect, WrappedComponent);
  };
}

/***/ }),

/***/ "./node_modules/react-redux/es/connect/connect.js":
/*!********************************************************!*\
  !*** ./node_modules/react-redux/es/connect/connect.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createConnect": function() { return /* binding */ createConnect; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/connectAdvanced */ "./node_modules/react-redux/es/components/connectAdvanced.js");
/* harmony import */ var _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/shallowEqual */ "./node_modules/react-redux/es/utils/shallowEqual.js");
/* harmony import */ var _mapDispatchToProps__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapDispatchToProps */ "./node_modules/react-redux/es/connect/mapDispatchToProps.js");
/* harmony import */ var _mapStateToProps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mapStateToProps */ "./node_modules/react-redux/es/connect/mapStateToProps.js");
/* harmony import */ var _mergeProps__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mergeProps */ "./node_modules/react-redux/es/connect/mergeProps.js");
/* harmony import */ var _selectorFactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./selectorFactory */ "./node_modules/react-redux/es/connect/selectorFactory.js");








/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}

function strictEqual(a, b) {
  return a === b;
} // createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios


function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === void 0 ? _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_2__.default : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps__WEBPACK_IMPORTED_MODULE_5__.default : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps__WEBPACK_IMPORTED_MODULE_4__.default : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps__WEBPACK_IMPORTED_MODULE_6__.default : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory__WEBPACK_IMPORTED_MODULE_7__.default : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }

    var _ref3 = _ref2,
        _ref3$pure = _ref3.pure,
        pure = _ref3$pure === void 0 ? true : _ref3$pure,
        _ref3$areStatesEqual = _ref3.areStatesEqual,
        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__.default : _ref3$areOwnPropsEqua,
        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__.default : _ref3$areStatePropsEq,
        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__.default : _ref3$areMergedPropsE,
        extraOptions = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__.default)(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
    return connectHOC(selectorFactory, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({
      // used in error messages
      methodName: 'connect',
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual
    }, extraOptions));
  };
}
/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/createConnect());

/***/ }),

/***/ "./node_modules/react-redux/es/connect/mapDispatchToProps.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mapDispatchToProps.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "whenMapDispatchToPropsIsFunction": function() { return /* binding */ whenMapDispatchToPropsIsFunction; },
/* harmony export */   "whenMapDispatchToPropsIsMissing": function() { return /* binding */ whenMapDispatchToPropsIsMissing; },
/* harmony export */   "whenMapDispatchToPropsIsObject": function() { return /* binding */ whenMapDispatchToPropsIsObject; }
/* harmony export */ });
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/redux.js");
/* harmony import */ var _wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wrapMapToProps */ "./node_modules/react-redux/es/connect/wrapMapToProps.js");


function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsFunc)(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsConstant)(function (dispatch) {
    return {
      dispatch: dispatch
    };
  }) : undefined;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsConstant)(function (dispatch) {
    return (0,redux__WEBPACK_IMPORTED_MODULE_1__.bindActionCreators)(mapDispatchToProps, dispatch);
  }) : undefined;
}
/* harmony default export */ __webpack_exports__["default"] = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);

/***/ }),

/***/ "./node_modules/react-redux/es/connect/mapStateToProps.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mapStateToProps.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "whenMapStateToPropsIsFunction": function() { return /* binding */ whenMapStateToPropsIsFunction; },
/* harmony export */   "whenMapStateToPropsIsMissing": function() { return /* binding */ whenMapStateToPropsIsMissing; }
/* harmony export */ });
/* harmony import */ var _wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wrapMapToProps */ "./node_modules/react-redux/es/connect/wrapMapToProps.js");

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsFunc)(mapStateToProps, 'mapStateToProps') : undefined;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsConstant)(function () {
    return {};
  }) : undefined;
}
/* harmony default export */ __webpack_exports__["default"] = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);

/***/ }),

/***/ "./node_modules/react-redux/es/connect/mergeProps.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mergeProps.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultMergeProps": function() { return /* binding */ defaultMergeProps; },
/* harmony export */   "wrapMergePropsFunc": function() { return /* binding */ wrapMergePropsFunc; },
/* harmony export */   "whenMergePropsIsFunction": function() { return /* binding */ whenMergePropsIsFunction; },
/* harmony export */   "whenMergePropsIsOmitted": function() { return /* binding */ whenMergePropsIsOmitted; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/verifyPlainObject */ "./node_modules/react-redux/es/utils/verifyPlainObject.js");


function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__.default)({}, ownProps, {}, stateProps, {}, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (true) (0,_utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_1__.default)(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}
function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}
/* harmony default export */ __webpack_exports__["default"] = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);

/***/ }),

/***/ "./node_modules/react-redux/es/connect/selectorFactory.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/selectorFactory.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "impureFinalPropsSelectorFactory": function() { return /* binding */ impureFinalPropsSelectorFactory; },
/* harmony export */   "pureFinalPropsSelectorFactory": function() { return /* binding */ pureFinalPropsSelectorFactory; },
/* harmony export */   "default": function() { return /* binding */ finalPropsSelectorFactory; }
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _verifySubselectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./verifySubselectors */ "./node_modules/react-redux/es/connect/verifySubselectors.js");


function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
} // TODO: Add more comments
// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__.default)(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if (true) {
    (0,_verifySubselectors__WEBPACK_IMPORTED_MODULE_1__.default)(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}

/***/ }),

/***/ "./node_modules/react-redux/es/connect/verifySubselectors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/verifySubselectors.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ verifySubselectors; }
/* harmony export */ });
/* harmony import */ var _utils_warning__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/warning */ "./node_modules/react-redux/es/utils/warning.js");


function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {
      (0,_utils_warning__WEBPACK_IMPORTED_MODULE_0__.default)("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}

/***/ }),

/***/ "./node_modules/react-redux/es/connect/wrapMapToProps.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/wrapMapToProps.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "wrapMapToPropsConstant": function() { return /* binding */ wrapMapToPropsConstant; },
/* harmony export */   "getDependsOnOwnProps": function() { return /* binding */ getDependsOnOwnProps; },
/* harmony export */   "wrapMapToPropsFunc": function() { return /* binding */ wrapMapToPropsFunc; }
/* harmony export */ });
/* harmony import */ var _utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/verifyPlainObject */ "./node_modules/react-redux/es/utils/verifyPlainObject.js");

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }

    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
//
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..

function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
//
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//

function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    }; // allow detectFactoryAndVerify to get ownProps


    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (true) (0,_utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_0__.default)(props, displayName, methodName);
      return props;
    };

    return proxy;
  };
}

/***/ }),

/***/ "./node_modules/react-redux/es/hooks/useDispatch.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-redux/es/hooks/useDispatch.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDispatchHook": function() { return /* binding */ createDispatchHook; },
/* harmony export */   "useDispatch": function() { return /* binding */ useDispatch; }
/* harmony export */ });
/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Context */ "./node_modules/react-redux/es/components/Context.js");
/* harmony import */ var _useStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useStore */ "./node_modules/react-redux/es/hooks/useStore.js");


/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

function createDispatchHook(context) {
  if (context === void 0) {
    context = _components_Context__WEBPACK_IMPORTED_MODULE_0__.ReactReduxContext;
  }

  var useStore = context === _components_Context__WEBPACK_IMPORTED_MODULE_0__.ReactReduxContext ? _useStore__WEBPACK_IMPORTED_MODULE_1__.useStore : (0,_useStore__WEBPACK_IMPORTED_MODULE_1__.createStoreHook)(context);
  return function useDispatch() {
    var store = useStore();
    return store.dispatch;
  };
}
/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

var useDispatch =
/*#__PURE__*/
createDispatchHook();

/***/ }),

/***/ "./node_modules/react-redux/es/hooks/useReduxContext.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-redux/es/hooks/useReduxContext.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useReduxContext": function() { return /* binding */ useReduxContext; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Context */ "./node_modules/react-redux/es/components/Context.js");


/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

function useReduxContext() {
  var contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext);

  if ( true && !contextValue) {
    throw new Error('could not find react-redux context value; please ensure the component is wrapped in a <Provider>');
  }

  return contextValue;
}

/***/ }),

/***/ "./node_modules/react-redux/es/hooks/useSelector.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-redux/es/hooks/useSelector.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSelectorHook": function() { return /* binding */ createSelectorHook; },
/* harmony export */   "useSelector": function() { return /* binding */ useSelector; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _useReduxContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useReduxContext */ "./node_modules/react-redux/es/hooks/useReduxContext.js");
/* harmony import */ var _utils_Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Subscription */ "./node_modules/react-redux/es/utils/Subscription.js");
/* harmony import */ var _utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/useIsomorphicLayoutEffect */ "./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js");
/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/Context */ "./node_modules/react-redux/es/components/Context.js");






var refEquality = function refEquality(a, b) {
  return a === b;
};

function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
  var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(function (s) {
    return s + 1;
  }, 0),
      forceRender = _useReducer[1];

  var subscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
    return new _utils_Subscription__WEBPACK_IMPORTED_MODULE_2__.default(store, contextSub);
  }, [store, contextSub]);
  var latestSubscriptionCallbackError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  var latestSelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  var latestStoreState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  var latestSelectedState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  var storeState = store.getState();
  var selectedState;

  try {
    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
      selectedState = selector(storeState);
    } else {
      selectedState = latestSelectedState.current;
    }
  } catch (err) {
    if (latestSubscriptionCallbackError.current) {
      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
    }

    throw err;
  }

  (0,_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(function () {
    latestSelector.current = selector;
    latestStoreState.current = storeState;
    latestSelectedState.current = selectedState;
    latestSubscriptionCallbackError.current = undefined;
  });
  (0,_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(function () {
    function checkForUpdates() {
      try {
        var newSelectedState = latestSelector.current(store.getState());

        if (equalityFn(newSelectedState, latestSelectedState.current)) {
          return;
        }

        latestSelectedState.current = newSelectedState;
      } catch (err) {
        // we ignore all errors here, since when the component
        // is re-rendered, the selectors are called again, and
        // will throw again, if neither props nor store state
        // changed
        latestSubscriptionCallbackError.current = err;
      }

      forceRender();
    }

    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    return function () {
      return subscription.tryUnsubscribe();
    };
  }, [store, subscription]);
  return selectedState;
}
/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */


function createSelectorHook(context) {
  if (context === void 0) {
    context = _components_Context__WEBPACK_IMPORTED_MODULE_4__.ReactReduxContext;
  }

  var useReduxContext = context === _components_Context__WEBPACK_IMPORTED_MODULE_4__.ReactReduxContext ? _useReduxContext__WEBPACK_IMPORTED_MODULE_1__.useReduxContext : function () {
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);
  };
  return function useSelector(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = refEquality;
    }

    if ( true && !selector) {
      throw new Error("You must pass a selector to useSelector");
    }

    var _useReduxContext = useReduxContext(),
        store = _useReduxContext.store,
        contextSub = _useReduxContext.subscription;

    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(selectedState);
    return selectedState;
  };
}
/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

var useSelector =
/*#__PURE__*/
createSelectorHook();

/***/ }),

/***/ "./node_modules/react-redux/es/hooks/useStore.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-redux/es/hooks/useStore.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createStoreHook": function() { return /* binding */ createStoreHook; },
/* harmony export */   "useStore": function() { return /* binding */ useStore; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Context */ "./node_modules/react-redux/es/components/Context.js");
/* harmony import */ var _useReduxContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useReduxContext */ "./node_modules/react-redux/es/hooks/useReduxContext.js");



/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

function createStoreHook(context) {
  if (context === void 0) {
    context = _components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext;
  }

  var useReduxContext = context === _components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext ? _useReduxContext__WEBPACK_IMPORTED_MODULE_2__.useReduxContext : function () {
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);
  };
  return function useStore() {
    var _useReduxContext = useReduxContext(),
        store = _useReduxContext.store;

    return store;
  };
}
/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

var useStore =
/*#__PURE__*/
createStoreHook();

/***/ }),

/***/ "./node_modules/react-redux/es/index.js":
/*!**********************************************!*\
  !*** ./node_modules/react-redux/es/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Provider": function() { return /* reexport safe */ _components_Provider__WEBPACK_IMPORTED_MODULE_0__.default; },
/* harmony export */   "connectAdvanced": function() { return /* reexport safe */ _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_1__.default; },
/* harmony export */   "ReactReduxContext": function() { return /* reexport safe */ _components_Context__WEBPACK_IMPORTED_MODULE_2__.ReactReduxContext; },
/* harmony export */   "connect": function() { return /* reexport safe */ _connect_connect__WEBPACK_IMPORTED_MODULE_3__.default; },
/* harmony export */   "batch": function() { return /* reexport safe */ _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_8__.unstable_batchedUpdates; },
/* harmony export */   "useDispatch": function() { return /* reexport safe */ _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__.useDispatch; },
/* harmony export */   "createDispatchHook": function() { return /* reexport safe */ _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__.createDispatchHook; },
/* harmony export */   "useSelector": function() { return /* reexport safe */ _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__.useSelector; },
/* harmony export */   "createSelectorHook": function() { return /* reexport safe */ _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__.createSelectorHook; },
/* harmony export */   "useStore": function() { return /* reexport safe */ _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__.useStore; },
/* harmony export */   "createStoreHook": function() { return /* reexport safe */ _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__.createStoreHook; },
/* harmony export */   "shallowEqual": function() { return /* reexport safe */ _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_9__.default; }
/* harmony export */ });
/* harmony import */ var _components_Provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Provider */ "./node_modules/react-redux/es/components/Provider.js");
/* harmony import */ var _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/connectAdvanced */ "./node_modules/react-redux/es/components/connectAdvanced.js");
/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Context */ "./node_modules/react-redux/es/components/Context.js");
/* harmony import */ var _connect_connect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connect/connect */ "./node_modules/react-redux/es/connect/connect.js");
/* harmony import */ var _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks/useDispatch */ "./node_modules/react-redux/es/hooks/useDispatch.js");
/* harmony import */ var _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hooks/useSelector */ "./node_modules/react-redux/es/hooks/useSelector.js");
/* harmony import */ var _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useStore */ "./node_modules/react-redux/es/hooks/useStore.js");
/* harmony import */ var _utils_batch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/batch */ "./node_modules/react-redux/es/utils/batch.js");
/* harmony import */ var _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/reactBatchedUpdates */ "./node_modules/react-redux/es/utils/reactBatchedUpdates.js");
/* harmony import */ var _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/shallowEqual */ "./node_modules/react-redux/es/utils/shallowEqual.js");










(0,_utils_batch__WEBPACK_IMPORTED_MODULE_7__.setBatch)(_utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_8__.unstable_batchedUpdates);


/***/ }),

/***/ "./node_modules/react-redux/es/utils/Subscription.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/Subscription.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ Subscription; }
/* harmony export */ });
/* harmony import */ var _batch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batch */ "./node_modules/react-redux/es/utils/batch.js");
 // encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants

var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  var batch = (0,_batch__WEBPACK_IMPORTED_MODULE_0__.getBatch)();
  var first = null;
  var last = null;
  return {
    clear: function clear() {
      first = null;
      last = null;
    },
    notify: function notify() {
      batch(function () {
        var listener = first;

        while (listener) {
          listener.callback();
          listener = listener.next;
        }
      });
    },
    get: function get() {
      var listeners = [];
      var listener = first;

      while (listener) {
        listeners.push(listener);
        listener = listener.next;
      }

      return listeners;
    },
    subscribe: function subscribe(callback) {
      var isSubscribed = true;
      var listener = last = {
        callback: callback,
        next: null,
        prev: last
      };

      if (listener.prev) {
        listener.prev.next = listener;
      } else {
        first = listener;
      }

      return function unsubscribe() {
        if (!isSubscribed || first === null) return;
        isSubscribed = false;

        if (listener.next) {
          listener.next.prev = listener.prev;
        } else {
          last = listener.prev;
        }

        if (listener.prev) {
          listener.prev.next = listener.next;
        } else {
          first = listener.next;
        }
      };
    }
  };
}

var Subscription =
/*#__PURE__*/
function () {
  function Subscription(store, parentSub) {
    this.store = store;
    this.parentSub = parentSub;
    this.unsubscribe = null;
    this.listeners = nullListeners;
    this.handleChangeWrapper = this.handleChangeWrapper.bind(this);
  }

  var _proto = Subscription.prototype;

  _proto.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  _proto.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  _proto.handleChangeWrapper = function handleChangeWrapper() {
    if (this.onStateChange) {
      this.onStateChange();
    }
  };

  _proto.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  _proto.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.handleChangeWrapper) : this.store.subscribe(this.handleChangeWrapper);
      this.listeners = createListenerCollection();
    }
  };

  _proto.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();



/***/ }),

/***/ "./node_modules/react-redux/es/utils/batch.js":
/*!****************************************************!*\
  !*** ./node_modules/react-redux/es/utils/batch.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setBatch": function() { return /* binding */ setBatch; },
/* harmony export */   "getBatch": function() { return /* binding */ getBatch; }
/* harmony export */ });
// Default to a dummy "batch" implementation that just runs the callback
function defaultNoopBatch(callback) {
  callback();
}

var batch = defaultNoopBatch; // Allow injecting another batching function later

var setBatch = function setBatch(newBatch) {
  return batch = newBatch;
}; // Supply a getter just to skip dealing with ESM bindings

var getBatch = function getBatch() {
  return batch;
};

/***/ }),

/***/ "./node_modules/react-redux/es/utils/isPlainObject.js":
/*!************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/isPlainObject.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isPlainObject; }
/* harmony export */ });
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null) return true;
  var baseProto = proto;

  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }

  return proto === baseProto;
}

/***/ }),

/***/ "./node_modules/react-redux/es/utils/reactBatchedUpdates.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/reactBatchedUpdates.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unstable_batchedUpdates": function() { return /* reexport safe */ react_dom__WEBPACK_IMPORTED_MODULE_0__.unstable_batchedUpdates; }
/* harmony export */ });
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_0__);
/* eslint-disable import/no-unresolved */


/***/ }),

/***/ "./node_modules/react-redux/es/utils/shallowEqual.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/shallowEqual.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ shallowEqual; }
/* harmony export */ });
function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/***/ }),

/***/ "./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useIsomorphicLayoutEffect": function() { return /* binding */ useIsomorphicLayoutEffect; }
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
 // React currently throws a warning when using useLayoutEffect on the server.
// To get around it, we can conditionally useEffect on the server (no-op) and
// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
// subscription callback always has the selector from the latest render commit
// available, otherwise a store update may happen between render and the effect,
// which may cause missed updates; we also must ensure the store subscription
// is created synchronously, otherwise a store update may occur before the
// subscription is created and an inconsistent state may be observed

var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;

/***/ }),

/***/ "./node_modules/react-redux/es/utils/verifyPlainObject.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/verifyPlainObject.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ verifyPlainObject; }
/* harmony export */ });
/* harmony import */ var _isPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isPlainObject */ "./node_modules/react-redux/es/utils/isPlainObject.js");
/* harmony import */ var _warning__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./warning */ "./node_modules/react-redux/es/utils/warning.js");


function verifyPlainObject(value, displayName, methodName) {
  if (!(0,_isPlainObject__WEBPACK_IMPORTED_MODULE_0__.default)(value)) {
    (0,_warning__WEBPACK_IMPORTED_MODULE_1__.default)(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}

/***/ }),

/***/ "./node_modules/react-redux/es/utils/warning.js":
/*!******************************************************!*\
  !*** ./node_modules/react-redux/es/utils/warning.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ warning; }
/* harmony export */ });
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */

}

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _assign = __webpack_require__(/*! object-assign */ "./node_modules/next/dist/build/polyfills/object-assign.js");

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
exports.Fragment = 0xeacb;
var REACT_STRICT_MODE_TYPE = 0xeacc;
var REACT_PROFILER_TYPE = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
var REACT_SUSPENSE_TYPE = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  exports.Fragment = symbolFor('react.fragment');
  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
  REACT_PROFILER_TYPE = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case exports.Fragment:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown;
var specialPropRefWarningShown;
var didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function warnIfStringRefCannotBeAutoConverted(config, self) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}

function defineKeyPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
}

function defineRefPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */

function jsxDEV(type, config, maybeKey, source, self) {
  {
    var propName; // Reserved names are extracted

    var props = {};
    var key = null;
    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
    // but as an intermediary step, we will use jsxDEV for everything except
    // <div {...props} key="Hi" />, because we aren't currently able to tell if
    // key is explicitly declared to be undefined or not.

    if (maybeKey !== undefined) {
      key = '' + maybeKey;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    if (hasValidRef(config)) {
      ref = config.ref;
      warnIfStringRefCannotBeAutoConverted(config, self);
    } // Remaining properties are added to a new props object


    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    } // Resolve default props


    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;

      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }

    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }

    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
}

function getDeclarationErrorAddendum() {
  {
    if (ReactCurrentOwner$1.current) {
      var name = getComponentName(ReactCurrentOwner$1.current.type);

      if (name) {
        return '\n\nCheck the render method of `' + name + '`.';
      }
    }

    return '';
  }
}

function getSourceInfoErrorAddendum(source) {
  {
    if (source !== undefined) {
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
    }

    return '';
  }
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  {
    var info = getDeclarationErrorAddendum();

    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

      if (parentName) {
        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
      }
    }

    return info;
  }
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }

    element._store.validated = true;
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.

    var childOwner = '';

    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
      // Give the component that originally created this child.
      childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
    }

    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  {
    if (typeof node !== 'object') {
      return;
    }

    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];

        if (isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);

      if (typeof iteratorFn === 'function') {
        // Entry iterators used to provide implicit keys,
        // but now we print a separate warning for them later.
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;

          while (!(step = iterator.next()).done) {
            if (isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentName(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentName(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}

function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
  {
    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.

    if (!validType) {
      var info = '';

      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }

      var sourceInfo = getSourceInfoErrorAddendum(source);

      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }

      var typeString;

      if (type === null) {
        typeString = 'null';
      } else if (Array.isArray(type)) {
        typeString = 'array';
      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
        typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
        info = ' Did you accidentally export a JSX literal instead of a component?';
      } else {
        typeString = typeof type;
      }

      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }

    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.

    if (element == null) {
      return element;
    } // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)


    if (validType) {
      var children = props.children;

      if (children !== undefined) {
        if (isStaticChildren) {
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              validateChildKeys(children[i], type);
            }

            if (Object.freeze) {
              Object.freeze(children);
            }
          } else {
            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
          }
        } else {
          validateChildKeys(children, type);
        }
      }
    }

    if (type === exports.Fragment) {
      validateFragmentProps(element);
    } else {
      validatePropTypes(element);
    }

    return element;
  }
} // These two functions exist to still get child warnings in dev

var jsxDEV$1 =  jsxWithValidation ;

exports.jsxDEV = jsxDEV$1;
  })();
}


/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js");
}


/***/ }),

/***/ "./node_modules/redux-devtools-extension/index.js":
/*!********************************************************!*\
  !*** ./node_modules/redux-devtools-extension/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


var compose = __webpack_require__(/*! redux */ "./node_modules/redux/es/redux.js").compose;

exports.__esModule = true;
exports.composeWithDevTools = (
  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?
    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ :
    function() {
      if (arguments.length === 0) return undefined;
      if (typeof arguments[0] === 'object') return compose;
      return compose.apply(null, arguments);
    }
);

exports.devToolsEnhancer = (
  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ?
    window.__REDUX_DEVTOOLS_EXTENSION__ :
    function() { return function(noop) { return noop; } }
);


/***/ }),

/***/ "./node_modules/redux-persist/es/constants.js":
/*!****************************************************!*\
  !*** ./node_modules/redux-persist/es/constants.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KEY_PREFIX": function() { return /* binding */ KEY_PREFIX; },
/* harmony export */   "FLUSH": function() { return /* binding */ FLUSH; },
/* harmony export */   "REHYDRATE": function() { return /* binding */ REHYDRATE; },
/* harmony export */   "PAUSE": function() { return /* binding */ PAUSE; },
/* harmony export */   "PERSIST": function() { return /* binding */ PERSIST; },
/* harmony export */   "PURGE": function() { return /* binding */ PURGE; },
/* harmony export */   "REGISTER": function() { return /* binding */ REGISTER; },
/* harmony export */   "DEFAULT_VERSION": function() { return /* binding */ DEFAULT_VERSION; }
/* harmony export */ });
var KEY_PREFIX = 'persist:';
var FLUSH = 'persist/FLUSH';
var REHYDRATE = 'persist/REHYDRATE';
var PAUSE = 'persist/PAUSE';
var PERSIST = 'persist/PERSIST';
var PURGE = 'persist/PURGE';
var REGISTER = 'persist/REGISTER';
var DEFAULT_VERSION = -1;

/***/ }),

/***/ "./node_modules/redux-persist/es/createMigrate.js":
/*!********************************************************!*\
  !*** ./node_modules/redux-persist/es/createMigrate.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ createMigrate; }
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/redux-persist/es/constants.js");

function createMigrate(migrations, config) {
  var _ref = config || {},
      debug = _ref.debug;

  return function (state, currentVersion) {
    if (!state) {
      if ( true && debug) console.log('redux-persist: no inbound state, skipping migration');
      return Promise.resolve(undefined);
    }

    var inboundVersion = state._persist && state._persist.version !== undefined ? state._persist.version : _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_VERSION;

    if (inboundVersion === currentVersion) {
      if ( true && debug) console.log('redux-persist: versions match, noop migration');
      return Promise.resolve(state);
    }

    if (inboundVersion > currentVersion) {
      if (true) console.error('redux-persist: downgrading version is not supported');
      return Promise.resolve(state);
    }

    var migrationKeys = Object.keys(migrations).map(function (ver) {
      return parseInt(ver);
    }).filter(function (key) {
      return currentVersion >= key && key > inboundVersion;
    }).sort(function (a, b) {
      return a - b;
    });
    if ( true && debug) console.log('redux-persist: migrationKeys', migrationKeys);

    try {
      var migratedState = migrationKeys.reduce(function (state, versionKey) {
        if ( true && debug) console.log('redux-persist: running migration for versionKey', versionKey);
        return migrations[versionKey](state);
      }, state);
      return Promise.resolve(migratedState);
    } catch (err) {
      return Promise.reject(err);
    }
  };
}

/***/ }),

/***/ "./node_modules/redux-persist/es/createPersistoid.js":
/*!***********************************************************!*\
  !*** ./node_modules/redux-persist/es/createPersistoid.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ createPersistoid; }
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/redux-persist/es/constants.js");

// @TODO remove once flow < 0.63 support is no longer required.
function createPersistoid(config) {
  // defaults
  var blacklist = config.blacklist || null;
  var whitelist = config.whitelist || null;
  var transforms = config.transforms || [];
  var throttle = config.throttle || 0;
  var storageKey = "".concat(config.keyPrefix !== undefined ? config.keyPrefix : _constants__WEBPACK_IMPORTED_MODULE_0__.KEY_PREFIX).concat(config.key);
  var storage = config.storage;
  var serialize;

  if (config.serialize === false) {
    serialize = function serialize(x) {
      return x;
    };
  } else if (typeof config.serialize === 'function') {
    serialize = config.serialize;
  } else {
    serialize = defaultSerialize;
  }

  var writeFailHandler = config.writeFailHandler || null; // initialize stateful values

  var lastState = {};
  var stagedState = {};
  var keysToProcess = [];
  var timeIterator = null;
  var writePromise = null;

  var update = function update(state) {
    // add any changed keys to the queue
    Object.keys(state).forEach(function (key) {
      if (!passWhitelistBlacklist(key)) return; // is keyspace ignored? noop

      if (lastState[key] === state[key]) return; // value unchanged? noop

      if (keysToProcess.indexOf(key) !== -1) return; // is key already queued? noop

      keysToProcess.push(key); // add key to queue
    }); //if any key is missing in the new state which was present in the lastState,
    //add it for processing too

    Object.keys(lastState).forEach(function (key) {
      if (state[key] === undefined && passWhitelistBlacklist(key) && keysToProcess.indexOf(key) === -1 && lastState[key] !== undefined) {
        keysToProcess.push(key);
      }
    }); // start the time iterator if not running (read: throttle)

    if (timeIterator === null) {
      timeIterator = setInterval(processNextKey, throttle);
    }

    lastState = state;
  };

  function processNextKey() {
    if (keysToProcess.length === 0) {
      if (timeIterator) clearInterval(timeIterator);
      timeIterator = null;
      return;
    }

    var key = keysToProcess.shift();
    var endState = transforms.reduce(function (subState, transformer) {
      return transformer.in(subState, key, lastState);
    }, lastState[key]);

    if (endState !== undefined) {
      try {
        stagedState[key] = serialize(endState);
      } catch (err) {
        console.error('redux-persist/createPersistoid: error serializing state', err);
      }
    } else {
      //if the endState is undefined, no need to persist the existing serialized content
      delete stagedState[key];
    }

    if (keysToProcess.length === 0) {
      writeStagedState();
    }
  }

  function writeStagedState() {
    // cleanup any removed keys just before write.
    Object.keys(stagedState).forEach(function (key) {
      if (lastState[key] === undefined) {
        delete stagedState[key];
      }
    });
    writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);
  }

  function passWhitelistBlacklist(key) {
    if (whitelist && whitelist.indexOf(key) === -1 && key !== '_persist') return false;
    if (blacklist && blacklist.indexOf(key) !== -1) return false;
    return true;
  }

  function onWriteFail(err) {
    // @TODO add fail handlers (typically storage full)
    if (writeFailHandler) writeFailHandler(err);

    if (err && "development" !== 'production') {
      console.error('Error storing data', err);
    }
  }

  var flush = function flush() {
    while (keysToProcess.length !== 0) {
      processNextKey();
    }

    return writePromise || Promise.resolve();
  }; // return `persistoid`


  return {
    update: update,
    flush: flush
  };
} // @NOTE in the future this may be exposed via config

function defaultSerialize(data) {
  return JSON.stringify(data);
}

/***/ }),

/***/ "./node_modules/redux-persist/es/createTransform.js":
/*!**********************************************************!*\
  !*** ./node_modules/redux-persist/es/createTransform.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ createTransform; }
/* harmony export */ });
function createTransform( // @NOTE inbound: transform state coming from redux on its way to being serialized and stored
inbound, // @NOTE outbound: transform state coming from storage, on its way to be rehydrated into redux
outbound) {
  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var whitelist = config.whitelist || null;
  var blacklist = config.blacklist || null;

  function whitelistBlacklistCheck(key) {
    if (whitelist && whitelist.indexOf(key) === -1) return true;
    if (blacklist && blacklist.indexOf(key) !== -1) return true;
    return false;
  }

  return {
    in: function _in(state, key, fullState) {
      return !whitelistBlacklistCheck(key) && inbound ? inbound(state, key, fullState) : state;
    },
    out: function out(state, key, fullState) {
      return !whitelistBlacklistCheck(key) && outbound ? outbound(state, key, fullState) : state;
    }
  };
}

/***/ }),

/***/ "./node_modules/redux-persist/es/getStoredState.js":
/*!*********************************************************!*\
  !*** ./node_modules/redux-persist/es/getStoredState.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getStoredState; }
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/redux-persist/es/constants.js");

function getStoredState(config) {
  var transforms = config.transforms || [];
  var storageKey = "".concat(config.keyPrefix !== undefined ? config.keyPrefix : _constants__WEBPACK_IMPORTED_MODULE_0__.KEY_PREFIX).concat(config.key);
  var storage = config.storage;
  var debug = config.debug;
  var deserialize;

  if (config.deserialize === false) {
    deserialize = function deserialize(x) {
      return x;
    };
  } else if (typeof config.deserialize === 'function') {
    deserialize = config.deserialize;
  } else {
    deserialize = defaultDeserialize;
  }

  return storage.getItem(storageKey).then(function (serialized) {
    if (!serialized) return undefined;else {
      try {
        var state = {};
        var rawState = deserialize(serialized);
        Object.keys(rawState).forEach(function (key) {
          state[key] = transforms.reduceRight(function (subState, transformer) {
            return transformer.out(subState, key, rawState);
          }, deserialize(rawState[key]));
        });
        return state;
      } catch (err) {
        if ( true && debug) console.log("redux-persist/getStoredState: Error restoring data ".concat(serialized), err);
        throw err;
      }
    }
  });
}

function defaultDeserialize(serial) {
  return JSON.parse(serial);
}

/***/ }),

/***/ "./node_modules/redux-persist/es/index.js":
/*!************************************************!*\
  !*** ./node_modules/redux-persist/es/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "persistReducer": function() { return /* reexport safe */ _persistReducer__WEBPACK_IMPORTED_MODULE_0__.default; },
/* harmony export */   "persistCombineReducers": function() { return /* reexport safe */ _persistCombineReducers__WEBPACK_IMPORTED_MODULE_1__.default; },
/* harmony export */   "persistStore": function() { return /* reexport safe */ _persistStore__WEBPACK_IMPORTED_MODULE_2__.default; },
/* harmony export */   "createMigrate": function() { return /* reexport safe */ _createMigrate__WEBPACK_IMPORTED_MODULE_3__.default; },
/* harmony export */   "createTransform": function() { return /* reexport safe */ _createTransform__WEBPACK_IMPORTED_MODULE_4__.default; },
/* harmony export */   "getStoredState": function() { return /* reexport safe */ _getStoredState__WEBPACK_IMPORTED_MODULE_5__.default; },
/* harmony export */   "createPersistoid": function() { return /* reexport safe */ _createPersistoid__WEBPACK_IMPORTED_MODULE_6__.default; },
/* harmony export */   "purgeStoredState": function() { return /* reexport safe */ _purgeStoredState__WEBPACK_IMPORTED_MODULE_7__.default; }
/* harmony export */ });
/* harmony import */ var _persistReducer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./persistReducer */ "./node_modules/redux-persist/es/persistReducer.js");
/* harmony import */ var _persistCombineReducers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./persistCombineReducers */ "./node_modules/redux-persist/es/persistCombineReducers.js");
/* harmony import */ var _persistStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./persistStore */ "./node_modules/redux-persist/es/persistStore.js");
/* harmony import */ var _createMigrate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createMigrate */ "./node_modules/redux-persist/es/createMigrate.js");
/* harmony import */ var _createTransform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./createTransform */ "./node_modules/redux-persist/es/createTransform.js");
/* harmony import */ var _getStoredState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getStoredState */ "./node_modules/redux-persist/es/getStoredState.js");
/* harmony import */ var _createPersistoid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./createPersistoid */ "./node_modules/redux-persist/es/createPersistoid.js");
/* harmony import */ var _purgeStoredState__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./purgeStoredState */ "./node_modules/redux-persist/es/purgeStoredState.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constants */ "./node_modules/redux-persist/es/constants.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _constants__WEBPACK_IMPORTED_MODULE_8__) if(["default","persistReducer","persistCombineReducers","persistStore","createMigrate","createTransform","getStoredState","createPersistoid","purgeStoredState"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _constants__WEBPACK_IMPORTED_MODULE_8__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);










/***/ }),

/***/ "./node_modules/redux-persist/es/persistCombineReducers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/redux-persist/es/persistCombineReducers.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ persistCombineReducers; }
/* harmony export */ });
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/redux.js");
/* harmony import */ var _persistReducer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./persistReducer */ "./node_modules/redux-persist/es/persistReducer.js");
/* harmony import */ var _stateReconciler_autoMergeLevel2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stateReconciler/autoMergeLevel2 */ "./node_modules/redux-persist/es/stateReconciler/autoMergeLevel2.js");



// combineReducers + persistReducer with stateReconciler defaulted to autoMergeLevel2
function persistCombineReducers(config, reducers) {
  config.stateReconciler = config.stateReconciler === undefined ? _stateReconciler_autoMergeLevel2__WEBPACK_IMPORTED_MODULE_1__.default : config.stateReconciler;
  return (0,_persistReducer__WEBPACK_IMPORTED_MODULE_0__.default)(config, (0,redux__WEBPACK_IMPORTED_MODULE_2__.combineReducers)(reducers));
}

/***/ }),

/***/ "./node_modules/redux-persist/es/persistReducer.js":
/*!*********************************************************!*\
  !*** ./node_modules/redux-persist/es/persistReducer.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ persistReducer; }
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/redux-persist/es/constants.js");
/* harmony import */ var _stateReconciler_autoMergeLevel1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stateReconciler/autoMergeLevel1 */ "./node_modules/redux-persist/es/stateReconciler/autoMergeLevel1.js");
/* harmony import */ var _createPersistoid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createPersistoid */ "./node_modules/redux-persist/es/createPersistoid.js");
/* harmony import */ var _getStoredState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./getStoredState */ "./node_modules/redux-persist/es/getStoredState.js");
/* harmony import */ var _purgeStoredState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./purgeStoredState */ "./node_modules/redux-persist/es/purgeStoredState.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }






var DEFAULT_TIMEOUT = 5000;
/*
  @TODO add validation / handling for:
  - persisting a reducer which has nested _persist
  - handling actions that fire before reydrate is called
*/

function persistReducer(config, baseReducer) {
  if (true) {
    if (!config) throw new Error('config is required for persistReducer');
    if (!config.key) throw new Error('key is required in persistor config');
    if (!config.storage) throw new Error("redux-persist: config.storage is required. Try using one of the provided storage engines `import storage from 'redux-persist/lib/storage'`");
  }

  var version = config.version !== undefined ? config.version : _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_VERSION;
  var debug = config.debug || false;
  var stateReconciler = config.stateReconciler === undefined ? _stateReconciler_autoMergeLevel1__WEBPACK_IMPORTED_MODULE_1__.default : config.stateReconciler;
  var getStoredState = config.getStoredState || _getStoredState__WEBPACK_IMPORTED_MODULE_3__.default;
  var timeout = config.timeout !== undefined ? config.timeout : DEFAULT_TIMEOUT;
  var _persistoid = null;
  var _purge = false;
  var _paused = true;

  var conditionalUpdate = function conditionalUpdate(state) {
    // update the persistoid only if we are rehydrated and not paused
    state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);
    return state;
  };

  return function (state, action) {
    var _ref = state || {},
        _persist = _ref._persist,
        rest = _objectWithoutProperties(_ref, ["_persist"]); // $FlowIgnore need to update State type


    var restState = rest;

    if (action.type === _constants__WEBPACK_IMPORTED_MODULE_0__.PERSIST) {
      var _sealed = false;

      var _rehydrate = function _rehydrate(payload, err) {
        // dev warning if we are already sealed
        if ( true && _sealed) console.error("redux-persist: rehydrate for \"".concat(config.key, "\" called after timeout."), payload, err); // only rehydrate if we are not already sealed

        if (!_sealed) {
          action.rehydrate(config.key, payload, err);
          _sealed = true;
        }
      };

      timeout && setTimeout(function () {
        !_sealed && _rehydrate(undefined, new Error("redux-persist: persist timed out for persist key \"".concat(config.key, "\"")));
      }, timeout); // @NOTE PERSIST resumes if paused.

      _paused = false; // @NOTE only ever create persistoid once, ensure we call it at least once, even if _persist has already been set

      if (!_persistoid) _persistoid = (0,_createPersistoid__WEBPACK_IMPORTED_MODULE_2__.default)(config); // @NOTE PERSIST can be called multiple times, noop after the first

      if (_persist) {
        // We still need to call the base reducer because there might be nested
        // uses of persistReducer which need to be aware of the PERSIST action
        return _objectSpread({}, baseReducer(restState, action), {
          _persist: _persist
        });
      }

      if (typeof action.rehydrate !== 'function' || typeof action.register !== 'function') throw new Error('redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.');
      action.register(config.key);
      getStoredState(config).then(function (restoredState) {
        var migrate = config.migrate || function (s, v) {
          return Promise.resolve(s);
        };

        migrate(restoredState, version).then(function (migratedState) {
          _rehydrate(migratedState);
        }, function (migrateErr) {
          if ( true && migrateErr) console.error('redux-persist: migration error', migrateErr);

          _rehydrate(undefined, migrateErr);
        });
      }, function (err) {
        _rehydrate(undefined, err);
      });
      return _objectSpread({}, baseReducer(restState, action), {
        _persist: {
          version: version,
          rehydrated: false
        }
      });
    } else if (action.type === _constants__WEBPACK_IMPORTED_MODULE_0__.PURGE) {
      _purge = true;
      action.result((0,_purgeStoredState__WEBPACK_IMPORTED_MODULE_4__.default)(config));
      return _objectSpread({}, baseReducer(restState, action), {
        _persist: _persist
      });
    } else if (action.type === _constants__WEBPACK_IMPORTED_MODULE_0__.FLUSH) {
      action.result(_persistoid && _persistoid.flush());
      return _objectSpread({}, baseReducer(restState, action), {
        _persist: _persist
      });
    } else if (action.type === _constants__WEBPACK_IMPORTED_MODULE_0__.PAUSE) {
      _paused = true;
    } else if (action.type === _constants__WEBPACK_IMPORTED_MODULE_0__.REHYDRATE) {
      // noop on restState if purging
      if (_purge) return _objectSpread({}, restState, {
        _persist: _objectSpread({}, _persist, {
          rehydrated: true
        }) // @NOTE if key does not match, will continue to default else below

      });

      if (action.key === config.key) {
        var reducedState = baseReducer(restState, action);
        var inboundState = action.payload; // only reconcile state if stateReconciler and inboundState are both defined

        var reconciledRest = stateReconciler !== false && inboundState !== undefined ? stateReconciler(inboundState, state, reducedState, config) : reducedState;

        var _newState = _objectSpread({}, reconciledRest, {
          _persist: _objectSpread({}, _persist, {
            rehydrated: true
          })
        });

        return conditionalUpdate(_newState);
      }
    } // if we have not already handled PERSIST, straight passthrough


    if (!_persist) return baseReducer(state, action); // run base reducer:
    // is state modified ? return original : return updated

    var newState = baseReducer(restState, action);
    if (newState === restState) return state;
    return conditionalUpdate(_objectSpread({}, newState, {
      _persist: _persist
    }));
  };
}

/***/ }),

/***/ "./node_modules/redux-persist/es/persistStore.js":
/*!*******************************************************!*\
  !*** ./node_modules/redux-persist/es/persistStore.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ persistStore; }
/* harmony export */ });
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/redux.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/redux-persist/es/constants.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var initialState = {
  registry: [],
  bootstrapped: false
};

var persistorReducer = function persistorReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants__WEBPACK_IMPORTED_MODULE_0__.REGISTER:
      return _objectSpread({}, state, {
        registry: [].concat(_toConsumableArray(state.registry), [action.key])
      });

    case _constants__WEBPACK_IMPORTED_MODULE_0__.REHYDRATE:
      var firstIndex = state.registry.indexOf(action.key);

      var registry = _toConsumableArray(state.registry);

      registry.splice(firstIndex, 1);
      return _objectSpread({}, state, {
        registry: registry,
        bootstrapped: registry.length === 0
      });

    default:
      return state;
  }
};

function persistStore(store, options, cb) {
  // help catch incorrect usage of passing PersistConfig in as PersistorOptions
  if (true) {
    var optionsToTest = options || {};
    var bannedKeys = ['blacklist', 'whitelist', 'transforms', 'storage', 'keyPrefix', 'migrate'];
    bannedKeys.forEach(function (k) {
      if (!!optionsToTest[k]) console.error("redux-persist: invalid option passed to persistStore: \"".concat(k, "\". You may be incorrectly passing persistConfig into persistStore, whereas it should be passed into persistReducer."));
    });
  }

  var boostrappedCb = cb || false;

  var _pStore = (0,redux__WEBPACK_IMPORTED_MODULE_1__.createStore)(persistorReducer, initialState, options && options.enhancer ? options.enhancer : undefined);

  var register = function register(key) {
    _pStore.dispatch({
      type: _constants__WEBPACK_IMPORTED_MODULE_0__.REGISTER,
      key: key
    });
  };

  var rehydrate = function rehydrate(key, payload, err) {
    var rehydrateAction = {
      type: _constants__WEBPACK_IMPORTED_MODULE_0__.REHYDRATE,
      payload: payload,
      err: err,
      key: key // dispatch to `store` to rehydrate and `persistor` to track result

    };
    store.dispatch(rehydrateAction);

    _pStore.dispatch(rehydrateAction);

    if (boostrappedCb && persistor.getState().bootstrapped) {
      boostrappedCb();
      boostrappedCb = false;
    }
  };

  var persistor = _objectSpread({}, _pStore, {
    purge: function purge() {
      var results = [];
      store.dispatch({
        type: _constants__WEBPACK_IMPORTED_MODULE_0__.PURGE,
        result: function result(purgeResult) {
          results.push(purgeResult);
        }
      });
      return Promise.all(results);
    },
    flush: function flush() {
      var results = [];
      store.dispatch({
        type: _constants__WEBPACK_IMPORTED_MODULE_0__.FLUSH,
        result: function result(flushResult) {
          results.push(flushResult);
        }
      });
      return Promise.all(results);
    },
    pause: function pause() {
      store.dispatch({
        type: _constants__WEBPACK_IMPORTED_MODULE_0__.PAUSE
      });
    },
    persist: function persist() {
      store.dispatch({
        type: _constants__WEBPACK_IMPORTED_MODULE_0__.PERSIST,
        register: register,
        rehydrate: rehydrate
      });
    }
  });

  if (!(options && options.manualPersist)) {
    persistor.persist();
  }

  return persistor;
}

/***/ }),

/***/ "./node_modules/redux-persist/es/purgeStoredState.js":
/*!***********************************************************!*\
  !*** ./node_modules/redux-persist/es/purgeStoredState.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ purgeStoredState; }
/* harmony export */ });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ "./node_modules/redux-persist/es/constants.js");

function purgeStoredState(config) {
  var storage = config.storage;
  var storageKey = "".concat(config.keyPrefix !== undefined ? config.keyPrefix : _constants__WEBPACK_IMPORTED_MODULE_0__.KEY_PREFIX).concat(config.key);
  return storage.removeItem(storageKey, warnIfRemoveError);
}

function warnIfRemoveError(err) {
  if (err && "development" !== 'production') {
    console.error('redux-persist/purgeStoredState: Error purging data stored state', err);
  }
}

/***/ }),

/***/ "./node_modules/redux-persist/es/stateReconciler/autoMergeLevel1.js":
/*!**************************************************************************!*\
  !*** ./node_modules/redux-persist/es/stateReconciler/autoMergeLevel1.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ autoMergeLevel1; }
/* harmony export */ });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
  autoMergeLevel1: 
    - merges 1 level of substate
    - skips substate if already modified
*/
function autoMergeLevel1(inboundState, originalState, reducedState, _ref) {
  var debug = _ref.debug;

  var newState = _objectSpread({}, reducedState); // only rehydrate if inboundState exists and is an object


  if (inboundState && _typeof(inboundState) === 'object') {
    Object.keys(inboundState).forEach(function (key) {
      // ignore _persist data
      if (key === '_persist') return; // if reducer modifies substate, skip auto rehydration

      if (originalState[key] !== reducedState[key]) {
        if ( true && debug) console.log('redux-persist/stateReconciler: sub state for key `%s` modified, skipping.', key);
        return;
      } // otherwise hard set the new value


      newState[key] = inboundState[key];
    });
  }

  if ( true && debug && inboundState && _typeof(inboundState) === 'object') console.log("redux-persist/stateReconciler: rehydrated keys '".concat(Object.keys(inboundState).join(', '), "'"));
  return newState;
}

/***/ }),

/***/ "./node_modules/redux-persist/es/stateReconciler/autoMergeLevel2.js":
/*!**************************************************************************!*\
  !*** ./node_modules/redux-persist/es/stateReconciler/autoMergeLevel2.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ autoMergeLevel2; }
/* harmony export */ });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
  autoMergeLevel2: 
    - merges 2 level of substate
    - skips substate if already modified
    - this is essentially redux-perist v4 behavior
*/
function autoMergeLevel2(inboundState, originalState, reducedState, _ref) {
  var debug = _ref.debug;

  var newState = _objectSpread({}, reducedState); // only rehydrate if inboundState exists and is an object


  if (inboundState && _typeof(inboundState) === 'object') {
    Object.keys(inboundState).forEach(function (key) {
      // ignore _persist data
      if (key === '_persist') return; // if reducer modifies substate, skip auto rehydration

      if (originalState[key] !== reducedState[key]) {
        if ( true && debug) console.log('redux-persist/stateReconciler: sub state for key `%s` modified, skipping.', key);
        return;
      }

      if (isPlainEnoughObject(reducedState[key])) {
        // if object is plain enough shallow merge the new values (hence "Level2")
        newState[key] = _objectSpread({}, newState[key], {}, inboundState[key]);
        return;
      } // otherwise hard set


      newState[key] = inboundState[key];
    });
  }

  if ( true && debug && inboundState && _typeof(inboundState) === 'object') console.log("redux-persist/stateReconciler: rehydrated keys '".concat(Object.keys(inboundState).join(', '), "'"));
  return newState;
}

function isPlainEnoughObject(o) {
  return o !== null && !Array.isArray(o) && _typeof(o) === 'object';
}

/***/ }),

/***/ "./node_modules/redux-persist/lib/storage/createWebStorage.js":
/*!********************************************************************!*\
  !*** ./node_modules/redux-persist/lib/storage/createWebStorage.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = createWebStorage;

var _getStorage = _interopRequireDefault(__webpack_require__(/*! ./getStorage */ "./node_modules/redux-persist/lib/storage/getStorage.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createWebStorage(type) {
  var storage = (0, _getStorage.default)(type);
  return {
    getItem: function getItem(key) {
      return new Promise(function (resolve, reject) {
        resolve(storage.getItem(key));
      });
    },
    setItem: function setItem(key, item) {
      return new Promise(function (resolve, reject) {
        resolve(storage.setItem(key, item));
      });
    },
    removeItem: function removeItem(key) {
      return new Promise(function (resolve, reject) {
        resolve(storage.removeItem(key));
      });
    }
  };
}

/***/ }),

/***/ "./node_modules/redux-persist/lib/storage/getStorage.js":
/*!**************************************************************!*\
  !*** ./node_modules/redux-persist/lib/storage/getStorage.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";


exports.__esModule = true;
exports.default = getStorage;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function noop() {}

var noopStorage = {
  getItem: noop,
  setItem: noop,
  removeItem: noop
};

function hasStorage(storageType) {
  if ((typeof self === "undefined" ? "undefined" : _typeof(self)) !== 'object' || !(storageType in self)) {
    return false;
  }

  try {
    var storage = self[storageType];
    var testKey = "redux-persist ".concat(storageType, " test");
    storage.setItem(testKey, 'test');
    storage.getItem(testKey);
    storage.removeItem(testKey);
  } catch (e) {
    if (true) console.warn("redux-persist ".concat(storageType, " test failed, persistence will be disabled."));
    return false;
  }

  return true;
}

function getStorage(type) {
  var storageType = "".concat(type, "Storage");
  if (hasStorage(storageType)) return self[storageType];else {
    if (true) {
      console.error("redux-persist failed to create sync storage. falling back to noop storage.");
    }

    return noopStorage;
  }
}

/***/ }),

/***/ "./node_modules/redux-persist/lib/storage/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/redux-persist/lib/storage/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _createWebStorage = _interopRequireDefault(__webpack_require__(/*! ./createWebStorage */ "./node_modules/redux-persist/lib/storage/createWebStorage.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _createWebStorage.default)('local');

exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-thunk/es/index.js":
/*!**********************************************!*\
  !*** ./node_modules/redux-thunk/es/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

/* harmony default export */ __webpack_exports__["default"] = (thunk);

/***/ }),

/***/ "./node_modules/redux/es/redux.js":
/*!****************************************!*\
  !*** ./node_modules/redux/es/redux.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "__DO_NOT_USE__ActionTypes": function() { return /* binding */ ActionTypes; },
/* harmony export */   "applyMiddleware": function() { return /* binding */ applyMiddleware; },
/* harmony export */   "bindActionCreators": function() { return /* binding */ bindActionCreators; },
/* harmony export */   "combineReducers": function() { return /* binding */ combineReducers; },
/* harmony export */   "compose": function() { return /* binding */ compose; },
/* harmony export */   "createStore": function() { return /* binding */ createStore; }
/* harmony export */ });
/* harmony import */ var symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! symbol-observable */ "./node_modules/symbol-observable/es/index.js");


/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};

var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');
  }

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  /**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */


  function getState() {
    if (isDispatching) {
      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
    }

    return currentState;
  }
  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */


  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected the listener to be a function.');
    }

    if (isDispatching) {
      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
    }

    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      if (isDispatching) {
        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');
      }

      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */


  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }
  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */


  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
    // Any reducers that existed in both the new and old rootReducer
    // will receive the previous state. This effectively populates
    // the new state tree with any relevant data from the old one.

    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */


  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe: unsubscribe
        };
      }
    }, _ref[symbol_observable__WEBPACK_IMPORTED_MODULE_0__.default] = function () {
      return this;
    }, _ref;
  } // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.


  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[symbol_observable__WEBPACK_IMPORTED_MODULE_0__.default] = observable, _ref2;
}

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty

}

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
  return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, {
      type: ActionTypes.INIT
    });

    if (typeof initialState === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
    }

    if (typeof reducer(undefined, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
    }
  });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */


function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};

  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (true) {
      if (typeof reducers[key] === 'undefined') {
        warning("No reducer provided for key \"" + key + "\"");
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }

  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
  // keys multiple times.

  var unexpectedKeyCache;

  if (true) {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError;

  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (true) {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};

    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);

      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }

      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }

    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}

function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */


function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
  }

  var boundActionCreators = {};

  for (var key in actionCreators) {
    var actionCreator = actionCreators[key];

    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }

  return boundActionCreators;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    keys.push.apply(keys, Object.getOwnPropertySymbols(object));
  }

  if (enumerableOnly) keys = keys.filter(function (sym) {
    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
  });
  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function () {
      var store = createStore.apply(void 0, arguments);

      var _dispatch = function dispatch() {
        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
      };

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread2({}, store, {
        dispatch: _dispatch
      });
    };
  };
}

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

function isCrushed() {}

if ( true && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
}




/***/ }),

/***/ "./node_modules/symbol-observable/es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/symbol-observable/es/index.js ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ponyfill.js */ "./node_modules/symbol-observable/es/ponyfill.js");
/* module decorator */ module = __webpack_require__.hmd(module);
/* global window */


var root;

if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof __webpack_require__.g !== 'undefined') {
  root = __webpack_require__.g;
} else if (true) {
  root = module;
} else {}

var result = (0,_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__.default)(root);
/* harmony default export */ __webpack_exports__["default"] = (result);


/***/ }),

/***/ "./node_modules/symbol-observable/es/ponyfill.js":
/*!*******************************************************!*\
  !*** ./node_modules/symbol-observable/es/ponyfill.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ symbolObservablePonyfill; }
/* harmony export */ });
function symbolObservablePonyfill(root) {
	var result;
	var Symbol = root.Symbol;

	if (typeof Symbol === 'function') {
		if (Symbol.observable) {
			result = Symbol.observable;
		} else {
			result = Symbol('observable');
			Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
};


/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ // runtime can't be in strict mode because a global variable is assign and maybe created.
/******/ 
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.js!"), __webpack_exec__("./node_modules/next/dist/client/router.js"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,